<!-- doc/src/sgml/pgupgrade.sgml -->

<refentry id="pgupgrade">
 <indexterm zone="pgupgrade">
  <primary>pg_upgrade</primary>
 </indexterm>

 <refmeta>
  <refentrytitle><application>pg_upgrade</application></refentrytitle>
  <manvolnum>1</manvolnum>
<!--
  <refmiscinfo>Application</refmiscinfo>
-->
  <refmiscinfo>アプリケーション</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>pg_upgrade</refname>
<!--
  <refpurpose>upgrade a <productname>PostgreSQL</productname> server instance</refpurpose>
-->
  <refpurpose><productname>PostgreSQL</productname>サーバインスタンスをアップグレードする</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <cmdsynopsis>
   <command>pg_upgrade</command>
   <arg choice="plain"><option>-b</option></arg>
   <arg choice="plain"><replaceable>oldbindir</replaceable></arg>
   <arg choice="plain"><option>-B</option></arg>
   <arg choice="plain"><replaceable>newbindir</replaceable></arg>
   <arg choice="plain"><option>-d</option></arg>
   <arg choice="plain"><replaceable>olddatadir</replaceable></arg>
   <arg choice="plain"><option>-D</option></arg>
   <arg choice="plain"><replaceable>newdatadir</replaceable></arg>
   <arg rep="repeat"><replaceable>option</replaceable></arg>
  </cmdsynopsis>
 </refsynopsisdiv>

 <refsect1>
<!--
  <title>Description</title>
-->
  <title>説明</title>

 <para>
<!--
  <application>pg_upgrade</> (formerly called <application>pg_migrator</>) allows data
  stored in <productname>PostgreSQL</> data files to be upgraded to a later <productname>PostgreSQL</>
  major version without the data dump/reload typically required for
  major version upgrades, e.g. from 8.4.7 to the current major release
  of <productname>PostgreSQL</>.  It is not required for minor version upgrades, e.g. from
  9.0.1 to 9.0.4.
-->
<application>pg_upgrade</>(これまでは<application>pg_migrator</>と呼ばれていました)を使用して、メジャーバージョンへのアップグレード、例えば、8.4.7から現時点のメジャーリリースの<productname>PostgreSQL</>、に通常必要とされたデータのダンプ/リストアを行うことなく、<productname>PostgreSQL</>データファイル内に格納されたデータをより最新の<productname>PostgreSQL</>メジャーバージョンに移行することができます。
これは、例えば9.0.1から9.0.4などマイナーバージョンへのアップグレードでは必要ありません。
 </para>

 <para>
<!--
  Major PostgreSQL releases regularly add new features that often
  change the layout of the system tables, but the internal data storage
  format rarely changes.  <application>pg_upgrade</> uses this fact
  to perform rapid upgrades by creating new system tables and simply
  reusing the old user data files.  If a future major release ever
  changes the data storage format in a way that makes the old data
  format unreadable, <application>pg_upgrade</> will not be usable
  for such upgrades.  (The community will attempt to avoid such
  situations.)
-->
PostgreSQLのメジャーリリースでは通常、システムテーブルのレイアウトをよく変更する、多くの機能が追加されます。
しかし内部データの格納書式はまれにしか変更されません。
<application>pg_upgrade</>はこの事実を使用して、システムテーブルを新しく作成し、古いユーザデータファイルを単に再利用することで、高速なアップグレードを実施します。
将来のメジャーリリースでついに古いデータ書式を読み取ることができなくなるようにデータ格納書式を変更した場合、<application>pg_upgrade</>ではこうしたアップグレードを扱うことができません。
（コミュニティはこうした状況を防ごうと考えています。）
 </para>

 <para>
<!--
  <application>pg_upgrade</> does its best to
  make sure the old and new clusters are binary-compatible, e.g.  by
  checking for compatible compile-time settings, including 32/64-bit
  binaries.  It is important that
  any external modules are also binary compatible, though this cannot
  be checked by <application>pg_upgrade</>.
-->
<application>pg_upgrade</>は古いクラスタと新しいクラスタとの間で、例えばコンパイル時の設定に互換性があるかどうか、32ビットバイナリか64ビットバイナリかなど、バイナリ互換性があることを確実にするために最善を尽くします。
任意の外部モジュールがバイナリ互換であることも重要ですが、これは<application>pg_upgrade</>では検査することができません。
 </para>

  <para>
<!--
   pg_upgrade supports upgrades from 8.3.X and later to the current
   major release of <productname>PostgreSQL</>, including snapshot and alpha releases.
-->
pg_upgradeは8.3.X以降から現時点の<productname>PostgreSQL</>のメジャーリリース(スナップショット版やαリリースを含む)へのアップグレードをサポートします。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>Options</title>
-->
  <title>オプション</title>

   <para>
<!--
    <application>pg_upgrade</application> accepts the following command-line arguments:
-->
    <application>pg_upgrade</application>は以下のコマンドライン引数を受け付けます。

    <variablelist>

     <varlistentry>
      <term><option>-b</option> <replaceable>bindir</></term>
      <term><option>--old-bindir=</option><replaceable>bindir</></term>
<!--
      <listitem><para>the old PostgreSQL executable directory;
      environment variable <envar>PGBINOLD</></para></listitem>
-->
      <listitem><para>古いPostgreSQLの実行ファイル格納ディレクトリ。<envar>PGBINOLD</>環境変数</para></listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-B</option> <replaceable>bindir</></term>
      <term><option>--new-bindir=</option><replaceable>bindir</></term>
<!--
      <listitem><para>the new PostgreSQL executable directory;
      environment variable <envar>PGBINNEW</></para></listitem>
-->
      <listitem><para>新しいPostgreSQLの実行ファイル格納ディレクトリ。<envar>PGBINNEW</>環境変数</para></listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-c</option></term>
      <term><option>--check</option></term>
<!--
      <listitem><para>check clusters only, don't change any data</para></listitem>
-->
      <listitem><para>クラスタの検査のみを行い、データの変更を行いません。</para></listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-d</option> <replaceable>datadir</></term>
      <term><option>--old-datadir=</option><replaceable>datadir</></term>
<!--
      <listitem><para>the old cluster data directory; environment
      variable <envar>PGDATAOLD</></para></listitem>
-->
      <listitem><para>古いクラスタのデータディレクトリ。<envar>PGDATAOLD</>環境変数</para></listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-D</option> <replaceable>datadir</></term>
      <term><option>--new-datadir=</option><replaceable>datadir</></term>
<!--
      <listitem><para>the new cluster data directory; environment
      variable <envar>PGDATANEW</></para></listitem>
-->
      <listitem><para>新しいクラスタのデータディレクトリ。<envar>PGDATANEW</>環境変数</para></listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-j</option></term>
      <term><option>--jobs</option></term>
<!--
      <listitem><para>number of simultaneous processes or threads to use
-->
      <listitem><para>使用する同時実行プロセスまたはスレッド数。</para></listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-k</option></term>
      <term><option>--link</option></term>
<!--
      <listitem><para>use hard links instead of copying files to the new
      cluster (use junction points on Windows)</para></listitem>
-->
      <listitem><para>新しいクラスタにファイルをコピーするのではなく、ハードリンクを使用します。(Windowsではジャンクションポイントを使用してください。)</para></listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-o</option> <replaceable class="parameter">options</replaceable></term>
      <term><option>--old-options</option> <replaceable class="parameter">options</replaceable></term>
<!--
      <listitem><para>options to be passed directly to the
      old <command>postgres</command> command</para></listitem>
-->
      <listitem><para>古い<command>postgres</command>コマンドに直接渡すオプションです。</para></listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-O</option> <replaceable class="parameter">options</replaceable></term>
      <term><option>--new-options</option> <replaceable class="parameter">options</replaceable></term>
<!--
      <listitem><para>options to be passed directly to the
      new <command>postgres</command> command</para></listitem>
-->
      <listitem><para>新しい<command>postgres</command>コマンドに直接渡すオプションです。</para></listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-p</option> <replaceable>port</></term>
      <term><option>--old-port=</option><replaceable>port</></term>
<!--
      <listitem><para>the old cluster port number; environment
      variable <envar>PGPORTOLD</></para></listitem>
-->
      <listitem><para>古いクラスタのポート番号。<envar>PGPORTOLD</>環境変数</para></listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-P</option> <replaceable>port</></term>
      <term><option>--new-port=</option><replaceable>port</></term>
<!--
      <listitem><para>the new cluster port number; environment
      variable <envar>PGPORTNEW</></para></listitem>
-->
      <listitem><para>新しいクラスタのポート番号。<envar>PGPORTNEW</>環境変数</para></listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-r</option></term>
      <term><option>--retain</option></term>
<!--
      <listitem><para>retain SQL and log files even after successful completion
-->
      <listitem><para>正常に完了した場合であってもSQLファイルとログファイルを保持します。</para></listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-U</option> <replaceable>username</></term>
      <term><option>--username=</option><replaceable>username</></term>
<!--
      <listitem><para>cluster's super user name; environment
      variable <envar>PGUSER</></para></listitem>
-->
      <listitem><para>クラスタのスーパーユーザの名称。<envar>PGUSER</>環境変数</para></listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-v</option></term>
      <term><option>--verbose</option></term>
<!--
      <listitem><para>enable verbose internal logging</para></listitem>
-->
      <listitem><para>冗長な内部ログを有効にします。</para></listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-V</option></term>
      <term><option>--version</option></term>
<!--
      <listitem><para>display version information, then exit</para></listitem>
-->
      <listitem><para>バージョン情報を表示し、終了します。</para></listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-?</option></term>
      <term><option>-h</option></term>
      <term><option>--help</option></term>
<!--
      <listitem><para>show help, then exit</para></listitem>
-->
      <listitem><para>使用方法を表示し、終了します。</para></listitem>
     </varlistentry>

    </variablelist>
   </para>

 </refsect1>

 <refsect1>
<!--
  <title>Usage</title>
-->
  <title>使用法</title>

  <para>
<!--
   These are the steps to perform an upgrade
   with <application>pg_upgrade</application>:
-->
<application>pg_upgrade</application>を用いたアップグレードを行う手順を示します。
  </para>

  <procedure>
   <step performance="optional">
<!--
    <title>Optionally move the old cluster</title>
-->
    <title>古いクラスタの移動（省略可能）</title>

    <para>
<!--
     If you are using a version-specific installation directory, e.g.
     <filename>/opt/PostgreSQL/9.1</>, you do not need to move the old cluster. The
     graphical installers all use version-specific installation directories.
-->
バージョンに関連したインストレーションディレクトリ(例えば<filename>/opt/PostgreSQL/9.1</>)を使用しているのであれば、古いクラスタを移動する必要はありません。
グラフィカルインストーラはすべて、バージョンに関連したインストレーションディレクトリを使用します。
    </para>

    <para>
<!--
     If your installation directory is not version-specific, e.g.
     <filename>/usr/local/pgsql</>, it is necessary to move the current PostgreSQL install
     directory so it does not interfere with the new <productname>PostgreSQL</> installation.
     Once the current <productname>PostgreSQL</> server is shut down, it is safe to rename the
     PostgreSQL installation directory; assuming the old directory is
     <filename>/usr/local/pgsql</>, you can do:
-->
インストレーションディレクトリがバージョンに関連していない（例えば<filename>/usr/local/pgsql</>）のであれば、新しい<productname>PostgreSQL</>のインストレーションに干渉しないように、現在のPostgreSQLインストレーションディレクトリを移動しなければなりません。
一度現在の<productname>PostgreSQL</>サーバを停止させていれば、PostgreSQLのインストレーションの名前を変更しても安全です。
古いディレクトリが<filename>/usr/local/pgsql</>であれば、以下のようにディレクトリ名を変更します。

<programlisting>
mv /usr/local/pgsql /usr/local/pgsql.old
</programlisting>
<!--
     to rename the directory.
-->
    </para>
   </step>

   <step>
<!--
    <title>For source installs, build the new version</title>
-->
    <title>ソースからのインストールの場合の新しいバージョンの構築</title>

    <para>
<!--
     Build the new PostgreSQL source with <command>configure</> flags that are compatible
     with the old cluster. <application>pg_upgrade</> will check <command>pg_controldata</> to make
     sure all settings are compatible before starting the upgrade.
-->
古いクラスタと互換性を持つような<command>configure</>オプションを付けて新しいPostgreSQLソースを構築してください。
<application>pg_upgrade</>はアップグレードを始める前にすべての設定が互換性を持っていることを確認するために<command>pg_controldata</>を検査します。
    </para>
   </step>

   <step>
<!--
    <title>Install the new PostgreSQL binaries</title>
-->
    <title>新しいPostgreSQLのバイナリのインストール</title>

    <para>
<!--
     Install the new server's binaries and support files.
-->
新しいサーバのバイナリとサポートファイルをインストールしてください。
    </para>

    <para>
<!--
     For source installs, if you wish to install the new server in a custom
     location, use the <literal>prefix</literal> variable:
-->
ソースからインストールする場合、独自の場所に新しいサーバをインストールしたければ、以下のように<literal>prefix</literal>を使用してください。

<programlisting>
make prefix=/usr/local/pgsql.new install
</programlisting></para>
   </step>

   <step>
<!--
    <title>Install pg_upgrade and pg_upgrade_support</title>
-->
    <title>pg_upgradeおよびpg_upgrade_supportのインストール</title>

    <para>
<!--
     Install the <application>pg_upgrade</> binary and
     <application>pg_upgrade_support</> library in the new PostgreSQL
     installation.
-->
新しいPostgreSQLインストレーションに<application>pg_upgrade</>バイナリおよび<application>pg_upgrade_support</>ライブラリをインストールしてください。
    </para>
   </step>

   <step>
<!--
    <title>Initialize the new PostgreSQL cluster</title>
-->
    <title>新しいPostgreSQLクラスタを初期化</title>

    <para>
<!--
     Initialize the new cluster using <command>initdb</command>.
     Again, use compatible <command>initdb</command>
     flags that match the old cluster. Many
     prebuilt installers do this step automatically. There is no need to
     start the new cluster.
-->
<command>initdb</command>を使用して新しいクラスタを初期化してください。<indexterm><primary>initdb</></>
繰り返しますが、古いクラスタに合うように互換性がある<command>initdb</command>のオプションを使用してください。
あらかじめ組み込まれたインストーラの多くは、この手順を自動的に実施します。
新しいクラスタを起動する必要はありません。
    </para>
   </step>

   <step>
<!--
    <title>Install custom shared object files</title>
-->
    <title>独自の共有オブジェクトファイルをインストール</title>

    <para>
<!--
     Install any custom shared object files (or DLLs) used by the old cluster
     into the new cluster, e.g. <filename>pgcrypto.so</filename>,
     whether they are from <filename>contrib</filename>
     or some other source. Do not install the schema definitions, e.g.
     <filename>pgcrypto.sql</>, because these will be upgraded from the old cluster.
-->
例えば、<filename>pgcrypto.so</filename>、<filename>contrib</filename>や何らかのその他のソースからインストールしたものなど、古いクラスタで使用していた独自の共有オブジェクトファイル(またはDLL)をすべて、新しいクラスタにインストールしてください。
例えば<filename>pgcrypto.sql</>などのスキーマ定義はインストールしないでください。
これらは古いクラスタからアップグレードされるためです。
    </para>
   </step>

   <step>
<!--
    <title>Adjust authentication</title>
-->
    <title>認証の調整</title>

    <para>
<!--
     <command>pg_upgrade</> will connect to the old and new servers several
     times, so you might want to set authentication to <literal>peer</>
     in <filename>pg_hba.conf</> or use a <filename>~/.pgpass</> file
     (see <xref linkend="libpq-pgpass">).
-->
<command>pg_upgrade</>は古いサーバと新しいサーバに複数回接続します。
このため、<filename>pg_hba.conf</>内で<literal>trust</>または<literal>peer</>認証に設定、あるいは、<filename>~/.pgpass</>ファイル(<xref linkend="libpq-pgpass">参照)を使用するようにした方が良いかもしれません。
    </para>
   </step>

   <step>
<!--
    <title>Stop both servers</title>
-->
    <title>両サーバの停止</title>

    <para>
<!--
     Make sure both database servers are stopped using, on Unix, e.g.:
-->
両サーバが停止していることを確実にしてください。
例えばUnixでは以下を使用します。

<programlisting>
pg_ctl -D /opt/PostgreSQL/8.4 stop
pg_ctl -D /opt/PostgreSQL/9.0 stop
</programlisting>

<!--
     or on Windows, using the proper service names:
-->
Windowsでは以下

<programlisting>
NET STOP postgresql-8.4
NET STOP postgresql-9.0
</programlisting>

<!--
     or
-->
または以下を適切なサービス名で使用します。

<programlisting>
<!--
NET STOP pgsql-8.3  (<productname>PostgreSQL</> 8.3 and older used a different service name)
-->
NET STOP pgsql-8.3  (<productname>PostgreSQL</> 8.3以前では異なるサービス名が使用されていました。)
</programlisting></para>
   </step>

   <step>
<!--
    <title>Run <application>pg_upgrade</></title>
-->
    <title><application>pg_upgrade</>の実行</title>

    <para>
<!--
     Always run the <application>pg_upgrade</> binary of the new server, not the old one.
     <application>pg_upgrade</> requires the specification of the old and new cluster's
     data and executable (<filename>bin</>) directories. You can also specify
     user and port values, and whether you want the data linked instead of
     copied (the default).
-->
古いサーバのものではなく、常に新しいサーバの<application>pg_upgrade</>バイナリを実行してください。
<application>pg_upgrade</>は古いクラスタおよび新しいクラスタのデータと実行形式ファイルの格納ディレクトリ（<filename>bin</>）の指定を要求します。
また、ユーザやポート番号の指定や、コピー(デフォルト)ではなくデータリンクを使用するかどうかを指定することができます。
    </para>

    <para>
<!--
     If you use link mode, the upgrade will be much faster (no file
     copying) and use less disk space, but you will not be able to access
     your old cluster
     once you start the new cluster after the upgrade.  Link mode also
     requires that the old and new cluster data directories be in the
     same file system.  (Tablespaces and <filename>pg_xlog</> can be on
     different file systems.)  See <literal>pg_upgrade &#045;-help</> for a full
     list of options.
-->
リンクモードを使用する場合、アップグレードは非常に高速になり(ファイルのコピーがありません)、ディスク容量が少なくなりますが、アップグレード後に新しいクラスタを一度でも実行してしまうと、古いクラスタにアクセスすることができなくなります。
リンクモードはまた、古いクラスタと新しいクラスタのデータディレクトリが同じファイルシステムにあることが必要です。
（テーブル空間および<filename>pg_xlog</>は異なるファイルシステムに置くことができます。）
すべてのオプションリストを参照するためには<literal>pg_upgrade --help</>を使用してください。
    </para>

    <para>
<!--
     The <option>&#045;-jobs</> option allows multiple CPU cores to be used
     for copying/linking of files and to dump and reload database schemas
     in parallel;  a good place to start is the maximum of the number of
     CPU cores and tablespaces.  This option can dramatically reduce the
     time to upgrade a multi-database server running on a multiprocessor
     machine.
-->
<option>--jobs</>オプションにより複数のCPUコアを使用して、並行してファイルのコピー・リンク、データベーススキーマのダンプと再ロードを行うことができます。
この値の最大値として検討を始める際には、CPUコア数またはテーブル空間数を勧めます。
このオプションはマルチプロセッサを持つマシンで実行している複数のデータベースサーバをアップグレードする時間を大きく減らします。
    </para>

    <para>
<!--
     For Windows users, you must be logged into an administrative account, and
     then start a shell as the <literal>postgres</> user and set the proper path:
-->
Windowsユーザの場合、管理者アカウントでログオンしなければなりません。
また、<literal>postgres</>ユーザとしてシェルを起動し、適切なパスを設定してください。

<programlisting>
RUNAS /USER:postgres "CMD.EXE"
SET PATH=%PATH%;C:\Program Files\PostgreSQL\9.0\bin;
</programlisting>

<!--
     and then run <application>pg_upgrade</> with quoted directories, e.g.:
-->
そして、以下の例のように、引用符でくくったディレクトリを付けて<application>pg_upgrade</>を実行してください。

<programlisting>
pg_upgrade.exe
        --old-datadir "C:/Program Files/PostgreSQL/8.4/data"
        --new-datadir "C:/Program Files/PostgreSQL/9.0/data"
        --old-bindir "C:/Program Files/PostgreSQL/8.4/bin"
        --new-bindir "C:/Program Files/PostgreSQL/9.0/bin"
</programlisting>

<!--
     Once started, <command>pg_upgrade</> will verify the two clusters are compatible
     and then do the upgrade. You can use <command>pg_upgrade &#045;-check</>
     to perform only the checks, even if the old server is still
     running. <command>pg_upgrade &#045;-check</> will also outline any
     manual adjustments you will need to make after the upgrade.  If you
     are going to be using link mode, you should use the <option>&#045;-link</>
     option with <option>&#045;-check</option> to enable link-mode-specific checks.
     <command>pg_upgrade</> requires write permission in the current directory.
-->
起動後、<command>pg_upgrade</>は2つのクラスタに互換性があるかどうか検証し、その後、アップグレードを行います。
検査のみを行う<command>pg_upgrade --check</>を使用することができます。
この場合は古いサーバは稼動中であっても構いません。
また<command>pg_upgrade --check</>は、アップグレード後に手作業で行わなければならない調整作業があればその概要を示します。
リンクモードを使用する予定であれば、リンクモード固有の検査を有効にするために<option>--check</option>を付けて<option>--link</>を使用すべきです。
<command>pg_upgrade</>は現在のディレクトリに対する書き込み権限を必要とします。
    </para>

    <para>
<!--
     Obviously, no one should be accessing the clusters during the
     upgrade.  <application>pg_upgrade</> defaults to running servers
     on port 50432 to avoid unintended client connections.
     You can use the same port number for both clusters when doing an
     upgrade because the old and new clusters will not be running at the
     same time.  However, when checking an old running server, the old
     and new port numbers must be different.
-->
言うまでもありませんが、アップグレード中はクラスタにアクセスしてはいけません。
意図しないクライアント接続を防ぐために、デフォルトでは<application>pg_upgrade</>は50432ポートでサーバを稼働します。
古いクラスタと新しいクラスタが同時に稼動することはありませんので、両クラスタで同じポート番号を使用することができます。
しかし実行中の古いクラスタを検査する時には、新旧で異なるポート番号でなければなりません。
    </para>

    <para>
<!--
     If an error occurs while restoring the database schema, <command>pg_upgrade</> will
     exit and you will have to revert to the old cluster as outlined in <xref linkend="pgupgrade-step-revert">
     below. To try <command>pg_upgrade</command> again, you will need to modify the old
     cluster so the pg_upgrade schema restore succeeds. If the problem is a
     contrib module, you might need to uninstall the contrib module from
     the old cluster and install it in the new cluster after the upgrade,
     assuming the module is not being used to store user data.
-->
データベーススキーマのリストア中にエラーが発生した場合、<command>pg_upgrade</>は終了しますので、後述の<xref linkend="pgupgrade-step-revert">で示すように古いクラスタに戻さなければなりません。
再び<command>pg_upgrade</>を試すためには、pg_upgradeによるスキーマのリストアが成功するように古いクラスタを変更しなければなりません。
問題がcontribモジュールであれば、そのモジュールがユーザデータを格納するために使用されていないことが前提ですが、古いクラスタからそのcontribモジュールをアンインストールし、アップグレードした後に新しいクラスタにそれをインストールする必要があるかもしれません。
    </para>
   </step>

   <step>
<!--
    <title>Restore <filename>pg_hba.conf</></title>
-->
    <title><filename>pg_hba.conf</>の復旧</title>

    <para>
<!--
     If you modified <filename>pg_hba.conf</>, restore its original settings.
     It might also be necessary to adjust other configuration files in the new
     cluster to match the old cluster, e.g. <filename>postgresql.conf</>.
-->
<filename>pg_hba.conf</>を変更している場合は、元の認証設定に戻してください。
また新しいクラスタにおけるこの他の設定ファイル、例えば<filename>postgresql.conf</>、も古いクラスタに合わせるように調整する必要があります。
    </para>
   </step>

   <step>
<!--
    <title>Post-Upgrade processing</title>
-->
    <title>移行後の処理</title>

    <para>
<!--
     If any post-upgrade processing is required, pg_upgrade will issue
     warnings as it completes. It will also generate script files that must
     be run by the administrator. The script files will connect to each
     database that needs post-upgrade processing. Each script should be
     run using:
-->
アップグレード後の処理が必要な場合、pg_upgradeはその終了時に警告を発します。
また、管理者として実行しなければならないスクリプトファイルを生成します。
このスクリプトファイルは、アップグレード後の処理を必要とするデータベースそれぞれに接続します。
各スクリプトは以下を使用して実行しなければなりません。

<programlisting>
psql --username postgres --file script.sql postgres
</programlisting>

<!--
     The scripts can be run in any order and can be deleted once they have
     been run.
-->
スクリプトは任意の順番で実行することができ、また、実行が終わったら削除することができます。
    </para>

    <caution>
    <para>
<!--
     In general it is unsafe to access tables referenced in rebuild scripts
     until the rebuild scripts have run to completion; doing so could yield
     incorrect results or poor performance. Tables not referenced in rebuild
     scripts can be accessed immediately.
-->
一般的には、再構築用のスクリプトの実行が完了するより前に、再構築用のスクリプトで参照されるテーブルにアクセスすることは安全ではありません。
これを行うと間違った結果が生じたり、性能が劣化することがあり得ます。
再構築用のスクリプトで参照されないテーブルにはすぐにアクセスすることができます。
    </para>
    </caution>
   </step>

   <step>
<!--
    <title>Statistics</title>
-->
    <title>統計情報</title>

    <para>
<!--
     Because optimizer statistics are not transferred by <command>pg_upgrade</>, you will
     be instructed to run a command to regenerate that information at the end
     of the upgrade.  You might need to set connection parameters to
     match your new cluster.
-->
オプティマイザの統計情報は<command>pg_upgrade</>により転送されませんので、アップグレード後に統計情報を再生成するコマンドを実行するように指示されます。
新しいクラスタに合わせるために接続パラメータを設定する必要があるかもしれません。
    </para>
   </step>

   <step>
<!--
    <title>Delete old cluster</title>
-->
    <title>古いクラスタの削除</title>

    <para>
<!--
     Once you are satisfied with the upgrade, you can delete the old
     cluster's data directories by running the script mentioned when
     <command>pg_upgrade</command> completes. (Automatic deletion is not
     possible if you have user-defined tablespaces inside the old data
     directory.)  You can also delete the old installation directories
     (e.g. <filename>bin</>, <filename>share</>).
-->
アップグレード処理が満足いくものであれば、<command>pg_upgrade</command>の終了時に示されたスクリプトを使用して、古いクラスタのデータディレクトリを削除することができます。
（古いデータディレクトリ内にユーザ定義のテーブル空間がある場合には、自動削除は不可能です。）
（<filename>bin</>、<filename>share</>など）古いインストレーションディレクトリも削除できます。
    </para>
   </step>

   <step id="pgupgrade-step-revert" performance="optional">
<!--
    <title>Reverting to old cluster</title>
-->
    <title>古いクラスタへの戻し</title>

    <para>
<!--
     If, after running <command>pg_upgrade</command>, you wish to revert to the old cluster,
     there are several options:
-->
<command>pg_upgrade</command>を実行した後に古いクラスタに戻したい場合、いくつかの選択肢があります。

     <itemizedlist>
      <listitem>
       <para>
<!--
        If you ran <command>pg_upgrade</command>
        with <option>&#045;-check</>, no modifications were made to the old
        cluster and you can re-use it anytime.
-->
<option>--check</>を付けた<command>pg_upgrade</command>を実行した場合、古いクラスタには変更はまったくなされていませんので、いつでも再使用することができます。
       </para>
      </listitem>

      <listitem>
       <para>
<!--
        If you ran <command>pg_upgrade</command>
        with <option>&#045;-link</>, the data files are shared between the
        old and new cluster. If you started the new cluster, the new
        server has written to those shared files and it is unsafe to
        use the old cluster.
-->
<option>--link</>を付けた<command>pg_upgrade</command>を実行した場合、データファイルは古いクラスタと新しいクラスタとで共有されます。
もし新しいクラスタを起動していた場合、新しいサーバはこの共有されたファイルに書き出しを行いますので、古いクラスタで使用することは危険です。
       </para>
      </listitem>

      <listitem>
       <para>
<!--
        If you ran <command>pg_upgrade</command> <emphasis>without</>
        <option>&#045;-link</> or did not start the new server, the
        old cluster was not modified except that, if linking
        started, a <literal>.old</> suffix was appended to
        <filename>$PGDATA/global/pg_control</>.  To reuse the old
        cluster, possibly remove the <filename>.old</> suffix from
        <filename>$PGDATA/global/pg_control</>; you can then restart the
        old cluster.
-->
<option>--link</>を<emphasis>付けず</>に<command>pg_upgrade</command>を実行した場合、あるいは、新しいサーバを起動していない場合、リンク処理が始まると、<filename>$PGDATA/global/pg_control</>に<literal>.old</>接尾辞が追加される点を除き、古いクラスタは変更されません。
古いクラスタを再度使用するためには、<filename>$PGDATA/global/pg_control</>から<filename>.old</>接尾辞を取り除きます。
その後、古いクラスタを再起動することができます。
       </para>
      </listitem>
     </itemizedlist>
    </para>
   </step>
  </procedure>

 </refsect1>

 <refsect1>
<!--
  <title>Notes</title>
-->
  <title>注釈</title>

  <para>
<!--
   <application>pg_upgrade</> does not support upgrading of databases
   containing these <type>reg*</> OID-referencing system data types:
   <type>regproc</>, <type>regprocedure</>, <type>regoper</>,
   <type>regoperator</>, <type>regconfig</>, and
   <type>regdictionary</>.  (<type>regtype</> can be upgraded.)
-->
<application>pg_upgrade</>は次のOIDを参照する<type>reg*</>システムデータ型を含むデータベースのアップグレードをサポートしません。
<type>regproc</>、<type>regprocedure</>、<type>regoper</>、<type>regoperator</>、<type>regconfig</>、<type>regdictionary</>。（<type>regtype</>はアップグレード可能です。）
  </para>

  <para>
<!--
   All failure, rebuild, and reindex cases will be reported by
   <application>pg_upgrade</> if they affect your installation;
   post-upgrade scripts to rebuild tables and indexes will be
   generated automatically.  If you are trying to automate the upgrade
   of many clusters, you should find that clusters with identical database
   schemas require the same post-upgrade steps for all cluster upgrades;
   this is because the post-upgrade steps are based on the database
   schemas, and not user data.
-->
インストレーションに影響する場合、失敗、再構築、インデックス再作成はすべて<application>pg_upgrade</>により報告されます。
テーブルおよびインデックスを再構築するアップグレード後処理スクリプトは自動的に生成されます。
多くのクラスタのアップグレードを自動化することを考えているのであれば、
すべてのクラスタのアップグレードにおいて同一のデータベーススキーマを持つクラスタが同じアップグレード後処理を必要とすることが分かるはずです。
これはアップグレード後処理がデータ自体ではなくデータベーススキーマに基づいているためです。
  </para>

  <para>
<!--
   For deployment testing, create a schema-only copy of the old cluster,
   insert dummy data, and upgrade that.
-->
展開試験を行うのであれば、古いクラスタのスキーマのみをコピーしたものを作成し、ダミーデータを挿入してから、アップグレードを行ってください。
  </para>

  <para>
<!--
   If you are upgrading a pre-<productname>PostgreSQL</> 9.2 cluster
   that uses a configuration-file-only directory, you must pass the
   real data directory location to <application>pg_upgrade</>, and
   pass the configuration directory location to the server, e.g.
   <literal>-d /real-data-directory -o '-D /configuration-directory'</>.
-->
設定ファイルしか持たないディレクトリを使用する<productname>PostgreSQL</> 9.2よりも前のクラスタをアップグレードする場合、例えば<literal>-d /real-data-directory -o '-D /configuration-directory'</>のように、実際のデータディレクトリの場所を<application>pg_upgrade</>に通知しなければならず、さらに設定用ディレクトリの場所をサーバに通知しなければなりません。
  </para>

  <para>
<!--
   If using a pre-9.1 old server that is using a non-default Unix-domain
   socket directory or a default that differs from the default of the
   new cluster, set <envar>PGHOST</> to point to the old server's socket
   location.  (This is not relevant on Windows.)
-->
デフォルト以外のUnixドメインソケットディレクトリを使用する、または新しいクラスタのデフォルトとは異なるデフォルトを使用する9.1より前の古いサーバを使用している場合、古いサーバのソケット位置を指し示すように<envar>PGHOST</>を設定してください。（これはWindowsでは関係ありません。）
  </para>

  <para>
<!--
   A Log-Shipping Standby Server (<xref linkend="warm-standby">) cannot
   be upgraded because the server must allow writes.  The simplest way
   is to upgrade the primary and use <command>rsync</> to rebuild the
   standbys.  You can run <command>rsync</> while the primary is down,
   or as part of a base backup (<xref linkend="backup-base-backup">)
   which overwrites the old standby cluster.
-->
サーバは書き込みを許可しなければなりませんので、ログシッピングスタンバイサーバ（<xref linkend="warm-standby">）をアップグレードすることができません。
最も簡単な方法は、プライマリをアップグレードし、スタンバイを再構築するために<command>rsync</>を使用することです。
プライマリを停止している間、またはベースバックアップ(<xref linkend="backup-base-backup">)の一部として<command>rsync</>を実行して古いスタンバイクラスタを上書きすることができます。
  </para>

  <para>
<!--
   If you want to use link mode and you do not want your old cluster
   to be modified when the new cluster is started, make a copy of the
   old cluster and upgrade that in link mode. To make a valid copy
   of the old cluster, use <command>rsync</> to create a dirty
   copy of the old cluster while the server is running, then shut down
   the old server and run <command>rsync</> again to update the copy with any
   changes to make it consistent.  You might want to exclude some
   files, e.g. <filename>postmaster.pid</>, as documented in <xref
   linkend="backup-lowlevel-base-backup">.  If your file system supports
   file system snapshots or copy-on-write file copies, you can use that
   to make a backup of the old cluster and tablespaces, though the snapshot
   and copies must be created simultaneously or while the database server
   is down.
-->
リンクモードを使用したいが、新しいクラスタを起動した時に古いクラスタを変更させたくない場合は、古いクラスタのコピーを取得してからリンクモードでアップグレードを行ってください。
有効な古いクラスタのコピーを取得するためには、サーバ稼動中に<command>rsync</>を使用して古いクラスタの変動があるかもしれないコピーを作成し、古いサーバを停止させた後に、<command>rsync</>を再度実行して一貫性を保つために何らかの変更をコピーに反映させます。
例えば<xref linkend="backup-lowlevel-base-backup">で説明した<filename>postmaster.pid</>など、一部のファイルを除外したいと考えるかもしれません。
スナップショットやコピーは同時、もしくはデータベースサーバが停止しているときに作らなければなりませんが、ファイルシステムがファイルシステムのスナップショットやコピーオンライトファイルコピーをサポートしているのなら、それを古いクラスタとテーブル空間のバックアップをするのに使うことができます。
  </para>

 <refsect2>
<!--
  <title>Limitations in Upgrading from PostgreSQL 8.3</title>
-->
  <title>PostgreSQL 8.3からの移行における制限</title>

  <para>
<!--
   Upgrading <emphasis>from</emphasis> PostgreSQL 8.3 has additional restrictions not present
   when upgrading from later PostgreSQL releases.  For example,
   pg_upgrade will not work for upgrading from 8.3 if a user column
   is defined as:
-->
PostgreSQL 8.3<emphasis>から</emphasis>アップグレードを行う場合には、それ以降のリリースのPostgreSQLからのアップグレードの場合にはない追加の制限があります。
例えば、ユーザ列が以下のように定義されていた場合、pg_upgradeは正常に8.3から移行できません。
   <itemizedlist>
    <listitem>
     <para>
<!--
      a <type>tsquery</> data type
-->
<type>tsquery</>データ型
     </para>
    </listitem>
    <listitem>
     <para>
<!--
      data type <type>name</> and is not the first column
-->
<type>name</>データ型が先頭列でない場合。
     </para>
    </listitem>
   </itemizedlist>
  </para>

  <para>
<!--
   You must drop any such columns and upgrade them manually.
-->
こうした列はすべて削除し、手作業でそれをアップグレードしなければなりません。
  </para>

  <para>
<!--
   pg_upgrade will not work if the <filename>ltree</>
   contrib module is installed in a database.
-->
<filename>ltree</> contribモジュールがデータベース内にインストールされている場合、pg_upgradeは動作しません。
  </para>

  <para>
<!--
   pg_upgrade will require a table rebuild if:
-->
pg_upgradeは以下の場合、テーブルの再作成を要求します。
   <itemizedlist>
    <listitem>
     <para>
<!--
      a user column is of data type <type>tsvector</type>
-->
ユーザ列が<type>tsvector</type>データ型の場合。
     </para>
    </listitem>
   </itemizedlist>
  </para>

  <para>
<!--
   pg_upgrade will require a reindex if:
-->
pg_upgradeは以下の場合インデックスの再作成を要求します。
   <itemizedlist>
    <listitem>
     <para>
<!--
      an index is of type hash or GIN
-->
ハッシュまたはGINインデックス。
     </para>
    </listitem>
    <listitem>
     <para>
<!--
      an index uses <function>bpchar_pattern_ops</>
-->
<function>bpchar_pattern_ops</>を使用するインデックス。
     </para>
    </listitem>
   </itemizedlist>
  </para>

  <para>
<!--
   Also, the default datetime storage format changed to integer after
   <productname>PostgreSQL</> 8.3. pg_upgrade will check that the datetime storage format
   used by the old and new clusters match. Make sure your new cluster is
   built with the configure flag <option>&#045;-disable-integer-datetimes</>.
-->
また、<productname>PostgreSQL</> 8.3より後では、日付時刻データのデフォルトの格納形式は整数型に変わりました。
pg_upgradeは、古いクラスタと新しいクラスタで使用される日付時刻データの格納形式が合致するかどうかを検査します。
確実に<option>--disable-integer-datetimes</>を付けてconfigureを実行して新しいクラスタを構築してください。
  </para>

  <para>
<!--
   For Windows users, note that due to different integer datetimes settings
   used by the graphical installer and the MSI installer, it is only
   possible to upgrade from version 8.3 of the installer distribution to
   version 8.4 or later of the installer distribution. It is not
   possible to upgrade from the MSI installer to the new graphical installer.
-->
Windowsユーザの場合、グラフィカルインストーラとMSIインストーラで使用される整数日付時刻設定が異なるため、バージョン8.3のインストーラによる配布物からバージョン8.4以降のインストーラによる配布物へのアップグレードのみが可能であることに注意してください。
MSIインストーラから新しいグラフィカルインストーラへのアップグレードを行うことはできません。
  </para>

 </refsect2>

 </refsect1>

 <refsect1>
<!--
  <title>See Also</title>
-->
  <title>関連項目</title>

  <simplelist type="inline">
   <member><xref linkend="app-initdb"></member>
   <member><xref linkend="app-pg-ctl"></member>
   <member><xref linkend="app-pgdump"></member>
   <member><xref linkend="app-postgres"></member>
  </simplelist>
 </refsect1>
</refentry>
