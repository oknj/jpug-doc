<!-- doc/src/sgml/installation.sgml -->
<!--

Use </link> not just </> so INSTALL.html can be created without links
to the main documentation.  Don't use <xref>; or if you must, wrap it
in a standalone-ignore clause.

-->

<chapter id="installation">
<!--
 <title><![%standalone-include[<productname>PostgreSQL</>]]>
  Installation from Source Code</title>
-->
 <title><![%standalone-include[<productname>PostgreSQL</>]]>
  ソースコードからインストール</title>

 <indexterm zone="installation">
<!--
  <primary>installation</primary>
-->
  <primary>インストール</primary>
 </indexterm>

 <para>
<!--
  This <![%standalone-include;[document]]>
  <![%standalone-ignore;[chapter]]> describes the installation of
  <productname>PostgreSQL</productname> using the source code
  distribution.  (If you are installing a pre-packaged distribution,
  such as an RPM or Debian package, ignore this
  <![%standalone-include;[document]]>
  <![%standalone-ignore;[chapter]]>
  and read the packager's instructions instead.)
-->
この<![%standalone-include;[ドキュメント]]><![%standalone-ignore;[章]]>では、<productname>PostgreSQL</productname>のソースコード配布物を使用したインストール方法について説明します
（RPMやDebianパッケージなどパッケージ済みの配布物をインストールしている場合は、この<![%standalone-include;[ドキュメント]]><![%standalone-ignore;[章]]>を無視し、代わりにパッケージの手順を読んでください）。
 </para>

 <sect1 id="install-short">
<!--
  <title>Short Version</title>
-->
  <title>簡易版</title>

  <para>
<synopsis>
./configure
make
su
make install
adduser postgres
mkdir /usr/local/pgsql/data
chown postgres /usr/local/pgsql/data
su - postgres
/usr/local/pgsql/bin/initdb -D /usr/local/pgsql/data
/usr/local/pgsql/bin/postgres -D /usr/local/pgsql/data &gt;logfile 2&gt;&amp;1 &amp;
/usr/local/pgsql/bin/createdb test
/usr/local/pgsql/bin/psql test
</synopsis>
<!--
   The long version is the rest of this
   <![%standalone-include;[document.]]>
   <![%standalone-ignore;[chapter.]]>
-->
<![%standalone-include;[本書]]><![%standalone-ignore;[本章]]>の残りで詳細を説明します。
  </para>
 </sect1>


 <sect1 id="install-requirements">
<!--
  <title>Requirements</title>
-->
  <title>必要条件</title>

  <para>
<!--
   In general, a modern Unix-compatible platform should be able to run
   <productname>PostgreSQL</>.
   The platforms that had received specific testing at the
   time of release are listed in <xref linkend="supported-platforms">
   below. In the <filename>doc</> subdirectory of the distribution
   there are several platform-specific <acronym>FAQ</> documents you
   might wish to consult if you are having trouble.
-->
通常、最近のUnix互換プラットフォームならば<productname>PostgreSQL</>を動作させることができるはずです。
リリース時に明示的なテストを受けたプラットフォームの一覧を<xref linkend="supported-platforms">に示します。
配布物の<filename>doc</>サブディレクトリには、プラットフォーム固有の<acronym>FAQ</>文書がいくつかありますので、問題が発生した場合は参照してください。
  </para>

  <para>
<!--
   The following software packages are required for building
   <productname>PostgreSQL</>:
-->
<productname>PostgreSQL</>を構築するには、以下のソフトウェアパッケージが必要です。

   <itemizedlist>
    <listitem>
     <para>
      <indexterm>
       <primary>make</primary>
      </indexterm>

<!--
      <acronym>GNU</> <application>make</> version 3.80 or newer is required; other
      <application>make</> programs or older <acronym>GNU</> <application>make</> versions will <emphasis>not</> work.
      (<acronym>GNU</> <application>make</> is sometimes installed under
      the name <filename>gmake</filename>.)  To test for <acronym>GNU</acronym>
      <application>make</application> enter:
-->
<acronym>GNU</> <application>make</>のバージョン3.80以上が必要です。
他の<application>make</>や古い<acronym>GNU</> <application>make</>では<emphasis>動作しません</>。
(<acronym>GNU</> <application>make</>はときどき<filename>gmake</filename>という名前でインストールされます。)
<acronym>GNU</acronym> <application>make</>の試験を行うためには以下を実行してください。
<screen>
<userinput>make --version</userinput>
</screen>
<!--
      It is recommended to use version 3.79.1 or later.
-->
バージョン3.79.1以降を使用することを推奨します。
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      You need an <acronym>ISO</>/<acronym>ANSI</> C compiler (at least
      C89-compliant). Recent
      versions of <productname>GCC</> are recommended, but
      <productname>PostgreSQL</> is known to build using a wide variety
      of compilers from different vendors.
-->
<acronym>ISO</>/<acronym>ANSI</> Cコンパイラ（最低限C89-準拠）が必要です。
<productname>GCC</> の最近のバージョンをお勧めしますが、<productname>PostgreSQL</>は異なるベンダの、様々なコンパイラを使用して構築できることで知られています。
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      <application>tar</> is required to unpack the source
      distribution, in addition to either
      <application>gzip</> or <application>bzip2</>.
-->
配布物を展開するために、<application>tar</>および<application>gzip</>か<application>bzip2</>のどちらかが必要です。
     </para>
    </listitem>

    <listitem>
     <para>
      <indexterm>
       <primary>readline</primary>
      </indexterm>
      <indexterm>
       <primary>libedit</primary>
      </indexterm>

<!--
      The <acronym>GNU</> <productname>Readline</> library is used by
      default.  It allows <application>psql</application> (the
      PostgreSQL command line SQL interpreter) to remember each
      command you type, and allows you to use arrow keys to recall and
      edit previous commands.  This is very helpful and is strongly
      recommended.  If you don't want to use it then you must specify
      the <option>&#045;&#045;without-readline</option> option to
      <filename>configure</>. As an alternative, you can often use the
      BSD-licensed <filename>libedit</filename> library, originally
      developed on <productname>NetBSD</productname>. The
      <filename>libedit</filename> library is
      GNU <productname>Readline</productname>-compatible and is used if
      <filename>libreadline</filename> is not found, or if
      <option>&#045;&#045;with-libedit-preferred</option> is used as an
      option to <filename>configure</>. If you are using a package-based
      Linux distribution, be aware that you need both the
      <literal>readline</> and <literal>readline-devel</> packages, if
      those are separate in your distribution.
-->
<acronym>GNU</> <productname>Readline</>ライブラリは、デフォルトで使用されます。
これにより<application>psql</application>（PostgreSQLコマンドラインSQLインタプリタ）は入力したコマンドの記憶、さらに、カーソルキーを使用した過去のコマンドの再実行や編集ができるようになります。
これは非常に役に立ちますので、強く推奨します。
使用したくない場合は、<filename>configure</>に<option>--without-readline</option>オプションを指定する必要があります。
その代わりとして、BSDライセンスの<filename>libedit</filename>ライブラリを使用することもできます。
このライブラリは元々<productname>NetBSD</productname>で開発されていました。
<filename>libedit</filename>ライブラリはGNUの<productname>Readline</productname>と互換性があり、<filename>libreadline</filename>を認識できなかった場合や<filename>configure</>のオプションに<option>--with-libedit-preferred</option>が使用された場合に使用されます。
パッケージベースのLinuxディストリビューションを使用し、そのディストリビューションの中で<literal>readline</>と<literal>readline-devel</>パッケージが別個に存在していた場合、両方とも必要ですので注意してください。
     </para>
    </listitem>

    <listitem>
     <para>
      <indexterm>
       <primary>zlib</primary>
      </indexterm>

<!--
      The <productname>zlib</productname> compression library is
      used by default. If you don't want to use it then you must
      specify the <option>&#045;&#045;without-zlib</option> option to
      <filename>configure</filename>. Using this option disables
      support for compressed archives in <application>pg_dump</> and
      <application>pg_restore</>.
-->
<productname>zlib</productname>圧縮ライブラリはデフォルトで使用されます。
これを使用したくなければ、<filename>configure</filename>に対し<option>--without-zlib</option>を指定しなければなりません。
このオプションを使用すると、<application>pg_dump</>および<application>pg_restore</>内の圧縮アーカイブサポートが無効になります。
     </para>
    </listitem>
   </itemizedlist>
  </para>

  <para>
<!--
   The following packages are optional.  They are not required in the
   default configuration, but they are needed when certain build
   options are enabled, as explained below:
-->
以下のパッケージはオプションです。
これらはデフォルトの設定では必要ありませんが、下記のように特定の構築オプションを有効とする場合に必要となります。

   <itemizedlist>
    <listitem>
     <para>
<!--
      To build the server programming language
      <application>PL/Perl</application> you need a full
      <productname>Perl</productname> installation, including the
      <filename>libperl</filename> library and the header files.
      Since <application>PL/Perl</application> will be a shared
      library, the <indexterm><primary>libperl</primary></indexterm>
      <filename>libperl</filename> library must be a shared library
      also on most platforms.  This appears to be the default in
      recent <productname>Perl</productname> versions, but it was not
      in earlier versions, and in any case it is the choice of whomever
      installed Perl at your site.
      If you intend to make more than incidental use of
      <application>PL/Perl</application>, you should ensure that the
      <productname>Perl</productname> installation was built with the
      <literal>usemultiplicity</> option enabled (<literal>perl -V</>
      will show whether this is the case).
-->
サーバプログラム言語である<application>PL/Perl</application>を構築するには、<filename>libperl</filename>ライブラリとヘッダファイルを含む完全な<productname>Perl</productname>のインストレーションが必要です。 
<application>PL/Perl</application>は共有ライブラリですので、ほとんどのプラットフォームにおいて<indexterm><primary>libperl</primary></indexterm><filename>libperl</filename>ライブラリも共有ライブラリでなければなりません。  
これは最近のバージョンの<productname>Perl</productname>ではデフォルトのようですが、以前のバージョンではデフォルトではありませんでした。
とにかく、これはPerlをサイトにインストールした人により決定されます。
もし、<application>PL/Perl</application>を意図的に使用するつもりであるのなら、<productname>Perl</productname>のインストレーションが<literal>usemultiplicity</>オプションを有効にして実施されているかを確認すべきです。(<literal>perl -V</>により有効かどうかを確認できます。)
     </para>

     <para>
<!--
      If you don't have the shared library but you need one, a message
      like this will appear during the <productname>PostgreSQL</>
      build to point out this fact:
-->
必要な共有ライブラリが存在しない場合、<productname>PostgreSQL</>構築中に表示される次のようなメッセージにより、そのことが指摘されます。
<screen>
*** Cannot build PL/Perl because libperl is not a shared library.
*** You might have to rebuild your Perl installation.  Refer to
*** the documentation for details.
</screen>
<!--
      (If you don't follow the on-screen output you will merely notice
      that the <application>PL/Perl</application> library object,
      <filename>plperl.so</filename> or similar, will not be
      installed.)  If you see this, you will have to rebuild and
      install <productname>Perl</productname> manually to be able to
      build <application>PL/Perl</application>.  During the
      configuration process for <productname>Perl</productname>,
      request a shared library.
-->
（画面上の指示に従わない場合は、単に<application>PL/Perl</application>ライブラリオブジェクト<filename>plperl.so</filename>または類似のものがインストールされないだけです。）
このメッセージが表示された場合、<application>PL/Perl</application>を構築できるようにするために、<productname>Perl</productname>を手動で再構築し、インストールする必要があります。
<productname>Perl</productname> の構築処理で、共有ライブラリとするように指定してください。
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      To build the <application>PL/Python</> server programming
      language, you need a <productname>Python</productname>
      installation with the header files and
      the <application>distutils</application> module.  The minimum
      required version is <productname>Python</productname> 2.3.
      (To work with function arguments of type <type>numeric</>, a 2.3.x
      installation must include the separately-available <filename>cdecimal</>
      module; note the <application>PL/Python</> regression tests
      will not pass if that is missing.)
      <productname>Python 3</productname> is supported if it's
      version 3.1 or later; but see
      <![%standalone-include[the <application>PL/Python</> documentation]]>
      <![%standalone-ignore[<xref linkend="plpython-python23">]]>
      when using Python 3.
-->
<application>PL/Python</>サーバプログラム言語を構築するには、ヘッダファイルと<application>distutils</application>モジュールを含む<productname>Python</productname>のインストレーションが必要です。
<productname>Python</productname>バージョン2.3が最低でも必要です。
(<type>numeric</>型の関数引数を扱うためには、2.3.xのインストレーションが別途入手できる<filename>cdecimal</>モジュールを含んでいないといけません。それがなければ<application>PL/Python</>リグレッションテストに通らないことに注意してください。)
バージョン3.1以降であれば<productname>Python 3</productname>もサポートされます。しかしPython 3を使用する場合は<![%standalone-include[the <application>PL/Python</>文書]]><![%standalone-ignore[<xref linkend="plpython-python23">]]>を参照してください。

     </para>

     <para>
<!--
      Since <application>PL/Python</application> will be a shared
      library, the <indexterm><primary>libpython</primary></indexterm>
      <filename>libpython</filename> library must be a shared library
      also on most platforms.  This is not the case in a default
      <productname>Python</productname> installation.  If after
      building and installing <productname>PostgreSQL</> you have a file called
      <filename>plpython.so</filename> (possibly a different
      extension), then everything went well.  Otherwise you should
      have seen a notice like this flying by:
-->
<application>PL/Python</>は共有ライブラリになりますので、ほとんどのプラットフォームでは、<filename>libpython</filename>もまた共有ライブラリである必要があります。
これは、<productname>Python</productname>のインストレーションではデフォルトではありません。
<productname>PostgreSQL</>を構築し、インストールした後に、（他の拡張子かもしれませんが）<filename>plpython.so</filename>という名前のファイルがあれば、全てが成功しています。
さもなくば、以下のような警告が表示されたはずです。
<screen>
*** Cannot build PL/Python because libpython is not a shared library.
*** You might have to rebuild your Python installation.  Refer to
*** the documentation for details.
</screen>
<!--
      That means you have to rebuild (part of) your
      <productname>Python</productname> installation to create this
      shared library.
-->
これは、この共有ライブラリを作成するためには<productname>Python</productname>インストレーション（の一部）を再構築する必要があることを意味しています。
     </para>

     <para>
<!--
      If you have problems, run <productname>Python</> 2.3 or later's
      configure using the <literal>&#045;&#045;enable-shared</> flag.  On some
      operating systems you don't have to build a shared library, but
      you will have to convince the <productname>PostgreSQL</> build
      system of this.  Consult the <filename>Makefile</filename> in
      the <filename>src/pl/plpython</filename> directory for details.
-->
問題があった場合は、<productname>Python</> 2.3以降のconfigureを<literal>--enable-shared</>を付けて実行してください。
オペレーティングシステムの中には、共有ライブラリの構築が必要ないものもあります。
しかし、その場合は <productname>PostgreSQL</>構築システムにそのことを確認・指定する必要があります。
詳しくは<filename>src/pl/plpython</filename>ディレクトリの<filename>Makefile</filename>を参照してください。
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      To build the <application>PL/Tcl</application>
      procedural language, you of course need a <productname>Tcl</>
      installation.  If you are using a pre-8.4 release of
      <productname>Tcl</>, ensure that it was built without multithreading
      support.
-->
<application>PL/Tcl</application>手続き言語の構築には、もちろん<productname>Tcl</>のインストレーションが必要です。
8.4より前のリリースの<productname>Tcl</>を使用している場合は、マルチスレッドのサポートなしで構築していることを確認してください。
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      To enable Native Language Support (<acronym>NLS</acronym>), that
      is, the ability to display a program's messages in a language
      other than English, you need an implementation of the
      <application>Gettext</> <acronym>API</acronym>.  Some operating
      systems have this built-in (e.g., <systemitem
      class="osname">Linux</>, <systemitem class="osname">NetBSD</>,
      <systemitem class="osname">Solaris</>), for other systems you
      can download an add-on package from <ulink
      url="http://www.gnu.org/software/gettext/"></ulink>.
      If you are using the <application>Gettext</> implementation in
      the <acronym>GNU</acronym> C library then you will additionally
      need the <productname>GNU Gettext</productname> package for some
      utility programs.  For any of the other implementations you will
      not need it.
-->
各国語サポート（<acronym>NLS</acronym>）、つまり、英語以外の言語によるプログラムメッセージの表示機能を有効にするには、<application>Gettext</> <acronym>API</acronym>の実装が必要です。
オペレーティングシステムの中には（例えば、<systemitem class="osname">Linux</>、<systemitem class="osname">NetBSD</>、<systemitem class="osname">Solaris</>など）、組み込み済みのものがあります。
他のシステムでは、追加パッケージを<ulink url="http://www.gnu.org/software/gettext/"></ulink>からダウンロードすることができます。 
<acronym>GNU</acronym> Cライブラリの<application>gettext</>の実装を使用する場合、さらにいくつかのユーティリティプログラムのために<productname>GNU Gettext</productname>パッケージが必要となります。
他の実装の場合には必要ありません。
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      You need <application>Kerberos</>, <productname>OpenSSL</>,
      <productname>OpenLDAP</>, and/or
      <application>PAM</>, if you want to support authentication or
      encryption using those services.
-->
<application>Kerberos</>、<productname>OpenSSL</>、<productname>OpenLDAP</>、<application>PAM</>が、そのサービスを使用した認証や暗号化をサポートする場合には必要となります。
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      To build the <productname>PostgreSQL</productname> documentation,
      there is a separate set of requirements; see
      <![%standalone-ignore;[<xref linkend="docguide-toolsets">.]]>
      <![%standalone-include;[the main documentation's appendix on
      documentation.]]>
-->
<productname>PostgreSQL</productname>の文書を構築するためには必要なセットは別途記載します。
<![%standalone-ignore;[<xref linkend="docguide-toolsets">.]]><![%standalone-include;[文書のドキュメント化に関する別冊]]>を参照してください。
     </para>
    </listitem>
   </itemizedlist>
  </para>

  <para>
<!--
   If you are building from a <productname>Git</productname> tree instead of
   using a released source package, or if you want to do server development,
   you also need the following packages:
-->
リリースされたソースパッケージではなく<productname>Git</productname>ツリーからの構築の場合、またはサーバ開発を行いたい場合には、以下のパッケージも必要となります。

   <itemizedlist>
    <listitem>
     <para>
      <indexterm>
       <primary>flex</primary>
      </indexterm>
      <indexterm>
       <primary>lex</primary>
      </indexterm>
      <indexterm>
       <primary>bison</primary>
      </indexterm>
      <indexterm>
       <primary>yacc</primary>
      </indexterm>

<!--
      GNU <application>Flex</> and <application>Bison</>
      are needed to build from a Git checkout, or if you changed the actual
      scanner and parser definition files. If you need them, be sure
      to get <application>Flex</> 2.5.31 or later and
      <application>Bison</> 1.875 or later. Other <application>lex</>
      and <application>yacc</> programs cannot be used.
-->
GNUの<application>Flex</>および<application>Bison</>は、Gitチェックアウトから構築する場合や、実際のスキャナとパーサの定義ファイルを変更した場合に必要となります。
それらが必要な場合は、<application>Flex</> 2.5.31以降と<application>Bison</> 1.875以降を使うようにしてください。
他の<application>lex</>と<application>yacc</>プログラムは使用できません。
     </para>
    </listitem>
    <listitem>
     <para>
      <indexterm>
       <primary>perl</primary>
      </indexterm>

<!--
      <application>Perl</> 5.8 or later is needed to build from a Git checkout,
      or if you changed the input files for any of the build steps that
      use Perl scripts.  If building on Windows you will need
      <application>Perl</> in any case.  <application>Perl</application> is
      also required to run some test suites.
-->
Gitからチェックアウトしたものから構築する場合や、構築時にPerlスクリプトを使用して作成されるファイルの入力となるファイルを変更する場合には<application>Perl</>5.8以降が必要です。
Windows上で構築する場合、いずれにしても<application>Perl</>は必要です。
<application>Perl</application>はテストスイートのいくつかを実行するのにも必要です。
     </para>
    </listitem>
   </itemizedlist>
  </para>

  <para>
<!--
   If you need to get a <acronym>GNU</acronym> package, you can find
   it at your local <acronym>GNU</acronym> mirror site (see <ulink
   url="http://www.gnu.org/order/ftp.html"></>
   for a list) or at <ulink
   url="ftp://ftp.gnu.org/gnu/"></ulink>.
-->
<acronym>GNU</acronym>パッケージの入手が必要な場合、近くの<acronym>GNU</acronym>ミラーサイトから探してください（ミラーサイトの一覧は<ulink url="http://www.gnu.org/order/ftp.html"></>にあります）。
または、<ulink url="ftp://ftp.gnu.org/gnu/"></ulink>から探してください。
  </para>

  <para>
<!--
   Also check that you have sufficient disk space. You will need about
   100 MB for the source tree during compilation and about 20 MB for
   the installation directory. An empty database cluster takes about
   35 MB; databases take about five times the amount of space that a
   flat text file with the same data would take. If you are going to
   run the regression tests you will temporarily need up to an extra
   150 MB. Use the <command>df</command> command to check free disk
   space.
-->
また、十分なディスク領域があることも確認してください。
コンパイル中、ソースツリーのために100メガバイト、インストールディレクトリに20メガバイトほど必要となります。
空のデータベースクラスタだけでも約35メガバイト必要です。データベースは、同じデータのフラットテキストファイルと比べて5倍ほどの領域が必要になります。
リグレッションテストを実行する場合は、一時的に最大で150メガバイトの領域がさらに必要になります。
ディスクの空き容量を確認するためには<command>df</command>コマンドを使います。
  </para>
 </sect1>

<![%standalone-ignore;[
 <sect1 id="install-getsource">
<!--
  <title>Getting The Source</title>
-->
  <title>ソースの入手</title>

  <para>
<!--
   The <productname>PostgreSQL</> &version; sources can be obtained from the
   download section of our
   website: <ulink url="http://www.postgresql.org/download/"></ulink>.  You
   should get a file named <filename>postgresql-&version;.tar.gz</filename>
   or <filename>postgresql-&version;.tar.bz2</filename>. After
   you have obtained the file, unpack it:
-->
<productname>PostgreSQL</> &version;のソースは、Webサイト<ulink url="http://www.postgresql.org/download/"></ulink>のダウンロードページから入手することができます。
<filename>postgresql-&version;.tar.gz</filename>または<filename>postgresql-&version;.tar.bz2</filename>という名前のファイルを入手してください。
ファイルを入手したら、展開します。
<screen>
<userinput>gunzip postgresql-&version;.tar.gz</userinput>
<userinput>tar xf postgresql-&version;.tar</userinput>
</screen>
<!--
   (Use <command>bunzip2</command> instead of <command>gunzip</command> if you
   have the <filename>.bz2</filename> file.)
   This will create a directory
   <filename>postgresql-&version;</filename> under the current directory
   with the <productname>PostgreSQL</> sources.
   Change into that directory for the rest
   of the installation procedure.
-->
（<filename>.bz2</filename>ファイルをダウンロードした場合は<command>gunzip</command>ではなく<command>bunzip2</command>を使用してください。）
これにより、カレントディレクトリ以下に<filename>postgresql-&version;</filename>というディレクトリが作成され、<productname>PostgreSQL</>のソースが展開されます。
この後のインストール手順を行うために、このディレクトリに移動してください。
  </para>

  <para>
<!--
   You can also get the source directly from the version control repository, see
   <xref linkend="sourcerepo">.
-->
またバージョン管理システムのリポジトリから直接ソースを入手することができます。<xref linkend="sourcerepo">を参照してください。
  </para>
 </sect1>
]]>

 <sect1 id="install-procedure">
<!--
  <title>Installation Procedure</title>
-->
<title>インストール手順</title>

  <procedure>

  <step id="configure">
<!--
   <title>Configuration</title>
-->
<title>構成</>

   <indexterm zone="configure">
    <primary>configure</primary>
   </indexterm>

   <para>
<!--
    The first step of the installation procedure is to configure the
    source tree for your system and choose the options you would like.
    This is done by running the <filename>configure</> script. For a
    default installation simply enter:
-->
インストール手順の最初のステップは、システムに合わせてソースツリーを設定し、使用するオプションを選択することです。
<filename>configure</>スクリプトを実行することでこれを行います。
デフォルトのインストールを行う場合は、単に以下を入力してください。
<screen>
<userinput>./configure</userinput>
</screen>
<!--
    This script will run a number of tests to determine values for various
    system dependent variables and detect any quirks of your
    operating system, and finally will create several files in the
    build tree to record what it found.  You can also run
    <filename>configure</filename> in a directory outside the source
    tree, if you want to keep the build directory separate.  This
    procedure is also called a
    <indexterm><primary>VPATH</primary></indexterm><firstterm>VPATH</firstterm>
    build.  Here's how:
このスクリプトは、各種のシステムに依存した変数の値を決定するために多くの試験を行い、使用中のオペレーティングシステムが持つどんなクセでも検出し、最終的に構築用ツリーに結果を記録するためのファイルをいくつか作成します。構築用のディレクトリを別の場所にしたい場合は、ソースツリーの外のディレクトリで<filename>configure</filename>を実行することもできます。この処理は<indexterm><primary>VPATH</primary></indexterm><firstterm>VPATH</firstterm>の構築も呼び出します。どのように行うかは下記を参照して下さい。
-->
<screen>
<userinput>mkdir build_dir</userinput>
<userinput>cd build_dir</userinput>
<!--
<userinput>/path/to/source/tree/configure [options go here]</userinput>
-->
<userinput>/path/to/source/tree/configure [オプションはここに]</userinput>
<userinput>make</userinput>
</screen>
   </para>

   <para>
<!--
    The default configuration will build the server and utilities, as
    well as all client applications and interfaces that require only a
    C compiler. All files will be installed under
    <filename>/usr/local/pgsql</> by default.
-->
デフォルトの構成では、サーバ、ユーティリティの他に、Cコンパイラだけを必要とするクライアントアプリケーションやインタフェースを構築します。
デフォルトでは、全てのファイルは<filename>/usr/local/pgsql</>以下にインストールされます。
   </para>

   <para>
<!--
    You can customize the build and installation process by supplying one
    or more of the following command line options to
    <filename>configure</filename>:
-->
<filename>configure</filename>に以下のコマンドラインオプションを1つ以上指定することで、構築処理やインストール処理を変更することができます。

     <variablelist>
      <varlistentry>
       <term><option>--prefix=<replaceable>PREFIX</></option></term>
       <listitem>
        <para>
<!--
         Install all files under the directory <replaceable>PREFIX</>
         instead of <filename>/usr/local/pgsql</filename>. The actual
         files will be installed into various subdirectories; no files
         will ever be installed directly into the
         <replaceable>PREFIX</> directory.
-->
<filename>/usr/local/pgsql</filename>ではなく、<replaceable>PREFIX</>ディレクトリ以下に全てのファイルをインストールします。
ファイルは実際には様々なサブディレクトリにインストールされ、<replaceable>PREFIX</>ディレクトリの直下にインストールされるファイルはありません。
        </para>

        <para>
<!--
         If you have special needs, you can also customize the
         individual subdirectories with the following options. However,
         if you leave these with their defaults, the installation will be
         relocatable, meaning you can move the directory after
         installation. (The <literal>man</> and <literal>doc</>
         locations are not affected by this.)
-->
特別な必要性があるのであれば、以下のオプションを使用して個々のサブディレクトリを変更することもできます。
しかし、これらをそのまま使用した場合、インストレーションは位置再変更可能になります。
つまり、インストールの後にディレクトリを移動することができます
（<literal>man</>と<literal>doc</>の場所はこの影響を受けません。）
        </para>

        <para>
<!--
         For relocatable installs, you might want to use
         <filename>configure</filename>'s <literal>&#045;&#045;disable-rpath</>
         option.  Also, you will need to tell the operating system how
         to find the shared libraries.
-->
インストールの位置再変更のために、<filename>configure</filename>の<literal>--disable-rpath</>を使用しようと考えるかもしれません。
その場合は、オペレーティングシステムにその共有ライブラリの場所を通知する必要があるでしょう。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--exec-prefix=<replaceable>EXEC-PREFIX</></option></term>
       <listitem>
        <para>
<!--
         You can install architecture-dependent files under a
         different prefix, <replaceable>EXEC-PREFIX</>, than what
         <replaceable>PREFIX</> was set to. This can be useful to
         share architecture-independent files between hosts. If you
         omit this, then <replaceable>EXEC-PREFIX</> is set equal to
         <replaceable>PREFIX</> and both architecture-dependent and
         independent files will be installed under the same tree,
         which is probably what you want.
-->
アーキテクチャ依存のファイルを<replaceable>PREFIX</>の設定とは別の接頭辞<replaceable>EXEC-PREFIX</>以下にインストールすることができます。
ホスト間でアーキテクチャ非依存のファイルを共有する場合に便利です。
省略した場合、<replaceable>EXEC-PREFIX</>は<replaceable>PREFIX</>と同じに設定され、アーキテクチャに依存するファイルも非依存なファイルも同じツリー以下にインストールされます。
ほとんどの場合、これが望まれています。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--bindir=<replaceable>DIRECTORY</></option></term>
       <listitem>
        <para>
<!--
         Specifies the directory for executable programs. The default
         is <filename><replaceable>EXEC-PREFIX</>/bin</>, which
         normally means <filename>/usr/local/pgsql/bin</>.
-->
実行可能プログラム用のディレクトリを指定します。
デフォルトでは<filename><replaceable>EXEC-PREFIX</>/bin</>であり、通常<filename>/usr/local/pgsql/bin</>となります。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--sysconfdir=<replaceable>DIRECTORY</></option></term>
       <listitem>
        <para>
<!--
         Sets the directory for various configuration files,
         <filename><replaceable>PREFIX</>/etc</> by default.
-->
各種設定ファイル用のディレクトリを設定します。
デフォルトでは<filename><replaceable>PREFIX</>/etc</>です。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--libdir=<replaceable>DIRECTORY</></option></term>
       <listitem>
        <para>
<!--
         Sets the location to install libraries and dynamically loadable
         modules. The default is
         <filename><replaceable>EXEC-PREFIX</>/lib</>.
-->
ライブラリや動的ロード可能モジュールをインストールする場所を設定します。
デフォルトは<filename><replaceable>EXEC-PREFIX</>/lib</>です。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--includedir=<replaceable>DIRECTORY</></option></term>
       <listitem>
        <para>
<!--
         Sets the directory for installing C and C++ header files. The
         default is <filename><replaceable>PREFIX</>/include</>.
-->
CおよびC++のヘッダファイルをインストールするディレクトリを設定します。
デフォルトは<filename><replaceable>PREFIX</>/include</>です。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--datarootdir=<replaceable>DIRECTORY</></option></term>
       <listitem>
        <para>
<!--
         Sets the root directory for various types of read-only data
         files.  This only sets the default for some of the following
         options.  The default is
         <filename><replaceable>PREFIX</>/share</>.
-->
いろいろな種類の読み取り専用データファイル用のルートディレクトリを設定します。
これは後述のオプションの一部についてのデフォルトを設定するだけです。
デフォルトは<filename><replaceable>PREFIX</>/share</>です。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--datadir=<replaceable>DIRECTORY</></option></term>
       <listitem>
        <para>
<!--
         Sets the directory for read-only data files used by the
         installed programs. The default is
         <filename><replaceable>DATAROOTDIR</></>. Note that this has
         nothing to do with where your database files will be placed.
-->
インストールプログラムが使用する読み取り専用のディレクトリを設定します。
デフォルトは<filename><replaceable>DATAROOTDIR</></>です。
これはインストールするデータベースファイルがどこに設置されるかとは関係ないことを覚えておいてください。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--localedir=<replaceable>DIRECTORY</></option></term>
       <listitem>
        <para>
<!--
         Sets the directory for installing locale data, in particular
         message translation catalog files.  The default is
         <filename><replaceable>DATAROOTDIR</>/locale</>.
-->
特にメッセージ翻訳カタログファイルのロケールデータをインストールするディレクトリを設定します。
デフォルトは<filename><replaceable>DATAROOTDIR</>/locale</>です。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--mandir=<replaceable>DIRECTORY</></option></term>
       <listitem>
        <para>
<!--
         The man pages that come with <productname>PostgreSQL</> will be installed under
         this directory, in their respective
         <filename>man<replaceable>x</></> subdirectories.
         The default is <filename><replaceable>DATAROOTDIR</>/man</>.
-->
<productname>PostgreSQL</>付属のマニュアルページがこのディレクトリ以下の、対応する<filename>man<replaceable>x</></>サブディレクトリにインストールされます。
デフォルトは<filename><replaceable>DATAROOTDIR</>/man</>です。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--docdir=<replaceable>DIRECTORY</></option></term>
       <listitem>
        <para>
<!--
         Sets the root directory for installing documentation files,
         except <quote>man</> pages.  This only sets the default for
         the following options.  The default value for this option is
         <filename><replaceable>DATAROOTDIR</>/doc/postgresql</>.
-->
<quote>man</>ページを除いた、ドキュメント一式ファイルをインストールするルートディレクトリを設定します。
これは以下のオプションのデフォルトのみを設定します。
このオプションのデフォルト値は<filename><replaceable>DATAROOTDIR</>/doc/postgresql</>です。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--htmldir=<replaceable>DIRECTORY</></option></term>
       <listitem>
        <para>
<!--
         The HTML-formatted documentation for
         <productname>PostgreSQL</productname> will be installed under
         this directory.  The default is
         <filename><replaceable>DATAROOTDIR</></>.
-->
         <productname>PostgreSQL</productname>のHTML形式化文書一式はこのディレクトリの下にインストールされます。デフォルトは<filename><replaceable>DATAROOTDIR</></>です。
        </para>
       </listitem>
      </varlistentry>
     </variablelist>

     <note>
      <para>
<!--
       Care has been taken to make it possible to install
       <productname>PostgreSQL</> into shared installation locations
       (such as <filename>/usr/local/include</filename>) without
       interfering with the namespace of the rest of the system. First,
       the string <quote><literal>/postgresql</literal></quote> is
       automatically appended to <varname>datadir</varname>,
       <varname>sysconfdir</varname>, and <varname>docdir</varname>,
       unless the fully expanded directory name already contains the
       string <quote><literal>postgres</></quote> or
       <quote><literal>pgsql</></quote>. For example, if you choose
       <filename>/usr/local</filename> as prefix, the documentation will
       be installed in <filename>/usr/local/doc/postgresql</filename>,
       but if the prefix is <filename>/opt/postgres</filename>, then it
       will be in <filename>/opt/postgres/doc</filename>. The public C
       header files of the client interfaces are installed into
       <varname>includedir</varname> and are namespace-clean. The
       internal header files and the server header files are installed
       into private directories under <varname>includedir</varname>. See
       the documentation of each interface for information about how to
       access its header files. Finally, a private subdirectory will
       also be created, if appropriate, under <varname>libdir</varname>
       for dynamically loadable modules.
-->
（<filename>/usr/local/include</filename>といった）共用のインストール場所に、システムの他の名前空間に影響を与えることなく<productname>PostgreSQL</>をインストールすることができるような配慮がなされています。
まず、完全に展開したディレクトリ名に<quote><literal>postgres</></quote>か<quote><literal>pgsql</></quote>という文字列が含まれていない場合、<quote><literal>/postgresql</literal></quote>という文字列が自動的に<varname>datadir</varname>、<varname>sysconfdir</varname>、<varname>docdir</varname>に追加されます。
例えば、接頭辞として<filename>/usr/local</filename>を使用する場合、文書は<filename>/usr/local/doc/postgresql</filename>にインストールされますが、接頭辞が<filename>/opt/postgres</filename>の場合は<filename>/opt/postgres/doc</filename>にインストールされます。
クライアントインタフェース用の外部向けCヘッダファイルは<varname>includedir</varname>にインストールされ、名前空間の問題はありません。
内部向けヘッダファイルやサーバ用ヘッダファイルは、<varname>includedir</varname>以下の非公開ディレクトリにインストールされます。
各インタフェース用のヘッダファイルにアクセスする方法についての情報は、そのインタフェースの文書を参照してください。
最後に、適切であれば、動的ロード可能モジュール用に<varname>libdir</varname>以下にも非公開用のサブディレクトリが作成されます。       
      </para>
     </note>
    </para>

    <para>
     <variablelist>
      <varlistentry>
       <term><option>--with-extra-version=<replaceable>STRING</></option></term>
       <listitem>
        <para>
<!--
         Append <replaceable>STRING</> to the PostgreSQL version number.  You
         can use this, for example, to mark binaries built from unreleased Git
         snapshots or containing custom patches with an extra version string
         such as a <command>git describe</command> identifier or a
         distribution package release number.
-->
PostgreSQLバージョン番号に<replaceable>STRING</>を追加します。
これは、例えば、リリースされていないGitスナップショットからビルドしたバイナリや、<command>git describe</command>識別子やディストリビューションパッケージリリース番号のような追加のバージョン文字列のあるカスタムパッチを含むバイナリに印をつけるために使えます。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-includes=<replaceable>DIRECTORIES</></option></term>
       <listitem>
        <para>
<!--
         <replaceable>DIRECTORIES</> is a colon-separated list of
         directories that will be added to the list the compiler
         searches for header files. If you have optional packages
         (such as GNU <application>Readline</>) installed in a non-standard
         location,
         you have to use this option and probably also the corresponding
         <option>&#045;&#045;with-libraries</> option.
-->
<replaceable>DIRECTORIES</>には、コンパイラがヘッダファイルを検索するディレクトリのリストをコロンで区切って指定します。
（GNU <application>Readline</>などの）オプションのパッケージが非標準的な場所にインストールされている場合、このオプションと、おそらく対応する<option>--with-libraries</>オプションを使用する必要があります。
        </para>
        <para>
<!--
         Example: <literal>&#045;&#045;with-includes=/opt/gnu/include:/usr/sup/include</>.
-->
         例： <literal>--with-includes=/opt/gnu/include:/usr/sup/include</>
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-libraries=<replaceable>DIRECTORIES</></option></term>
       <listitem>
        <para>
<!--
         <replaceable>DIRECTORIES</> is a colon-separated list of
         directories to search for libraries. You will probably have
         to use this option (and the corresponding
         <option>&#045;&#045;with-includes</> option) if you have packages
         installed in non-standard locations.
-->
<replaceable>DIRECTORIES</>には、ライブラリを検索するディレクトリのリストをコロンで区切って指定します。
パッケージが非標準的な場所にインストールされている場合は、おそらくこのオプション（と対応する<option>--with-includes</>オプション）を使用する必要があります。
        </para>
        <para>
<!--
         Example: <literal>&#045;&#045;with-libraries=/opt/gnu/lib:/usr/sup/lib</>.
-->
例： <literal>--with-libraries=/opt/gnu/lib:/usr/sup/lib</>
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--enable-nls<optional>=<replaceable>LANGUAGES</replaceable></optional></option></term>
       <listitem>
        <para>
<!--
         Enables Native Language Support (<acronym>NLS</acronym>),
         that is, the ability to display a program's messages in a
         language other than English.
         <replaceable>LANGUAGES</replaceable> is an optional space-separated
         list of codes of the languages that you want supported, for
         example <literal>&#045;&#045;enable-nls='de fr'</>.  (The intersection
         between your list and the set of actually provided
         translations will be computed automatically.)  If you do not
         specify a list, then all available translations are
         installed.
-->
各国語サポート（<acronym>NLS</acronym>）、つまり、英語以外の言語によるプログラムメッセージの表示機能を有効にします。 
<replaceable>LANGUAGES</replaceable>はオプションであり、サポートさせたい言語コードを空白で区切ったリストを指定します。例えば、<literal>--enable-nls='de fr'</>などとします 
（指定したリストと実際に用意された翻訳との論理積が自動的に計算されます）。
リストに何も指定しなかった場合、利用可能な翻訳すべてがインストールされます。
        </para>

        <para>
<!--
         To use this option, you will need an implementation of the
         <application>Gettext</> API; see above.
-->
このオプションを使用するためには、<application>gettext</> APIの実装が必要です。
上記を参照してください。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-pgport=<replaceable>NUMBER</></option></term>
       <listitem>
        <para>
<!--
         Set <replaceable>NUMBER</> as the default port number for
         server and clients. The default is 5432. The port can always
         be changed later on, but if you specify it here then both
         server and clients will have the same default compiled in,
         which can be very convenient.  Usually the only good reason
         to select a non-default value is if you intend to run multiple
         <productname>PostgreSQL</> servers on the same machine.
-->
サーバとクライアントのデフォルトのポート番号を<replaceable>NUMBER</>に設定します。
デフォルトは5432です。
このポートは後でいつでも変更することができますが、ここで指定した場合、サーバとクライアントはコンパイル時に同じデフォルト値を持つようになります。
これは非常に便利です。
通常、デフォルト以外の値を選択すべき唯一の理由は、同じマシンで複数の<productname>PostgreSQL</>を稼働させることです。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-perl</option></term>
       <listitem>
        <para>
<!--
         Build the <application>PL/Perl</> server-side language.
-->
<application>PL/Perl</>サーバサイド言語を構築します。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-python</option></term>
       <listitem>
        <para>
<!--
         Build the <application>PL/Python</> server-side language.
-->
<application>PL/Python</>サーバサイド言語を構築します。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-tcl</option></term>
       <listitem>
        <para>
<!--
         Build the <application>PL/Tcl</> server-side language.
-->
<application>PL/Tcl</>サーバサイド言語を構築します。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-tclconfig=<replaceable>DIRECTORY</replaceable></option></term>
       <listitem>
        <para>
<!--
         Tcl installs the file <filename>tclConfig.sh</filename>, which
         contains configuration information needed to build modules
         interfacing to Tcl. This file is normally found automatically
         at a well-known location, but if you want to use a different
         version of Tcl you can specify the directory in which to look
         for it.
-->
Tclは、Tclへのインタフェースモジュールを構築するために必要な設定情報を含む<filename>tclConfig.sh</filename>ファイルをインストールします。
このファイルは通常、自動的に一般的に知られている場所にありますが、もしTclの別のバージョンを使いたい場合は、検索対象のディレクトリを指定することができます。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-gssapi</option></term>
       <listitem>
        <para>
<!--
         Build with support for GSSAPI authentication. On many
         systems, the GSSAPI (usually a part of the Kerberos installation)
         system is not installed in a location
         that is searched by default (e.g., <filename>/usr/include</>,
         <filename>/usr/lib</>), so you must use the options
         <option>&#045;&#045;with-includes</> and <option>&#045;&#045;with-libraries</> in
         addition to this option.  <filename>configure</> will check
         for the required header files and libraries to make sure that
         your GSSAPI installation is sufficient before proceeding.
-->
GSSAPI認証のサポートを構築します。
多くのシステムでは、GSSAPIシステム（通常Kerberosインストレーションの一部）はデフォルトの検索場所（例えば<filename>/usr/include</>や<filename>/usr/lib</>）にインストールされていません。
そのため、<option>--with-includes</>と<option>--with-libraries</>オプションをさらに追加して使わなければいけません。
<filename>configure</>は、処理を進める前にGSSAPIが正しくインストールされていることを確認するために、必要とされるヘッダファイルとライブラリを検査します。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-krb-srvnam=<replaceable>NAME</></option></term>
       <listitem>
        <para>
<!--
         The default name of the Kerberos service principal used
         by GSSAPI.
         <literal>postgres</literal> is the default. There's usually no
         reason to change this unless you have a Windows environment,
         in which case it must be set to upper case
         <literal>POSTGRES</literal>.
-->
GSSAPIで使用されるKerberosのサービスプリンシパルのデフォルトの名前です。
デフォルトでは<quote>postgres</quote>です。
これを変える理由はWindows環境がない限り、特にありません。
Windows環境がある場合は大文字の<literal>POSTGRES</literal>に設定する必要があります。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-openssl</option>
       <indexterm>
        <primary>OpenSSL</primary>
        <seealso>SSL</seealso>
       </indexterm>
       </term>
       <listitem>
        <para>
<!--
         Build with support for <acronym>SSL</> (encrypted)
         connections. This requires the <productname>OpenSSL</>
         package to be installed.  <filename>configure</> will check
         for the required header files and libraries to make sure that
         your <productname>OpenSSL</> installation is sufficient
         before proceeding.
-->
<acronym>SSL</>（暗号化）接続のサポートを有効にして構築します。
これには、<productname>OpenSSL</>パッケージがインストールされていなければなりません。
<filename>configure</>は、処理を進める前に<productname>OpenSSL</>のインストールを確認するために、必要なヘッダファイルとライブラリを検査します。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-pam</option></term>
       <listitem>
        <para>
<!--
         Build with <acronym>PAM</><indexterm><primary>PAM</></>
         (Pluggable Authentication Modules) support.
-->
<acronym>PAM</><indexterm><primary>PAM</></>（プラガブル認証モジュール）のサポートを有効にして構築します。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-ldap</option></term>
       <listitem>
        <para>
<!--
         Build with <acronym>LDAP</><indexterm><primary>LDAP</></>
         support for authentication and connection parameter lookup (see
         <![%standalone-include[the documentation about client authentication
         and libpq]]><![%standalone-ignore[<xref linkend="libpq-ldap"> and
         <xref linkend="auth-ldap">]]> for more information). On Unix,
         this requires the <productname>OpenLDAP</> package to be
         installed. On Windows, the default <productname>WinLDAP</>
         library is used.  <filename>configure</> will check for the required
         header files and libraries to make sure that your
         <productname>OpenLDAP</> installation is sufficient before
         proceeding.
-->
認証および接続パラメータ検索用の<acronym>LDAP</><indexterm><primary>LDAP</></>サポートを有効にして構築します。
（<![%standalone-include[クライアント認証およびlibpqについての文書]]><![%standalone-ignore[<xref linkend="libpq-ldap">および<xref linkend="auth-ldap">]]>を参照してください。）
Unixでは、<productname>OpenLDAP</>パッケージがインストールされていることが要求されます。Windowsではデフォルトの<productname>WinLDAP</>ライブラリが使用されます。
<filename>configure</>は、処理を進める前に<productname>OpenLDAP</>のインストールが十分されているかどうかを確認するために、必要なヘッダファイルとライブラリを検査します。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--without-readline</option></term>
       <listitem>
        <para>
<!--
         Prevents use of the <application>Readline</> library
         (and <application>libedit</> as well).  This option disables
         command-line editing and history in
         <application>psql</application>, so it is not recommended.
-->
<application>Readline</>ライブラリ（および<application>libedit</>）の使用を防止します。
これにより<application>psql</application>でのコマンドライン編集および履歴が無効となるため、推奨されません。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-libedit-preferred</option></term>
       <listitem>
        <para>
<!--
         Favors the use of the BSD-licensed <application>libedit</> library
         rather than GPL-licensed <application>Readline</>.  This option
         is significant only if you have both libraries installed; the
         default in that case is to use <application>Readline</>.
-->
GPLライセンスの<application>Readline</>ではなくBSDライセンスの<application>libedit</>ライブラリを優先して使用します。
このオプションは両方のライブラリがインストールされている場合にのみ重要です。
この場合デフォルトで<application>Readline</>が使用されます。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-bonjour</option></term>
       <listitem>
        <para>
<!--
         Build with Bonjour support.  This requires Bonjour support
         in your operating system.  Recommended on OS X.
-->
Bonjourサポートを有効にして構築します。
これにはオペレーティングシステムがBonjourをサポートしていることが必要です。
OS Xでは推奨します。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-uuid=<replaceable>LIBRARY</replaceable></option></term>
       <listitem>
        <para>
<!--
         Build the <![%standalone-include[uuid-ossp]]>
         <![%standalone-ignore[<xref linkend="uuid-ossp">]]> module
         (which provides functions to generate UUIDs), using the specified
         UUID library.<indexterm><primary>UUID</primary></indexterm>
         <replaceable>LIBRARY</replaceable> must be one of:
-->
指定されたUUIDライブラリを使用して(UUIDを生成する関数を提供する)<![%standalone-include[uuid-ossp]]><![%standalone-ignore[<xref linkend="uuid-ossp">]]>モジュールをビルドします。<indexterm><primary>UUID</primary></indexterm>
<replaceable>LIBRARY</replaceable>は以下のいずれかでなければなりません。
        </para>
        <itemizedlist>
         <listitem>
          <para>
<!--
           <option>bsd</> to use the UUID functions found in FreeBSD, NetBSD,
           and some other BSD-derived systems
-->
<option>bsd</>はFreeBSD、NetBSD、その他のBSD派生システムにあるUUID関数を使います。
          </para>
         </listitem>
         <listitem>
          <para>
<!--
           <option>e2fs</> to use the UUID library created by
           the <literal>e2fsprogs</> project; this library is present in most
           Linux systems and in OS X, and can be obtained for other
           platforms as well
-->
<option>e2fs</>は<literal>e2fsprogs</>プロジェクトで作られたUUIDライブラリを使います。
このライブラリはたいていのLinuxシステムとOS Xにあり、また、その他のプラットフォームでも入手可能です。
          </para>
         </listitem>
         <listitem>
          <para>
<!--
           <option>ossp</> to use the <ulink
           url="http://www.ossp.org/pkg/lib/uuid/">OSSP UUID library</ulink>
-->
<ulink url="http://www.ossp.org/pkg/lib/uuid/">OSSP UUIDライブラリ</ulink>を使用します。
          </para>
         </listitem>
        </itemizedlist>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-ossp-uuid</option></term>
       <listitem>
        <para>
<!--
         Obsolete equivalent of <literal>&#045;-with-uuid=ossp</literal>.
-->
<literal>--with-uuid=ossp</literal>に相当する古いものです。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-libxml</option></term>
       <listitem>
        <para>
<!--
         Build with libxml (enables SQL/XML support).  Libxml version 2.6.23 or
         later is required for this feature.
-->
libxmlを使用して構築します（SQL/XMLサポートが有効になります）。
この機能のためにはlibxmlバージョン2.6.23以降が必要です。
        </para>

        <para>
<!--
         Libxml installs a program <command>xml2-config</command> that
         can be used to detect the required compiler and linker
         options.  PostgreSQL will use it automatically if found.  To
         specify a libxml installation at an unusual location, you can
         either set the environment variable
         <envar>XML2_CONFIG</envar> to point to the
         <command>xml2-config</command> program belonging to the
         installation, or use the options
         <option>&#045;&#045;with-includes</option> and
         <option>&#045;&#045;with-libraries</option>.
-->
libxmlがインストールする<command>xml2-config</command>プログラムを使用して、必要なコンパイラオプション、リンクオプションを検出することができます。
PostgreSQLは、見つけられればこのプログラムを使用します。
通常以外の場所にインストールしたlibxmlインストレーションを指定するためには、環境変数<envar>XML2_CONFIG</envar>がそのインストレーション用の<command>xml2-config</command>プログラムを指し示すように設定してください。
または、<option>--with-includes</option>および<option>--with-libraries</option>を使用してください。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-libxslt</option></term>
       <listitem>
        <para>
<!--
         Use libxslt when building the
         <![%standalone-include[xml2]]>
         <![%standalone-ignore[<xref linkend="xml2">]]>
         module.  <application>xml2</> relies on this library
         to perform XSL transformations of XML.
-->
<![%standalone-include[xml2]]> <![%standalone-ignore[<xref linkend="xml2">]]>モジュールを構築する場合はlibxsltを使用してください。
<application>xml2</>はXMLのXSL変換を行うために、このライブラリに依存します。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--disable-integer-datetimes</option></term>
       <listitem>
        <para>
<!--
         Disable support for 64-bit integer storage for timestamps and
         intervals, and store datetime values as floating-point
         numbers instead. Floating-point datetime storage was the
         default in <productname>PostgreSQL</productname> releases
         prior to 8.4, but it is now deprecated, because it does not
         support microsecond precision for the full range of
         <type>timestamp</type> values. However, integer-based
         datetime storage requires a 64-bit integer type. Therefore,
         this option can be used when no such type is available, or
         for compatibility with applications written for prior
         versions of <productname>PostgreSQL</productname>. See
         <![%standalone-include[the documentation about datetime datatypes]]>
         <![%standalone-ignore[<xref linkend="datatype-datetime">]]>
         for more information.
-->
日付時刻および時間間隔の格納に64ビット整数格納方式を無効にし、その代わり浮動小数点で格納します。<productname>PostgreSQL</productname>リリース8.4以前では日付時刻の浮動小数点格納方式がデフォルトでしたが、<type>timestamp</type>値がとる値の全ての範囲でマイクロ秒精度をサポートしないため現在非推奨となりました。しかし、整数ベースの日付時刻格納には64-ビット整数型が必要です。従って、このオプションはこの型が使えない場合での使用、または以前の<productname>PostgreSQL</productname>バージョン用に書かれたアプリケーションとの互換性を保たなければならない場合に使用します。
詳細は<![%standalone-include[日付時刻データ型に関する文書]]> <![%standalone-ignore[<xref linkend="datatype-datetime">]]>を参照してください。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--disable-float4-byval</option></term>
       <listitem>
        <para>
<!--
         Disable passing float4 values <quote>by value</>, causing them
         to be passed <quote>by reference</> instead.  This option costs
         performance, but may be needed for compatibility with old
         user-defined functions that are written in C and use the
         <quote>version 0</> calling convention.  A better long-term
         solution is to update any such functions to use the
         <quote>version 1</> calling convention.
-->
float4値の<quote>値</>渡しを無効にし、<quote>参照</>渡しで渡すようにします。
このオプションは性能に関するコストがかかりますが、C言語で開発された古いユーザ定義の関数との互換性を保持する場合や<quote>version 0</>呼び出し規約を使用する場合に必要になります。
長期的に見てより良い解決方法はこうした関数を更新して、<quote>version 1</>呼び出し規約を使用するようにすることです。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--disable-float8-byval</option></term>
       <listitem>
        <para>
<!--
         Disable passing float8 values <quote>by value</>, causing them
         to be passed <quote>by reference</> instead.  This option costs
         performance, but may be needed for compatibility with old
         user-defined functions that are written in C and use the
         <quote>version 0</> calling convention.  A better long-term
         solution is to update any such functions to use the
         <quote>version 1</> calling convention.
         Note that this option affects not only float8, but also int8 and some
         related types such as timestamp.
         On 32-bit platforms, <option>&#045;&#045;disable-float8-byval</> is the default
         and it is not allowed to select <option>&#045;&#045;enable-float8-byval</>.
-->
float8値の<quote>値</>渡しを無効にし、<quote>参照</>渡しで渡すようにします。
このオプションは性能に関するコストがかかりますが、C言語で開発された古いユーザ定義の関数との互換性を保持する場合や<quote>version 0</>呼び出し規約を使用する場合に必要になります。
長期的に見てより良い解決方法はこうした関数を更新して、<quote>version 1</>呼び出し規約を使用するようにすることです。
このオプションはfloat8に影響するだけではなく、int8やタイムスタンプなど一部の関連した型についても影響することに注意してください。
32ビットプラットフォームでは、<option>--disable-float8-byval</>がデフォルトで<option>--enable-float8-byval</>を選択することはできません。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-segsize=<replaceable>SEGSIZE</replaceable></option></term>
       <listitem>
        <para>
<!--
         Set the <firstterm>segment size</>, in gigabytes.  Large tables are
         divided into multiple operating-system files, each of size equal
         to the segment size.  This avoids problems with file size limits
         that exist on many platforms.  The default segment size, 1 gigabyte,
         is safe on all supported platforms.  If your operating system has
         <quote>largefile</> support (which most do, nowadays), you can use
         a larger segment size.  This can be helpful to reduce the number of
         file descriptors consumed when working with very large tables.
         But be careful not to select a value larger than is supported
         by your platform and the file systems you intend to use.  Other
         tools you might wish to use, such as <application>tar</>, could
         also set limits on the usable file size.
         It is recommended, though not absolutely required, that this value
         be a power of 2.
         Note that changing this value requires an initdb.
-->
<firstterm>セグメントサイズ</>をギガバイト単位で指定します。
大規模なテーブルはこのセグメントサイズと同じサイズの複数のオペレーティングシステムのファイルに分割されます。
これにより多くのプラットフォームで存在するファイルサイズ上限に関する問題を防ぎます。
デフォルトのセグメントサイズは1ギガバイトで、サポートされるすべてのプラットフォームで安全です。
使用するオペレーティングシステムが<quote>ラージファイル</>をサポートしていれば（最近はほとんどサポートしています）、より大きなセグメントサイズを使用することができます。
非常に大規模なテーブルで作業する時のファイル記述子の消費数を減らすために、これが役に立つでしょう。
しかし、プラットフォーム、または使用予定のファイルシステムでサポートされる値以上に大きな値を指定しないように注意してください。
<application>tar</>などの、使用したいその他のツールにも使用できるファイルサイズに制限があることがあります。
絶対に必要ではありませんが、この値を2のべき乗にすることを勧めます。
この値の変更にはinitdbが必要であることに注意してください。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-blocksize=<replaceable>BLOCKSIZE</replaceable></option></term>
       <listitem>
        <para>
<!--
         Set the <firstterm>block size</>, in kilobytes.  This is the unit
         of storage and I/O within tables.  The default, 8 kilobytes,
         is suitable for most situations; but other values may be useful
         in special cases.
         The value must be a power of 2 between 1 and 32 (kilobytes).
         Note that changing this value requires an initdb.
-->
キロバイト単位で<firstterm>ブロック容量</>を設定します。
これはテーブル内でのストレージとI/Oの単位です。
８キロバイトのデフォルトはほとんどの場合適切ですが、特別な場合は他の値が役立ちます。
値は1から32（キロバイト）の範囲の２のべき乗でなければなりません。
この値の変更はinitdbを必要とすることを覚えておいてください。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-wal-segsize=<replaceable>SEGSIZE</replaceable></option></term>
       <listitem>
        <para>
<!--
         Set the <firstterm>WAL segment size</>, in megabytes.  This is
         the size of each individual file in the WAL log.  It may be useful
         to adjust this size to control the granularity of WAL log shipping.
         The default size is 16 megabytes.
         The value must be a power of 2 between 1 and 64 (megabytes).
         Note that changing this value requires an initdb.
-->
メガバイト単位で<firstterm>WALセグメント容量</>を設定します。これはWALログ内のそれぞれ個別のファイルの容量です。この容量を調整することで、WALログ配送の粒度を制御するのに役立ちます。デフォルト容量は16メガバイトです。1から64（メガバイト）の範囲の２のべき乗でなければなりません。この値の変更はinitdbを必要とすることを覚えておいてください。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-wal-blocksize=<replaceable>BLOCKSIZE</replaceable></option></term>
       <listitem>
        <para>
<!--
         Set the <firstterm>WAL block size</>, in kilobytes.  This is the unit
         of storage and I/O within the WAL log.  The default, 8 kilobytes,
         is suitable for most situations; but other values may be useful
         in special cases.
         The value must be a power of 2 between 1 and 64 (kilobytes).
         Note that changing this value requires an initdb.
-->
キロバイト単位で<firstterm>WALブロック容量</>を設定します。
これはWALログ内でのストレージとI/Oの単位です。
８キロバイトのデフォルトはほとんどの場合適切ですが、特別な場合は大きめの値が役立ちます。
値は1から64（キロバイト）の範囲の２のべき乗でなければなりません。
この値の変更はinitdbを必要とすることを覚えておいてください。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--disable-spinlocks</option></term>
       <listitem>
        <para>
<!--
         Allow the build to succeed even if <productname>PostgreSQL</>
         has no CPU spinlock support for the platform.  The lack of
         spinlock support will result in poor performance; therefore,
         this option should only be used if the build aborts and
         informs you that the platform lacks spinlock support. If this
         option is required to build <productname>PostgreSQL</> on
         your platform, please report the problem to the
         <productname>PostgreSQL</> developers.
-->
<productname>PostgreSQL</>がそのプラットフォーム用のCPUスピンロックをサポートしない場合でも、構築に成功するようにします。
スピンロックのサポートの欠落により、性能は悪化します。
したがって、このオプションは、構築が失敗し、その原因が使用するプラットフォームでスピンロックサポートが欠落している場合にのみ使用してください。
使用するプラットフォームにおける<productname>PostgreSQL</>の構築にこのオプションが必要とされた場合は、<productname>PostgreSQL</>開発者にその問題を報告してください。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--disable-thread-safety</option></term>
       <listitem>
        <para>
<!--
         Disable the thread-safety of client libraries.  This prevents
         concurrent threads in <application>libpq</application> and
         <application>ECPG</application> programs from safely controlling
         their private connection handles.
-->
クライアントライブラリのスレッドセーフを無効にします。
これにより、<application>libpq</application>や<application>ECPG</application>プログラム内の同時実行スレッドは、安全にその固有の接続ハンドルを制御できなくなります。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--with-system-tzdata=<replaceable>DIRECTORY</replaceable></option>
       <indexterm>
<!--
        <primary>time zone data</primary>
-->
        <primary>時間帯データ</primary>
       </indexterm>
       </term>
       <listitem>
        <para>
<!--
         <productname>PostgreSQL</> includes its own time zone database,
         which it requires for date and time operations.  This time zone
         database is in fact compatible with the IANA time zone
         database provided by many operating systems such as FreeBSD,
         Linux, and Solaris, so it would be redundant to install it again.
         When this option is used, the system-supplied time zone database
         in <replaceable>DIRECTORY</replaceable> is used instead of the one
         included in the PostgreSQL source distribution.
         <replaceable>DIRECTORY</replaceable> must be specified as an
         absolute path.  <filename>/usr/share/zoneinfo</filename> is a
         likely directory on some operating systems.  Note that the
         installation routine will not detect mismatching or erroneous time
         zone data.  If you use this option, you are advised to run the
         regression tests to verify that the time zone data you have
         pointed to works correctly with <productname>PostgreSQL</>.
-->
<productname>PostgreSQL</>は、日付時刻に関する操作で必要な、独自の時間帯データベースを持ちます。
実際のところ、この時間帯データベースはFreeBSD、Linux、Solarisなどの多くのオペレーティングシステムで提供されるIANA時間帯データベースと互換性があります。
このため、これを再びインストールすることは冗長です。
このオプションが使用されると、<replaceable>DIRECTORY</replaceable>にあるシステムが提供する時間帯データベースがPostgreSQLソース配布物に含まれるものの代わりに使用されます。
<replaceable>DIRECTORY</replaceable>は絶対パスで指定しなければなりません。
<filename>/usr/share/zoneinfo</filename>がオペレーティングシステムの一部でよく使われます。
インストール処理が時間帯データが一致しない、またはエラーがあることを検知しないことに注意してください。
このオプションを使用する場合、指定した時間帯データが<productname>PostgreSQL</>で正しく動作するかどうかを検証するためにリグレッションテストを実行することが推奨されています。
        </para>

<!--
        <indexterm><primary>cross compilation</primary></indexterm>
-->
        <indexterm><primary>クロスコンパイル</primary></indexterm>

        <para>
<!--
         This option is mainly aimed at binary package distributors
         who know their target operating system well.  The main
         advantage of using this option is that the PostgreSQL package
         won't need to be upgraded whenever any of the many local
         daylight-saving time rules change.  Another advantage is that
         PostgreSQL can be cross-compiled more straightforwardly if the
         time zone database files do not need to be built during the
         installation.
-->
このオプションは、対象オペレーティングシステムを熟知しているパッケージ配布者を主な対象としたもの。
このオプションを使用する大きな利点は、多くの局所的な夏時間規則の変更があってもPostgreSQLパッケージを更新する必要がないことです。
他の利点として、時間帯データベースファイルをインストール時に構築する必要がありませんので、PostgreSQLのクロスコンパイルをより簡単に行うことができます。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--without-zlib</option></term>
       <listitem>
        <para>
         <indexterm>
          <primary>zlib</primary>
         </indexterm>
<!--
         Prevents use of the <application>Zlib</> library.  This disables
         support for compressed archives in <application>pg_dump</application>
         and <application>pg_restore</application>.
         This option is only intended for those rare systems where this
         library is not available.
-->
<application>Zlib</>ライブラリの使用を抑制します。
これは、<application>pg_dump</application>と<application>pg_restore</application>における圧縮アーカイブのサポートを無効にします。
このオプションは、このライブラリが利用できないごく少数のシステム向けだけのものです。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--enable-debug</option></term>
       <listitem>
        <para>
<!--
         Compiles all programs and libraries with debugging symbols.
         This means that you can run the programs in a debugger
         to analyze problems. This enlarges the size of the installed
         executables considerably, and on non-GCC compilers it usually
         also disables compiler optimization, causing slowdowns. However,
         having the symbols available is extremely helpful for dealing
         with any problems that might arise.  Currently, this option is
         recommended for production installations only if you use GCC.
         But you should always have it on if you are doing development work
         or running a beta version.
-->
全てのプログラムとライブラリをデバッグシンボル付きでコンパイルします。
これは、問題を解析するためにデバッガ内でプログラムを実行できることを意味します。 
これはインストールする実行形式ファイルのサイズをかなり大きくし、また、GCC以外のコンパイラでは、通常はコンパイラによる最適化が行われなくなりますので、低速になります。
しかし、デバッグシンボルが利用できるということは、発生した問題に対応する時に非常に便利です。  
現在のところ、GCC を使用している場合にのみ、稼働用のインストレーションにこのオプションを使用することを推奨します。  
しかし、開発作業時やベータ版を実行する時は、常にこれを有効にすべきです。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--enable-coverage</option></term>
       <listitem>
        <para>
<!--
         If using GCC, all programs and libraries are compiled with
         code coverage testing instrumentation.  When run, they
         generate files in the build directory with code coverage
         metrics.
         <![%standalone-ignore[See <xref linkend="regress-coverage">
         for more information.]]> This option is for use only with GCC
         and when doing development work.
-->
GCCを使用している場合、すべてのプログラムとライブラリはコードカバレッジ試験機構付きでコンパイルされます。
実行すると、これらは構築用ディレクトリ内にコードカバレッジメトリックを持ったファイルを生成します。
<![%standalone-ignore[詳細は<xref linkend="regress-coverage">を参照してください]]>
このオプションはGCC専用であり、また、開発作業中に使用するためのものです。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--enable-profiling</option></term>
       <listitem>
        <para>
<!--
         If using GCC, all programs and libraries are compiled so they
         can be profiled.  On backend exit, a subdirectory will be created
         that contains the <filename>gmon.out</> file for use in profiling.
         This option is for use only with GCC and when doing development work.
-->
GCCを使用する場合、すべてのプログラムとライブラリがプロファイリング可能状態でコンパイルされます。
バックエンドの終了時、プロファイリングに使用する<filename>gmon.out</>ファイルを含むサブディレクトリが作成されます。
このオプションはGCCを使用する場合のみ使用でき、開発作業を行う時に使用します。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--enable-cassert</option></term>
       <listitem>
        <para>
<!--
         Enables <firstterm>assertion</> checks in the server, which test for
         many <quote>cannot happen</> conditions.  This is invaluable for
         code development purposes, but the tests can slow down the
         server significantly.
         Also, having the tests turned on won't necessarily enhance the
         stability of your server!  The assertion checks are not categorized
         for severity, and so what might be a relatively harmless bug will
         still lead to server restarts if it triggers an assertion
         failure.  This option is not recommended for production use, but
         you should have it on for development work or when running a beta
         version.
-->
サーバにおける、多くの<quote>あり得ない</>状態をテストする<firstterm>アサーション</>チェックを有効にします。  
これは、プログラムの開発のためには測り知れない価値がありますが、このテストによりサーバはかなり低速になります。  
また、このテストを有効にしても、サーバの安定性が向上するとは限りません！
アサーションチェックは、重要度によって分類されていませんので、比較的害がないようなバグでも、アサーション失敗をトリガとした、サーバの再起動が行われてしまいます。  
稼働用にこのオプションを使用することは推奨されませんが、開発作業時やベータ版を実行する場合は、これを有効にすべきです。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--enable-depend</option></term>
       <listitem>
        <para>
<!--
         Enables automatic dependency tracking.  With this option, the
         makefiles are set up so that all affected object files will
         be rebuilt when any header file is changed.  This is useful
         if you are doing development work, but is just wasted overhead
         if you intend only to compile once and install.  At present,
         this option only works with GCC.
-->
自動依存関係追跡を有効にします。  
このオプションを使用すると、ヘッダファイルが変更された場合に、影響を受ける全てのオブジェクトファイルが再構築されるように、makefile が設定されます。  
これは開発作業時には有用ですが、単に一度コンパイルしインストールするだけであれば、これは無駄なオーバーヘッドです。
現在のところ、GCC でのみ、このオプションは動作します。

        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--enable-dtrace</option></term>
       <listitem>
        <para>
         <indexterm>
          <primary>DTrace</primary>
         </indexterm>
<!--
         Compiles <productname>PostgreSQL</productname> with support for the
         dynamic tracing tool DTrace.
         <![%standalone-ignore[See <xref linkend="dynamic-trace">
         for more information.]]>
-->
動的追跡ツールDTraceのサポートを有効にして<productname>PostgreSQL</productname>をコンパイルします。<![%standalone-ignore[より詳細な情報は<xref linkend="dynamic-trace">を参照してください。]]>
        </para>

        <para>
<!--
         To point to the <command>dtrace</command> program, the
         environment variable <envar>DTRACE</envar> can be set.  This
         will often be necessary because <command>dtrace</command> is
         typically installed under <filename>/usr/sbin</filename>,
         which might not be in the path.
-->
<command>dtrace</command>プログラムを指し示すために<envar>DTRACE</envar>環境変数を設定することができます。
<command>dtrace</command>は通常、検索パス内に存在しない可能性がある<filename>/usr/sbin</filename>以下にインストールされていますので、この設定はよく必要になります。
        </para>

        <para>
<!--
         Extra command-line options for the <command>dtrace</command> program
         can be specified in the environment variable
         <envar>DTRACEFLAGS</envar>.  On Solaris,
         to include DTrace support in a 64-bit binary, you must specify
         <literal>DTRACEFLAGS="-64"</> to configure.  For example,
         using the GCC compiler:
-->
         さらに<command>dtrace</command>プログラム用のコマンドラインオプションを<envar>DTRACEFLAGS</envar>環境変数で指定することができます。
Solarisで64ビットバイナリでDTraceをサポートするには、<literal>DTRACEFLAGS="-64"</>をconfigureに指定してください。
例えばGCCコンパイラを使用する場合は以下のようにします。
<screen>
./configure CC='gcc -m64' --enable-dtrace DTRACEFLAGS='-64' ...
</screen>
<!--
         Using Sun's compiler:
-->
Sunのコンパイラを使用する場合は以下のようにします。
<screen>
./configure CC='/opt/SUNWspro/bin/cc -xtarget=native64' --enable-dtrace DTRACEFLAGS='-64' ...
</screen>
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><option>--enable-tap-tests</option></term>
       <listitem>
        <para>
<!--
         Enable tests using the Perl TAP tools.  This requires a Perl
         installation and the Perl module <literal>IPC::Run</literal>.
         <![%standalone-ignore;[See <xref linkend="regress-tap"> for more information.]]>
-->
Perl TAPツールを使ったテストを有効にします。
これにはPerlのインストールとPerlモジュール<literal>IPC::Run</literal>が必要です。
<![%standalone-ignore;[詳細は<xref linkend="regress-tap">を参照してください。]]>
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>

    <para>
<!--
     If you prefer a C compiler different from the one
     <filename>configure</filename> picks, you can set the
     environment variable <envar>CC</> to the program of your choice.
     By default, <filename>configure</filename> will pick
     <filename>gcc</filename> if available, else the platform's
     default (usually <filename>cc</>).  Similarly, you can override the
     default compiler flags if needed with the <envar>CFLAGS</envar> variable.
-->
<filename>configure</filename>が選ぶものと違うCコンパイラを使いたいという場合には、<envar>CC</> 環境変数をその使用したいプログラムに設定することができます。
デフォルトでは、<filename>configure</filename>は利用できるのであれば<filename>gcc</filename>を、利用できなければプラットフォームのデフォルト（通常<filename>cc</>）を選択します。
同様に、デフォルトのコンパイラフラグは必要に応じて<envar>CFLAGS</envar>変数で上書きすることもできます。
    </para>

    <para>
<!--
     You can specify environment variables on the
     <filename>configure</filename> command line, for example:
-->
次のようにして、<filename>configure</filename>コマンドラインに環境変数を指定することができます。
<screen>
<userinput>./configure CC=/opt/bin/gcc CFLAGS='-O2 -pipe'</>
</screen>
    </para>

    <para>
<!--
     Here is a list of the significant variables that can be set in
     this manner:
-->
以下は、この方式で設定可能な重要な環境変数の一覧です。

     <variablelist>
      <varlistentry>
       <term><envar>BISON</envar></term>
       <listitem>
        <para>
<!--
         Bison program
-->
Bisonプログラム。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>CC</envar></term>
       <listitem>
        <para>
<!--
         C compiler
-->
Cコンパイラ。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>CFLAGS</envar></term>
       <listitem>
        <para>
<!--
         options to pass to the C compiler
-->
Cコンパイラに渡すオプション。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>CPP</envar></term>
       <listitem>
        <para>
<!--
         C preprocessor
-->
Cプリプロセッサ。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>CPPFLAGS</envar></term>
       <listitem>
        <para>
<!--
         options to pass to the C preprocessor
-->
Cプリプロセッサに渡すオプション。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>DTRACE</envar></term>
       <listitem>
        <para>
<!--
         location of the <command>dtrace</command> program
-->
<command>dtrace</command>プログラムの場所。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>DTRACEFLAGS</envar></term>
       <listitem>
        <para>
<!--
         options to pass to the <command>dtrace</command> program
-->
<command>dtrace</command>プログラムに渡すオプション。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>FLEX</envar></term>
       <listitem>
        <para>
<!--
         Flex program
-->
Flexプログラム。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>LDFLAGS</envar></term>
       <listitem>
        <para>
<!--
         options to use when linking either executables or shared libraries
-->
実行ファイルや共有ライブラリにリンクする場合に使用するオプション。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>LDFLAGS_EX</envar></term>
       <listitem>
        <para>
<!--
         additional options for linking executables only
-->
実行ファイルのリンク時のみに追加されるオプション。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>LDFLAGS_SL</envar></term>
       <listitem>
        <para>
<!--
         additional options for linking shared libraries only
-->
共有ライブラリのリンク時のみに追加されるオプション。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>MSGFMT</envar></term>
       <listitem>
        <para>
<!--
         <command>msgfmt</command> program for native language support
-->
多言語サポート（NLS）用の<command>msgfmt</command>プログラム。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>PERL</envar></term>
       <listitem>
        <para>
<!--
         Full path to the Perl interpreter.  This will be used to
         determine the dependencies for building PL/Perl.
-->
Perlインタプリタのフルパス。
これは、PL/Perl構築に関する依存性を決定するために使用されます。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>PYTHON</envar></term>
       <listitem>
        <para>
<!--
         Full path to the Python interpreter.  This will be used to
         determine the dependencies for building PL/Python.  Also,
         whether Python 2 or 3 is specified here (or otherwise
         implicitly chosen) determines which variant of the PL/Python
         language becomes available.  See
         <![%standalone-include[the <application>PL/Python</>
         documentation]]>
         <![%standalone-ignore[<xref linkend="plpython-python23">]]>
         for more information.

-->
Pythonインタプリタのフルパス。
これは、PL/Python構築に関する依存性を決定するために使用されます。またここでPython 2または3を指定するかどうかで(あるいは暗黙的に選択されます)、どちらのPL/Python言語が利用可能になるかも決まります。<![%standalone-include[<application>PL/Python</>文書]]><![%standalone-ignore[<xref linkend="plpython-python23">]]>を参照してください。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>TCLSH</envar></term>
       <listitem>
        <para>
<!--
         Full path to the Tcl interpreter.  This will be used to
         determine the dependencies for building PL/Tcl, and it will
         be substituted into Tcl scripts.
-->
Tclインタプリタのフルパスです。
これは、PL/Tcl構築に関する依存性を決定するために使用され、Tclスクリプト内を置き換えます。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><envar>XML2_CONFIG</envar></term>
       <listitem>
        <para>
<!--
         <command>xml2-config</command> program used to locate the
         libxml installation.
-->
libxmlインストレーションの場所を特定するために使用する<command>xml2-config</command>プログラムです。
        </para>
       </listitem>
      </varlistentry>

     </variablelist>
    </para>

    <note>
     <para>
<!--
      When developing code inside the server, it is recommended to
      use the configure options <option>&#045;-enable-cassert</> (which
      turns on many run-time error checks) and <option>&#045;-enable-debug</>
      (which improves the usefulness of debugging tools).
-->
      サーバ内部のコード開発を行う場合、<option>--enable-cassert</>(多数の実行時エラーチェックを有効にする)オプションと<option>--enable-debug</>(デバッグツールの利便性を向上させる)オプションの使用を推奨します。
     </para>

     <para>
<!--
      If using GCC, it is best to build with an optimization level of
      at least <option>-O1</>, because using no optimization
      (<option>-O0</>) disables some important compiler warnings (such
      as the use of uninitialized variables).  However, non-zero
      optimization levels can complicate debugging because stepping
      through compiled code will usually not match up one-to-one with
      source code lines.  If you get confused while trying to debug
      optimized code, recompile the specific files of interest with
      <option>-O0</>.  An easy way to do this is by passing an option
      to <application>make</>: <command>make PROFILE=-O0 file.o</>.
-->
      GCCを使う場合、少なくとも<option>-O1</>レベルの最適化で構築することがベストです。なぜなら、何の最適化もしない(<option>-O0</>) と、重要なコンパイル警告(初期化されていない変数の使用など)が無効になるからです。
      しかし、最適化を行うことでソースコードとコンパイルされたコードのステップは1対1とはならなくなるため、デバッグは複雑になるかもしれません。
      最適化されたコードのデバッグに悩まされてしまう場合は、関心のある特定のファイルに対して<option>-O0</>で再コンパイルしてください。
      これを実行するための簡単な方法は、<command>make PROFILE=-O0 file.o</>のように、<application>make</>経由でオプションを渡すことです。
     </para>
    </note>
   </step>

  <step id="build">
<!--
   <title>Build</title>
-->
<title>構築</title>

   <para>
<!--
    To start the build, type:
-->
構築作業を開始するには、以下を入力してください。
<screen>
<userinput>make</userinput>
</screen>
<!--
    (Remember to use <acronym>GNU</> <application>make</>.) The build
    will take a few minutes depending on your
    hardware. The last line displayed should be:
-->
（<acronym>GNU</> <application>make</>を使用することを忘れないでください。）
ハードウェアに依存しますが、構築作業には数分かかります。
最後に以下のような行が表示されるはずです。
<screen>
All of PostgreSQL is successfully made. Ready to install.
</screen>
   </para>

  <para>
<!--
   If you want to build everything that can be built, including the
   documentation (HTML and man pages), and the additional modules
   (<filename>contrib</filename>), type instead:
-->
もし、ドキュメント(HTMLやman)や追加モジュール(<filename>contrib</filename>)を含め、構築可能なもの全てを構築したい場合、次の様に実施します。
<screen>
<userinput>make world</userinput>
</screen>
<!--
   The last line displayed should be:
-->
最終行は次のように表示されるはずです。
<screen>
PostgreSQL, contrib and HTML documentation successfully made. Ready to install.
</screen>
   </para>
  </step>

  <step>
<!--
   <title>Regression Tests</title>
-->
<title>リグレッションテスト</title>

   <indexterm>
<!--
    <primary>regression test</primary>
-->
<primary>リグレッションテスト</primary>
   </indexterm>

   <para>
<!--
    If you want to test the newly built server before you install it,
    you can run the regression tests at this point. The regression
    tests are a test suite to verify that <productname>PostgreSQL</>
    runs on your machine in the way the developers expected it
    to. Type:
-->
インストールを行う前に、新しく構築したサーバをテストしたい場合、この時点でリグレッションテストを実行することができます。
リグレッションテストとは、使用するマシンにおいて<productname>PostgreSQL</>が、開発者の想定通りに動作することを検証するためのテストのまとまりです。
次のように入力します。
<screen>
<userinput>make check</userinput>
</screen>
<!--
    (This won't work as root; do it as an unprivileged user.)
    <![%standalone-include[The file
    <filename>src/test/regress/README</> and the
    documentation contain]]>
    <![%standalone-ignore[<xref linkend="regress"> contains]]>
    detailed information about interpreting the test results. You can
    repeat this test at any later time by issuing the same command.
-->
（これは root では動作しません。
非特権ユーザとして実行してください。）
 <![%standalone-include[<filename>src/test/regress/README</>ファイルと付属文書]]><![%standalone-ignore[<xref linkend="regress">]]>にはテスト結果の表示に関する詳しい情報があります。
同じコマンドを入力することで、後にいつでもテストを繰り返すことができます。
   </para>
  </step>

  <step id="install">
<!--
   <title>Installing the Files</title>
-->
   <title>ファイルのインストール</title>

   <note>
    <para>
<!--
     If you are upgrading an existing system be sure to read
     <![%standalone-include[the documentation,]]>
     <![%standalone-ignore[<xref linkend="upgrading">]]>
     which has instructions about upgrading a
     cluster.
-->
もし既存のシステムのアップグレードをする場合、DBクラスタのアップグレードの解説が記載されている<![%standalone-include[the documentation,]]> <![%standalone-ignore[<xref linkend="upgrading">]]>を参照してください。
    </para>
   </note>

   <para>
<!--
    To install <productname>PostgreSQL</> enter:
-->
<productname>PostgreSQL</>をインストールするには、以下を入力してください。
<screen>
<userinput>make install</userinput>
</screen>
<!--
    This will install files into the directories that were specified
    in <xref linkend="configure">. Make sure that you have appropriate
    permissions to write into that area. Normally you need to do this
    step as root. Alternatively, you can create the target
    directories in advance and arrange for appropriate permissions to
    be granted.
-->
これは、ファイルを<xref linkend="configure">で指定されたディレクトリにインストールします。
その領域に書き込むための権限を持っていることを確認してください。
通常はこのステップはrootで行う必要があります。
代わりに対象とするディレクトリを前もって作成し、適切に権限を調整することも可能です。
   </para>

   <para>
<!--
    To install the documentation (HTML and man pages), enter:
-->
ドキュメント(HTMLやman)をインストールするには、以下を入力して下さい。
<screen>
<userinput>make install-docs</userinput>
</screen>
   </para>

   <para>
<!--
    If you built the world above, type instead:
-->
先にすべてを(worldを付けて)構築していた場合には、代わりに以下を実行してください。
<screen>
<userinput>make install-world</userinput>
</screen>
<!--
    This also installs the documentation.
-->
これによりドキュメントもインストールされます。
   </para>

   <para>
<!--
    You can use <literal>make install-strip</literal> instead of
    <literal>make install</literal> to strip the executable files and
    libraries as they are installed.  This will save some space.  If
    you built with debugging support, stripping will effectively
    remove the debugging support, so it should only be done if
    debugging is no longer needed.  <literal>install-strip</literal>
    tries to do a reasonable job saving space, but it does not have
    perfect knowledge of how to strip every unneeded byte from an
    executable file, so if you want to save all the disk space you
    possibly can, you will have to do manual work.
-->
<literal>make install</literal>の代わりに<literal>make install-strip</literal>を使用することで、インストール時に実行可能ファイルやライブラリをストリップ（strip）することができます。
これにより、多少の容量を節約できます。  
デバッグをサポートするように構築している場合でも、ストリップするとデバッグのサポートは実質、除去されてしまいます。
したがって、これはデバッグが必要なくなった場合にのみ実行すべきです。
<literal>install-strip</literal>は容量を節約するために適切な作業を行おうとしますが、実行可能ファイルから全ての不必要なバイトを完全にストリップすることはできません。
可能な限りのディスク容量を全て節約したい場合は、手動で作業を行う必要があります。
   </para>

   <para>
<!--
    The standard installation provides all the header files needed for client
    application development as well as for server-side program
    development, such as custom functions or data types written in C.
    (Prior to <productname>PostgreSQL</> 8.0, a separate <literal>make
    install-all-headers</> command was needed for the latter, but this
    step has been folded into the standard install.)
-->
この標準的なインストール方法では、クライアントアプリケーションの開発に必要なヘッダファイルと、Cで独自の関数やデータ型を作成するといったサーバ側のプログラムの開発用のヘッダファイルが用意されます
（<productname>PostgreSQL</> 8.0より前まででは、後で別途<literal>make install-all-headers</>コマンドが必要でした。しかし、この手順は標準のインストールに含まれるようになりました）。
   </para>

   <formalpara>
<!--
    <title>Client-only installation:</title>
-->
<title>クライアント側のみのインストール：</title>
    <para>
<!--
     If you want to install only the client applications and
     interface libraries, then you can use these commands:
-->
クライアントアプリケーションとインタフェースライブラリのみをインストールしたい場合、下記のコマンドを使います。
<screen>
<userinput>make -C src/bin install</>
<userinput>make -C src/include install</>
<userinput>make -C src/interfaces install</>
<userinput>make -C doc install</>
</screen>
<!--
    <filename>src/bin</> has a few binaries for server-only use,
    but they are small.
-->
<filename>src/bin</>にはサーバ用の数個のバイナリがあります。これらは小さなものです。
    </para>
   </formalpara>
  </step>
  </procedure>

  <formalpara>
<!--
   <title>Uninstallation:</title>
-->
   <title>アンインストール：</title>
   <para>
<!--
    To undo the installation use the command <command>make
    uninstall</>. However, this will not remove any created directories.
-->
インストールを取り消すには、<command>make uninstall</> コマンドを使います。しかし、作成済みのディレクトリは削除されません。
   </para>
  </formalpara>

  <formalpara>
<!--
   <title>Cleaning:</title>
-->
<title>クリーニング：</title>

   <para>
<!--
    After the installation you can free disk space by removing the built
    files from the source tree with the command <command>make
    clean</>. This will preserve the files made by the <command>configure</command>
    program, so that you can rebuild everything with <command>make</>
    later on. To reset the source tree to the state in which it was
    distributed, use <command>make distclean</>. If you are going to
    build for several platforms within the same source tree you must do
    this and re-configure for each platform.  (Alternatively, use
    a separate build tree for each platform, so that the source tree
    remains unmodified.)
-->
インストールが終わったら、<command>make clean</> コマンドを使ってソースツリーから構築用のファイルを削除し、ディスク領域を解放することができます。
<command>configure</command>プログラムが作るファイルは保持されますので、後で<command>make</>コマンドですべてを再構築できます。
ソースツリーを配布された時の状態に戻したい場合は、<command>make distclean</>コマンドを使います。
同じソースツリー内で複数のプラットフォーム向けに構築する場合、これを実行して、それぞれのプラットフォームに対し再構成しなければなりません。
（または、未変更のソースツリーを維持するために、各プラットフォームで別々の構築用ツリーを使用してください。）
   </para>
  </formalpara>

  <para>
<!--
   If you perform a build and then discover that your <command>configure</>
   options were wrong, or if you change anything that <command>configure</>
   investigates (for example, software upgrades), then it's a good
   idea to do <command>make distclean</> before reconfiguring and
   rebuilding.  Without this, your changes in configuration choices
   might not propagate everywhere they need to.
-->
構築作業を行った後で<command>configure</command>用オプションが間違っていることに気付いた場合や、<command>configure</command>の調査結果に何らかの変更を加えた場合（例えば、ソフトウェアのアップグレードなど）、再設定と再構築の前に<command>make distclean</>を行うことをお勧めします。
さもないと、設定選択肢の変更は、必要なところ全てには反映されない可能性があります。
  </para>
 </sect1>

 <sect1 id="install-post">
<!--
  <title>Post-Installation Setup</title>
-->
<title>インストール後の設定作業</title>

  <sect2>
<!--
   <title>Shared Libraries</title>
-->
<title>共有ライブラリ</title>

   <indexterm>
<!--
    <primary>shared library</primary>
-->
<primary>共有ライブラリ</primary>
   </indexterm>

   <para>
<!--
    On some systems with shared libraries
    you need to tell the system how to find the newly installed
    shared libraries.  The systems on which this is
    <emphasis>not</emphasis> necessary include
    <systemitem class="osname">FreeBSD</>,
    <systemitem class="osname">HP-UX</>,
    <systemitem class="osname">Linux</>,
    <systemitem class="osname">NetBSD</>, <systemitem
    class="osname">OpenBSD</>, <systemitem class="osname">Tru64
    UNIX</> (formerly <systemitem class="osname">Digital UNIX</>), and
    <systemitem class="osname">Solaris</>.
-->
共有ライブラリを持つ何らかのシステムの中には、新しくインストールされた共有ライブラリを探す場所をシステムに通知する必要があるものがあります。
これが必要では<emphasis>ない</emphasis>システムは<systemitem class="osname">FreeBSD</>、<systemitem class="osname">HP-UX</>、<systemitem class="osname">Linux</>、<systemitem class="osname">NetBSD</>、<systemitem class="osname">OpenBSD</>、<systemitem class="osname">Tru64 UNIX</>（以前は<systemitem class="osname">Digital UNIX</>）、および<systemitem class="osname">Solaris</>です。
   </para>

   <para>
<!--
    The method to set the shared library search path varies between
    platforms, but the most widely-used method is to set the
    environment variable <envar>LD_LIBRARY_PATH</> like so: In Bourne
    shells (<command>sh</>, <command>ksh</>, <command>bash</>, <command>zsh</>):
-->
共有ライブラリの検索パスを設定する方法は、プラットフォームによって異なります。
しかし、最もよく使用される方法は<envar>LD_LIBRARY_PATH</>といった環境変数を以下のように設定することです。
Bourne シェル（<command>sh</>、<command>ksh</>、<command>bash</>、<command>zsh</>）では、
<programlisting>
LD_LIBRARY_PATH=/usr/local/pgsql/lib
export LD_LIBRARY_PATH
</programlisting>
<!--
    or in <command>csh</> or <command>tcsh</>:
-->
<command>csh</>または<command>tcsh</>では、以下のように設定します。
<programlisting>
setenv LD_LIBRARY_PATH /usr/local/pgsql/lib
</programlisting>
<!--
    Replace <literal>/usr/local/pgsql/lib</> with whatever you set
    <option><literal>&#045;&#045;libdir</></> to in <xref linkend="configure">.
    You should put these commands into a shell start-up file such as
    <filename>/etc/profile</> or <filename>~/.bash_profile</>.  Some
    good information about the caveats associated with this method can
    be found at <ulink
    url="http://xahlee.org/UnixResource_dir/_/ldpath.html"></ulink>.
-->
<literal>/usr/local/pgsql/lib</>は<xref linkend="configure">で<option><literal>--libdir</></>に設定したものに置き換えてください。
<filename>/etc/profile</>や<filename>~/.bash_profile</>といったシェルの起動ファイルにこれらのコマンドを追加してください。
この方法に関する警告についての優れた情報が<ulink url="http://xahlee.org/UnixResource_dir/_/ldpath.html"></ulink>にあります。
   </para>

   <para>
<!--
    On some systems it might be preferable to set the environment
    variable <envar>LD_RUN_PATH</envar> <emphasis>before</emphasis>
    building.
-->
システムによっては、構築作業の<emphasis>前</emphasis>に<envar>LD_RUN_PATH</envar>環境変数を設定した方が良い場合があります。
   </para>

   <para>
<!--
    On <systemitem class="osname">Cygwin</systemitem>, put the library
    directory in the <envar>PATH</envar> or move the
    <filename>.dll</filename> files into the <filename>bin</filename>
    directory.
-->
<systemitem class="osname">Cygwin</systemitem>では、ライブラリディレクトリを<envar>PATH</envar>に追加するか、<filename>.dll</filename>ファイルを<filename>bin/</filename>ディレクトリに移動します。
   </para>

   <para>
<!--
    If in doubt, refer to the manual pages of your system (perhaps
    <command>ld.so</command> or <command>rld</command>). If you later
    get a message like:
-->
もし確信が持てない場合は、システムのマニュアルページ（おそらく<command>ld.so</command>か<command>rld</command>）を参照してください。
もし後に下記のようなメッセージが出たら、このステップが必要だったということです。
<screen>
psql: error in loading shared libraries
libpq.so.2.1: cannot open shared object file: No such file or directory
</screen>
<!--
    then this step was necessary.  Simply take care of it then.
-->
この場合は処置を行ってください。
   </para>

   <para>
    <indexterm>
     <primary>ldconfig</primary>
    </indexterm>
<!--
    If you are on <systemitem class="osname">Linux</> and you have root
    access, you can run:
-->
もし<systemitem class="osname">Linux</>を使用していて、root権限があれば、
<programlisting>
/sbin/ldconfig /usr/local/pgsql/lib
</programlisting>
<!--
    (or equivalent directory) after installation to enable the
    run-time linker to find the shared libraries faster.  Refer to the
    manual page of <command>ldconfig</> for more information.  On
    <systemitem class="osname">FreeBSD</>, <systemitem
    class="osname">NetBSD</>, and <systemitem
    class="osname">OpenBSD</> the command is:
-->
（または同等のディレクトリ）をインストール後に実行して、実行時リンカが共有ライブラリを素早く検索できるようにできます。
より詳細については<command>ldconfig</>のマニュアルページを参照してください。
<systemitem class="osname">FreeBSD</>、<systemitem class="osname">NetBSD</>および<systemitem class="osname">OpenBSD</>の場合のコマンドは以下の通りです。 
<programlisting>
/sbin/ldconfig -m /usr/local/pgsql/lib
</programlisting>
<!--
    instead.  Other systems are not known to have an equivalent
    command.
-->
同様なコマンドを持つ他のシステムは知られていません。
   </para>
  </sect2>

  <sect2>
<!--
   <title>Environment Variables</title>
-->
<title>環境変数</title>

   <indexterm>
    <primary><envar>PATH</envar></primary>
   </indexterm>

   <para>
<!--
    If you installed into <filename>/usr/local/pgsql</> or some other
    location that is not searched for programs by default, you should
    add <filename>/usr/local/pgsql/bin</> (or whatever you set
    <option><literal>&#045;&#045;bindir</></> to in <xref linkend="configure">)
    into your <envar>PATH</>.  Strictly speaking, this is not
    necessary, but it will make the use of <productname>PostgreSQL</>
    much more convenient.
-->
もし<filename>/usr/local/pgsql</>か、もしくはデフォルトでプログラムが検索されない場所にインストールした場合、<filename>/usr/local/pgsql/bin</>（もしくは<xref linkend="configure">で<option><literal>--bindir</></>に設定した場所）を<envar>PATH</>に追加する必要があります。  
厳密に言えば、これは必要ではありません。
しかし、これによって<productname>PostgreSQL</>の使用がずっと便利になります。
   </para>

   <para>
<!--
    To do this, add the following to your shell start-up file, such as
    <filename>~/.bash_profile</> (or <filename>/etc/profile</>, if you
    want it to affect all users):
-->
これを行うためには、以下を<filename>~/.bash_profile</>（もしくは、もし全てのユーザに反映したい場合は<filename>/etc/profile</>）のようなシェルの起動ファイルに追加してください。
<programlisting>
PATH=/usr/local/pgsql/bin:$PATH
export PATH
</programlisting>
<!--
    If you are using <command>csh</> or <command>tcsh</>, then use this command:
-->
<command>csh</>や<command>tcsh</>を使用している場合は、以下のコマンドを使用してください。
<programlisting>
set path = ( /usr/local/pgsql/bin $path )
</programlisting>
   </para>

   <para>
    <indexterm>
     <primary><envar>MANPATH</envar></primary>
    </indexterm>
<!--
    To enable your system to find the <application>man</>
    documentation, you need to add lines like the following to a
    shell start-up file unless you installed into a location that is
    searched by default:
-->
デフォルトで検索される場所にインストールした場合を除き、システムが<application>man</>ドキュメントを検索できるようにするためには、以下の行をシェルの起動ファイルに追加する必要があります。
<programlisting>
MANPATH=/usr/local/pgsql/man:$MANPATH
export MANPATH
</programlisting>
   </para>

   <para>
<!--
    The environment variables <envar>PGHOST</> and <envar>PGPORT</>
    specify to client applications the host and port of the database
    server, overriding the compiled-in defaults. If you are going to
    run client applications remotely then it is convenient if every
    user that plans to use the database sets <envar>PGHOST</>.  This
    is not required, however; the settings can be communicated via command
    line options to most client programs.
-->
環境変数<envar>PGHOST</>と<envar>PGPORT</>は、クライアントアプリケーションにデータベースサーバのホストとポートを指定し、コンパイル時に決定されたデフォルト値を無効にします。
クライアントアプリケーションをリモートで実行する場合、データベースを使用する予定の全てのユーザが<envar>PGHOST</>を設定していると便利です。
しかしこれは必須ではありません。
この設定は、ほとんどのクライアントプログラムのコマンドラインオプションでも設定することができます。
   </para>
  </sect2>
 </sect1>


<![%standalone-include;[
 <sect1 id="install-getting-started">
<!--
  <title>Getting Started</title>
-->
<title>さあ始めましょう</title>

  <para>
<!--
   The following is a quick summary of how to get <productname>PostgreSQL</> up and
   running once installed. The main documentation contains more information.
-->
ここから、インストールした<productname>PostgreSQL</>を起動させる方法を簡単に示します。本書の他の部分にはもっと多くの情報が載っています。
  </para>

  <procedure>
   <step>
    <para>
<!--
     Create a user account for the <productname>PostgreSQL</>
     server. This is the user the server will run as. For production
     use you should create a separate, unprivileged account
     (<quote>postgres</> is commonly used). If you do not have root
     access or just want to play around, your own user account is
     enough, but running the server as root is a security risk and
     will not work.
-->
<productname>PostgreSQL</>サーバのためのユーザアカウントを作成します。
これはサーバを実行するユーザです。
稼働用には別途、非特権のアカウントを作成すべきです（一般的には<quote>postgres</>が使われます）。
もしroot権限を持たない場合、もしくは、ただ試してみたいという場合は、自分自身のユーザアカウントで十分ですが、サーバをrootで起動することは安全性に問題があるため実行できません。
<screen>
<userinput>adduser postgres</>
</screen>
    </para>
   </step>

   <step>
    <para>
<!--
     Create a database installation with the <command>initdb</>
     command. To run <command>initdb</> you must be logged in to your
     <productname>PostgreSQL</> server account. It will not work as
     root.
-->
<command>initdb</>コマンドでデータベースインストレーションを作成します。
<command>initdb</>を実行するためには、<productname>PostgreSQL</>サーバアカウントでログインしていなければいけません。
rootでは実行できません。
<screen>
root# <userinput>mkdir /usr/local/pgsql/data</>
root# <userinput>chown postgres /usr/local/pgsql/data</>
root# <userinput>su - postgres</>
postgres$ <userinput>/usr/local/pgsql/bin/initdb -D /usr/local/pgsql/data</>
</screen>
    </para>

    <para>
<!--
     The <option>-D</> option specifies the location where the data
     will be stored. You can use any path you want, it does not have
     to be under the installation directory. Just make sure that the
     server account can write to the directory (or create it, if it
     doesn't already exist) before starting <command>initdb</>, as
     illustrated here.
-->
<option>-D</>オプションは、データが格納される場所を指定します。
インストールディレクトリの下である必要はなく、どのパスを使っても問題ありません。
ただし、<command>initdb</>を実行する前に、ここで示されているような方法で、サーバアカウントがそのディレクトリに書き込み（もしくは、まだ作られていない場合は作成）できることだけは確認してください。
    </para>
   </step>

   <step>
    <para>
<!--
     At this point, if you did not use the <command>initdb</> <literal>-A</>
     option, you might want to modify <filename>pg_hba.conf</> to control
     local access to the server before you start it.  The default is to
     trust all local users.
-->
この時点で、<command>initdb</>の<literal>-A</>オプションを使用していない場合、起動する前にサーバへのローカルアクセスを制限するために<filename>pg_hba.conf</>を編集した方がよいでしょう。
デフォルトではすべてのローカルユーザを信頼します。
    </para>
   </step>

   <step>
    <para>
<!--
     The previous <command>initdb</> step should have told you how to
     start up the database server. Do so now. The command should look
     something like:
-->
上記<command>initdb</>の段階で、データベースサーバの起動方法がわかったと思います。
ここでそれを実行してください。
コマンドは下記のようになるはずです。
<programlisting>
/usr/local/pgsql/bin/postgres -D /usr/local/pgsql/data
</programlisting>
<!--
     This will start the server in the foreground. To put the server
     in the background use something like:
-->
これはサーバをフォアグラウンドで起動します。
サーバをバックグラウンドにする場合は下記のようになります。
<programlisting>
nohup /usr/local/pgsql/bin/postgres -D /usr/local/pgsql/data \
    &lt;/dev/null &gt;&gt;server.log 2&gt;&amp;1 &lt;/dev/null &amp;
</programlisting>
    </para>

    <para>
<!--
     To stop a server running in the background you can type:
-->
バックグラウンドで動いているサーバを停止するためには下記のように入力することができます。
<programlisting>
kill `cat /usr/local/pgsql/data/postmaster.pid`
</programlisting>
    </para>

   </step>

   <step>
    <para>
<!--
     Create a database:
-->
データベースを作成します。
<screen>
<userinput>createdb testdb</>
</screen>
<!--
     Then enter:
-->
そしてそのデータベースに接続するために
<screen>
<userinput>psql testdb</>
</screen>
<!--
     to connect to that database. At the prompt you can enter SQL
     commands and start experimenting.
-->
と入力します。
プロンプトが出たらSQLコマンドを入力することができますので、いろいろ試すことができます。
    </para>
   </step>
  </procedure>
 </sect1>

 <sect1 id="install-whatnow">
<!--
  <title>What Now?</title>
-->
<title>次は?</title>

  <para>
   <itemizedlist>
    <listitem>
     <para>
<!--
      The <productname>PostgreSQL</> distribution contains a
      comprehensive documentation set, which you should read sometime.
      After installation, the documentation can be accessed by
      pointing your browser to
      <filename>/usr/local/pgsql/doc/html/index.html</>, unless you
      changed the installation directories.
-->
<productname>PostgreSQL</>配布物には、広範な文書群があります。
折に触れて参照することになるでしょう。
インストールディレクトリを変更していない限り、インストールの後、ブラウザを使用して、<filename>/usr/local/pgsql/doc/html/index.html</>にアクセスすることで、このドキュメントを参照することができます。
     </para>

     <para>
<!--
      The first few chapters of the main documentation are the Tutorial,
      which should be your first reading if you are completely new to
      <acronym>SQL</> databases.  If you are familiar with database
      concepts then you want to proceed with part on server
      administration, which contains information about how to set up
      the database server, database users, and authentication.
-->
文書の先頭の数章は、チュートリアルです。もし<acronym>SQL</>データベースに触れるのがまったく初めてという場合はこちらを初めに読むとよいでしょう。
データベースの概念がわかっているのであれば、データベースサーバ、データベースユーザ、認証の設定方法についての情報が説明されている、サーバ管理の部分に進んでください。
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      Usually, you will want to modify your computer so that it will
      automatically start the database server whenever it boots. Some
      suggestions for this are in the documentation.
-->
通常は、コンピュータが起動する際にデータベースサーバが自動的に開始されるように変更しておいた方が良いでしょう。そのための提案は文書内にいくつか書かれています。
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      Run the regression tests against the installed server (using
      <command>make installcheck</command>). If you didn't run the
      tests before installation, you should definitely do it now. This
      is also explained in the documentation.
-->
インストールされたサーバで、リグレッションテストを行ってください（<command>make installcheck</command>を使います）。
もしインストール前にこのテストを実行しなかった場合、ここで必ずするべきです。
これも文書の中で説明されています。
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      By default, <productname>PostgreSQL</> is configured to run on
      minimal hardware.  This allows it to start up with almost any
      hardware configuration. The default configuration is, however,
      not designed for optimum performance. To achieve optimum
      performance, several server parameters must be adjusted, the two
      most common being <varname>shared_buffers</varname> and
      <varname>work_mem</varname>.
      Other parameters mentioned in the documentation also affect
      performance.
-->
デフォルトで、<productname>PostgreSQL</>は最低限のハードウェアで動作するよう設定されます。
これにより、ほぼ全てのハードウェア設定で起動することができます。
しかし、デフォルトの設定は最適な性能を目的としていません。
最適な性能を実現するために、複数のサーバパラメータを調整しなければなりません。
<varname>shared_buffers</varname>と<varname>work_mem</varname>は最も一般的なものです。
本書で説明する他のパラメータも性能に影響します。
     </para>
    </listitem>
   </itemizedlist>
  </para>
 </sect1>
]]>


 <sect1 id="supported-platforms">
<!--
  <title>Supported Platforms</title>
-->
<title>サポートされるプラットフォーム</title>

  <para>
<!--
   A platform (that is, a CPU architecture and operating system combination)
   is considered supported by the <productname>PostgreSQL</> development
   community if the code contains provisions to work on that platform and
   it has recently been verified to build and pass its regression tests
   on that platform.  Currently, most testing of platform compatibility
   is done automatically by test machines in the
   <ulink url="http://buildfarm.postgresql.org/">PostgreSQL Build Farm</ulink>.
   If you are interested in using <productname>PostgreSQL</> on a platform
   that is not represented in the build farm, but on which the code works
   or can be made to work, you are strongly encouraged to set up a build
   farm member machine so that continued compatibility can be assured.
-->
プラットフォーム（CPUアーキテクチャとオペレーティングシステムの組合せ）は、そのプラットフォーム上で動作する仕組みがコード内に存在し、かつ、そのプラットフォーム上で構築およびリグレッション試験に合格することが最近検証できた場合に、<productname>PostgreSQL</>開発者コミュニティによってサポートされたものとみなされます。
現在、プラットフォームの互換性に関するほとんどの試験は<ulink url="http://buildfarm.postgresql.org/">PostgreSQLビルドファーム</ulink>中の試験マシンによって自動的に行われます。
ビルドファームに存在しないが、コードが動作するあるいは動作させることができたプラットフォームにおける<productname>PostgreSQL</>の使用に興味のあるかたは、継続した互換性を確実にするために、ビルドファームのメンバマシンとして設定することを強く勧めます。
  </para>

  <para>
<!--
   In general, <productname>PostgreSQL</> can be expected to work on
   these CPU architectures: x86, x86_64, IA64, PowerPC,
   PowerPC 64, S/390, S/390x, Sparc, Sparc 64, Alpha, ARM, MIPS, MIPSEL, M68K,
   and PA-RISC.  Code support exists for M32R and VAX, but these
   architectures are not known to have been tested recently.  It is often
   possible to build on an unsupported CPU type by configuring with
   <option>&#045;&#045;disable-spinlocks</option>, but performance will be poor.
-->
一般的に、<productname>PostgreSQL</>は、次のCPUアーキテクチャで動作することを期待できます。
x86, x86_64, IA64, PowerPC, PowerPC 64, S/390, S/390x, Sparc, Sparc 64, Alpha, ARM, MIPS, MIPSEL, M68K,PA-RISC。
M32R、VAXをサポートするコードは存在しますが、これらのアーキテクチャで試験が行われたという報告は最近ありません。
<option>--disable-spinlocks</option>を付けることで、未サポートの種類のCPUでも構築することがしばしばできますが、性能は低下します。
  </para>

  <para>
<!--
   <productname>PostgreSQL</> can be expected to work on these operating
   systems: Linux (all recent distributions), Windows (Win2000 SP4 and later),
   FreeBSD, OpenBSD, NetBSD, OS X, AIX, HP/UX, Solaris, Tru64 Unix,
   and UnixWare.  Other Unix-like systems may also work but are not currently
   being tested.  In most cases, all CPU architectures supported by
   a given operating system will work.  Look in
   the <xref linkend="installation-platform-notes"> below to see if
   there is information
   specific to your operating system, particularly if using an older system.
-->
<productname>PostgreSQL</>は次のオペレーティングシステムで動作することを期待できます。
Linux (最近のディストリビューションすべて), Windows (Win2000 SP4以降), FreeBSD, OpenBSD, NetBSD, OS X, AIX, HP/UX, Solaris, Tru64 Unix, UnixWare。
他のUnixに似たシステムでも動作するかもしれませんが、最近試験されていません。
ほとんどの場合、指定されたオペレーティングシステムでサポートされるCPUアーキテクチャはすべて動作するでしょう。
特に古めのシステムを使用している場合、以下の<xref linkend="installation-platform-notes">を参照し、使用するオペレーティングシステム固有の情報がないか確認してください。
  </para>

  <para>
<!--
   If you have installation problems on a platform that is known
   to be supported according to recent build farm results, please report
   it to <email>pgsql-bugs@postgresql.org</email>.  If you are interested
   in porting <productname>PostgreSQL</> to a new platform,
   <email>pgsql-hackers@postgresql.org</email> is the appropriate place
   to discuss that.
-->
最近のビルドファームの結果でサポートしているものとされているプラットフォームでインストールに問題があった場合は、<email>pgsql-bugs@postgresql.org</email>に報告してください。
新しいプラットフォームへの<productname>PostgreSQL</>の移植に興味があるのならば、<email>pgsql-hackers@postgresql.org</email>がその議論に適しています。
  </para>
 </sect1>

 <sect1 id="installation-platform-notes">
<!--
  <title>Platform-specific Notes</title>
-->
  <title>プラットフォーム特有の覚書</title>

  <para>
<!--
   This section documents additional platform-specific issues
   regarding the installation and setup of PostgreSQL.  Be sure to
   read the installation instructions, and in
   particular <xref linkend="install-requirements"> as well.  Also,
   check <![%standalone-include[the
   file <filename>src/test/regress/README</> and the documentation]]>
   <![%standalone-ignore[<xref linkend="regress">]]> regarding the
   interpretation of regression test results.
-->
本節はPostgreSQLのインストールと設定に関する追加のプラットフォーム固有の問題について説明します。
インストール手順、特に<xref linkend="install-requirements">を注意して読んでください。
またリグレッション試験結果の解釈については<![%standalone-include[<filename>src/test/regress/README</>ファイルと文書]]><![%standalone-ignore[<xref linkend="regress">]]>を確認してください。
  </para>

  <para>
<!--
   Platforms that are not covered here have no known platform-specific
   installation issues.
-->
   ここで触れられていないプラットフォームは、インストールに関してプラットフォーム特有の問題がありません。
  </para>

  <sect2 id="installation-notes-aix">
   <title>AIX</title>

   <indexterm zone="installation-notes-aix">
    <primary>AIX</primary>
<!--
    <secondary>installation on</secondary>
-->
    <secondary>上へのインストール</secondary>
   </indexterm>

   <para>
<!--
    PostgreSQL works on AIX, but getting it installed properly can be
    challenging.  AIX versions from 4.3.3 to 6.1 are considered supported.
    You can use GCC or the native IBM compiler <command>xlc</command>.  In
    general, using recent versions of AIX and PostgreSQL helps.  Check
    the build farm for up to date information about which versions of
    AIX are known to work.
-->
AIX上でPostgreSQLは動作しますが、適切にインストールをやり遂げるのは挑戦でもあります。
AIXバージョン4.3.3から6.1はサポートされていると考えられます。
GCCまたは在来のIBMコンパイラ<command>xlc</command>が使用できます。
一般的に、最新のAIXとPostgreSQLバージョンを使用することが手助けになります。
どのバージョンのAIXが動くと知られているかについての最新情報をビルドファームで見てください。
   </para>

   <para>
<!--
    The minimum recommended fix levels for supported AIX versions are:
-->
    サポートされるAIXバージョンに対する最低限推奨される修正レベルを示します。
   </para>

   <variablelist>
    <varlistentry>
     <term>AIX 4.3.3</term>
<!--
     <listitem><para>Maintenance Level 11 + post ML11 bundle</para></listitem>
-->
     <listitem><para>保守レベル 11 + ML11 バンドル以降</para></listitem>
    </varlistentry>

    <varlistentry>
     <term>AIX 5.1</term>
<!--
     <listitem><para>Maintenance Level 9 + post ML9 bundle</para></listitem>
-->
     <listitem><para>保守レベル 9 + ML9 バンドル以降</para></listitem>
    </varlistentry>

    <varlistentry>
     <term>AIX 5.2</term>
<!--
     <listitem><para>Technology Level 10 Service Pack 3</para></listitem>
-->
     <listitem><para>技術レベル 10 サービスパック 3</para></listitem>
    </varlistentry>

    <varlistentry>
     <term>AIX 5.3</term>
<!--
     <listitem><para>Technology Level 7</para></listitem>
-->
     <listitem><para>技術レベル 7</para></listitem>
    </varlistentry>

    <varlistentry>
     <term>AIX 6.1</term>
<!--
     <listitem><para>Base Level</para></listitem>
-->
     <listitem><para>基本レベル</para></listitem>
    </varlistentry>
   </variablelist>

   <para>
<!--
    To check your current fix level, use
    <command>oslevel -r</command> in AIX 4.3.3 to AIX 5.2 ML 7, or
    <command>oslevel -s</command> in later versions.
-->
使用している修正レベルをチェックするには、AIX 4.3.3 から AIX 5.2 ML 7 までは<command>oslevel -r</command>、またはそれ以降のバージョンでは<command>oslevel -s</command>を使用します。
   </para>

   <para>
<!--
    Use the following <command>configure</command> flags in addition
    to your own if you have installed Readline or libz in
    <literal>/usr/local</>:
    <literal>&#045;&#045;with-includes=/usr/local/include
    &#045;&#045;with-libraries=/usr/local/lib</literal>.
-->
もし、<literal>/usr/local</>にインストール済のreadlineやライブラリがある場合は、次の<command>configure</command>フラグを加えて下さい。
    <literal>--with-includes=/usr/local/include
    --with-libraries=/usr/local/lib</literal>
   </para>

   <sect3>
<!--
    <title>GCC Issues</title>
-->
    <title>GCCの問題</title>

    <para>
<!--
     On AIX 5.3, there have been some problems getting PostgreSQL to
     compile and run using GCC.
-->
AIX 5.3でGCCを使ってPostgreSQLがコンパイルし実行するためには幾つかの問題点があります。
    </para>

    <para>
<!--
     You will want to use a version of GCC subsequent to 3.3.2,
     particularly if you use a prepackaged version.  We had good
     success with 4.0.1.  Problems with earlier versions seem to have
     more to do with the way IBM packaged GCC than with actual issues
     with GCC, so that if you compile GCC yourself, you might well
     have success with an earlier version of GCC.
-->
特にパッケージ版を使用している場合、3.3.2以降のバージョンのGCCの使用が望まれるかもしれません。
4.0.1ではうまくいきます。
より早期のバージョンによる諸問題は、GCC自体の問題というよりもIBMがGCCをパッケージした方法に関連があるように見えます。従って、GCCを自身でコンパイルしている場合は、早期のバージョンのGCCを使用しても成功するかもしれません。
    </para>
   </sect3>

   <sect3>
<!--
    <title>Unix-Domain Sockets Broken</title>
-->
    <title>Unixドメインソケット破損</title>

    <para>
<!--
     AIX 5.3 has a problem
     where <structname>sockaddr_storage</structname> is not defined to
     be large enough.  In version 5.3, IBM increased the size of
     <structname>sockaddr_un</structname>, the address structure for
     Unix-domain sockets, but did not correspondingly increase the
     size of <structname>sockaddr_storage</structname>.  The result of
     this is that attempts to use Unix-domain sockets with PostgreSQL
     lead to libpq overflowing the data structure.  TCP/IP connections
     work OK, but not Unix-domain sockets, which prevents the
     regression tests from working.
-->
AIX 5.3には<structname>sockaddr_storage</structname>が十分大きく定義されていないという問題があります。
バージョン5.3でIBMはUnixドメインソケットのアドレス構造体である<structname>sockaddr_un</structname>のサイズを増やしましたが、対応する<structname>sockaddr_storage</structname>のサイズを増やしませんでした。
この結果、PostgreSQLでUnixドメインソケットを使用しようとすると、libpqでデータ構造体がオーバーフローするようになります。
Unixドメインソケットを除くTCP/IP接続の動作は正常です。
これはリグレッションテストの動作を妨害します。
    </para>

    <para>
<!--
     The problem was reported to IBM, and is recorded as bug report
     PMR29657.  If you upgrade to maintenance level 5300-03 or later,
     that will include this fix.  A quick workaround
     is to alter <symbol>_SS_MAXSIZE</symbol> to 1025 in
     <filename>/usr/include/sys/socket.h</filename>.  In either case,
     recompile PostgreSQL once you have the corrected header file.
-->
この問題はIBMに報告済みでバグ報告PMR29657として記録されています。
メンテナンスレベル5300-03以降に更新していれば、この修正が含まれています。
すぐに解決させたければ、<filename>/usr/include/sys/socket.h</filename>内で<symbol>_SS_MAXSIZE</symbol>を1025に変更してください。
どちらの場合でも、ヘッダファイルを修正した後でPostgreSQLを再コンパイルしてください。
     
    </para>
   </sect3>

   <sect3>
<!--
    <title>Internet Address Issues</title>
-->
    <title>インターネットアドレス問題</title>

    <para>
<!--
     PostgreSQL relies on the system's <function>getaddrinfo</> function
     to parse IP addresses in <varname>listen_addresses</>,
     <filename>pg_hba.conf</>, etc.  Older versions of AIX have assorted
     bugs in this function.  If you have problems related to these settings,
     updating to the appropriate AIX fix level shown above
     should take care of it.
-->
PostgreSQLは<varname>listen_addresses</>、<filename>pg_hba.conf</>、その他の中のIPアドレスを構文解釈するのにシステムの<function>getaddrinfo</>関数に頼ります。
旧バージョンのAIXにはこの関数にさまざまなバグがあります。
これら設定に関係した問題に遭遇した場合、上記に示されている適切な修正レベルへ更新することが問題解決になります。
    </para>

    <!-- 原文コメント http://archives.postgresql.org/message-id/6064jt6cfm.fsf_-_@dba2.int.libertyrms.com -->

    <para>
<!--
     One user reports:
-->
あるユーザの報告です。
    </para>

    <para>
<!--
     When implementing PostgreSQL version 8.1 on AIX 5.3, we
     periodically ran into problems where the statistics collector
     would <quote>mysteriously</quote> not come up successfully.  This
     appears to be the result of unexpected behavior in the IPv6
     implementation.  It looks like PostgreSQL and IPv6 do not play
     very well together on AIX 5.3.
-->
PostgreSQLバージョン8.1をAIX 5.3で実装している時、統計情報コレクタが<quote>不思議なことに</quote>正常に起動しないという問題が周期的に起こりました。
これは、IPv6の実装における想定外の動作という結果で出現します。
そのため、AIX5.3上ではPostgreSQLとIPv6が一緒にはうまく動作しないように見えました。
    </para>

    <para>
<!--
     Any of the following actions <quote>fix</quote> the problem.
-->
以下のいずれかの対応でこの問題が<quote>解決できます</quote>。
     <itemizedlist>
      <listitem>
       <para>
<!--
        Delete the IPv6 address for localhost:
-->
localhostに対するIPv6アドレスを削除します。
<screen>
(as root)
# ifconfig lo0 inet6 ::1/0 delete
</screen>
       </para>
      </listitem>

      <listitem>
       <para>
<!--
        Remove IPv6 from net services.  The
        file <filename>/etc/netsvc.conf</filename> on AIX is roughly
        equivalent to <filename>/etc/nsswitch.conf</filename> on
        Solaris/Linux.  The default, on AIX, is thus:
-->
ネットサービスからIPv6を削除します。
AIXの<filename>/etc/netsvc.conf</filename>ファイルは大まかに言ってSolaris/Linuxの<filename>/etc/nsswitch.conf</filename>と同等です。
AIXのデフォルトは、以下のようになっています。
<programlisting>
hosts=local,bind
</programlisting>
<!--
        Replace this with:
-->
これを次で置き換えます。
<programlisting>
hosts=local4,bind4
</programlisting>
<!--
        to deactivate searching for IPv6 addresses.
-->
そうすると、IPv6アドレスの検索が解除されます。
       </para>
      </listitem>
     </itemizedlist>
    </para>

    <warning>
    <para>
<!--
     This is really a workaround for problems relating
     to immaturity of IPv6 support, which improved visibly during the
     course of AIX 5.3 releases.  It has worked with AIX version 5.3,
     but does not represent an elegant solution to the problem.  It has
     been reported that this workaround is not only unnecessary, but
     causes problems on AIX 6.1, where IPv6 support has become more mature.
-->
これは、実際には未熟なIPv6サポートに関連する問題の回避策です。AIX5.3のリリースから、IPv6サポートが目に見えて改善されています。
この回避策はAIX5.3上で動きはしますが、この問題に対しての良い解決方法ではありません。
AIX6.1ではIPv6サポートがさらに改善されたため、この対策は不必要になっただけでなく、問題を引き起こすことが報告されています。
    </para>
    </warning>

   </sect3>

   <sect3>
<!--
    <title>Memory Management</title>
-->
    <title>メモリ管理</title>
    <!-- http://archives.postgresql.org/message-id/603bgqmpl9.fsf@dba2.int.libertyrms.com -->

    <para>
<!--
     AIX can be somewhat peculiar with regards to the way it does
     memory management.  You can have a server with many multiples of
     gigabytes of RAM free, but still get out of memory or address
     space errors when running applications.  One example
     is <command>createlang</command> failing with unusual errors.
     For example, running as the owner of the PostgreSQL installation:
-->
AIXはメモリ管理手法の観点から見ると多少独特です。
ギガバイト単位のRAMが空いているサーバがあっても、アプリケーションを実行している時にメモリ不足やアドレス空間エラーが発生することがあります。
こうした例の1つが、見慣れないエラーによる<command>createlang</command>の失敗です。
例えば、PostgreSQLインストレーションの所有者として実行してみます。
<screen>
-bash-3.00$ createlang plperl template1
createlang: language installation failed: ERROR:  could not load library "/opt/dbs/pgsql748/lib/plperl.so": A memory address is not in the address space for the process.
</screen>
<!--
    Running as a non-owner in the group possessing the PostgreSQL
    installation:
-->
PostgreSQLインストレーションの処理グループ内の所有者以外として実行してみます。
<screen>
-bash-3.00$ createlang plperl template1
createlang: language installation failed: ERROR:  could not load library "/opt/dbs/pgsql748/lib/plperl.so": Bad address
</screen>
<!--
     Another example is out of memory errors in the PostgreSQL server
     logs, with every memory allocation near or greater than 256 MB
     failing.
-->
他の実例は、PostgreSQLサーバログ中のメモリ不足エラーで、256 MB以上もしくはその近辺で全てのメモリ割り当てが失敗します。
    </para>

    <para>
<!--
     The overall cause of all these problems is the default bittedness
     and memory model used by the server process.  By default, all
     binaries built on AIX are 32-bit.  This does not depend upon
     hardware type or kernel in use.  These 32-bit processes are
     limited to 4 GB of memory laid out in 256 MB segments using one
     of a few models.  The default allows for less than 256 MB in the
     heap as it shares a single segment with the stack.
-->
これら問題のすべての総合原因は、サーバプロセスで使用されるデフォルトのビット割当とメモリモデルです。
デフォルトでは、AIXで構築されたすべてのバイナリは32ビットです。
これは使用中のハードウェアの種類やカーネルに依存しません。
これらの32ビットプロセスは、数個のモデルの1つを使用して256メガバイトのセグメントで割りつけられた4ギガバイトメモリに制限されます。
デフォルトでは、スタックで1つのセグメントとして共有されるものとしてヒープ内の256メガバイト未満の領域が許されます。
    </para>

    <para>
<!--
     In the case of the <command>createlang</command> example, above,
     check your umask and the permissions of the binaries in your
     PostgreSQL installation.  The binaries involved in that example
     were 32-bit and installed as mode 750 instead of 755.  Due to the
     permissions being set in this fashion, only the owner or a member
     of the possessing group can load the library.  Since it isn't
     world-readable, the loader places the object into the process'
     heap instead of the shared library segments where it would
     otherwise be placed.
-->
上記、<command>createlang</command>の例の場合において、PostgreSQLインストレーションにおけるバイナリのumaskとパーミッションをチェックしてください。
例に関与したバイナリは32-ビットであり、755ではなく750モードでインストールされました。
このような形式で設定されたパーミッションのため、所有者もしくはグループ所有のメンバーのみライブラリを読み込めます。
それは誰もが読み取り可能ではないため、ローダは、そうでない場合に配置される共有ライブラリセグメントにではなく、オブジェクトをプロセスのヒープに配置します。
    </para>

    <para>
<!--
     The <quote>ideal</quote> solution for this is to use a 64-bit
     build of PostgreSQL, but that is not always practical, because
     systems with 32-bit processors can build, but not run, 64-bit
     binaries.
-->
これに対しての<quote>理想的な</quote>解決策はPostgreSQLの64-ビットビルドを使うことですが、32-ビットプロセッサのシステムでは64-ビットバイナリをビルドできますが実行できないので、常に実務的ではありません。
    </para>

    <para>
<!--
     If a 32-bit binary is desired, set <symbol>LDR_CNTRL</symbol> to
     <literal>MAXDATA=0x<replaceable>n</replaceable>0000000</literal>,
     where 1 &lt;= n &lt;= 8, before starting the PostgreSQL server,
     and try different values and <filename>postgresql.conf</filename>
     settings to find a configuration that works satisfactorily.  This
     use of <symbol>LDR_CNTRL</symbol> tells AIX that you want the
     server to have <symbol>MAXDATA</symbol> bytes set aside for the
     heap, allocated in 256 MB segments.  When you find a workable
     configuration,
     <command>ldedit</command> can be used to modify the binaries so
     that they default to using the desired heap size.  PostgreSQL can
     also be rebuilt, passing <literal>configure
     LDFLAGS="-Wl,-bmaxdata:0x<replaceable>n</replaceable>0000000"</literal>
     to achieve the same effect.
-->
32-ビットバイナリを要求する場合、PostgreSQLサーバを起動する前に<symbol>LDR_CNTRL</symbol>を<literal>MAXDATA=0x<replaceable>n</replaceable>0000000</literal>に設定します。ここで、1 &lt;= n &lt;= 8です。そして異なる値と<filename>postgresql.conf</filename>設定で満足に稼動する構成を見つけ出します。
このように<symbol>LDR_CNTRL</symbol>を使用すると、AIXに対してサーバがヒープにかかわらず、256 MBセグメントに割り当てられた<symbol>MAXDATA</symbol>バイトセットを持つようにさせたい意図を表明します。
稼動する構成を見つけたとき、意図したヒープ容量をデフォルトで使用するように<command>ldedit</command>を使用してバイナリを変更することができます。
同じ効果を得るため、<literal>configure LDFLAGS="-Wl,-bmaxdata:0x<replaceable>n</replaceable>0000000"</literal>を渡してPostgreSQLを再構築することもできます。
     
    </para>

    <para>
<!--
     For a 64-bit build, set <envar>OBJECT_MODE</envar> to 64 and
     pass <literal>CC="gcc -maix64"</literal>
     and <literal>LDFLAGS="-Wl,-bbigtoc"</literal>
     to <command>configure</command>.  (Options for
    <command>xlc</command> might differ.)  If you omit the export of
    <envar>OBJECT_MODE</envar>, your build may fail with linker errors.  When
    <envar>OBJECT_MODE</envar> is set, it tells AIX's build utilities
    such as <command>ar</>, <command>as</>, and <command>ld</> what
    type of objects to default to handling.
-->
64-ビット構築に対し、<envar>OBJECT_MODE</envar>を64に設定し、<command>configure</command>に<literal>CC="gcc -maix64"</literal>と<literal>LDFLAGS="-Wl,-bbigtoc"</literal>を渡します。
（<command>xlc</command>に対するオプションは異なるかもしれません。）
<envar>OBJECT_MODE</envar>のexportを省略すると、構築はリンカエラーで失敗することがあります。
<envar>OBJECT_MODE</envar>が設定された場合、<command>ar</>、<command>as</>、および<command>ld</>のようなAIXの構築ユーティリティにどの種類のオブジェクトがデフォルトで対応されるのかを伝えます。
    </para>

    <para>
<!--
     By default, overcommit of paging space can happen.  While we have
     not seen this occur, AIX will kill processes when it runs out of
     memory and the overcommit is accessed.  The closest to this that
     we have seen is fork failing because the system decided that
     there was not enough memory for another process.  Like many other
     parts of AIX, the paging space allocation method and
     out-of-memory kill is configurable on a system- or process-wide
     basis if this becomes a problem.
-->
デフォルトで、ページングスペースのオーバーコミットが起こることがあります。
これが起こることを経験したことはありませんが、AIXはメモリを使い切って、オーバーコミットがアクセスされたときにプロセスをkillします。
システムが別のプロセスに対する十分なメモリがないことを判断したためにフォークが失敗するという、これとよく似たことは経験したことがあります。
多くの他のAIX部分のように、ページングスペース割り当て方式とメモリ不足によるプロセス停止は、これが問題となるのであれば、システム全体またはプロセス全体を基準として設定可能です。
    </para>

    <bibliography>
<!--
     <title>References and Resources</title>
-->
     <title>参照とリソース</title>

     <biblioentry>
      <biblioset relation="article">
       <title><ulink url="http://publib.boulder.ibm.com/infocenter/pseries/topic/com.ibm.aix.doc/aixprggd/genprogc/lrg_prg_support.htm">Large Program Support</ulink></title>
      </biblioset>
      <biblioset relation="book">
       <title>AIX Documentation: General Programming Concepts: Writing and Debugging Programs</title>
      </biblioset>
     </biblioentry>

     <biblioentry>
      <biblioset relation="article">
       <title><ulink url="http://publib.boulder.ibm.com/infocenter/pseries/topic/com.ibm.aix.doc/aixprggd/genprogc/address_space.htm">Program Address Space Overview</ulink></title>
      </biblioset>
      <biblioset relation="book">
       <title>AIX Documentation: General Programming Concepts: Writing and Debugging Programs</title>
      </biblioset>
     </biblioentry>

     <biblioentry>
      <biblioset relation="article">
       <title><ulink url="http://publib.boulder.ibm.com/infocenter/pseries/v5r3/topic/com.ibm.aix.doc/aixbman/prftungd/resmgmt2.htm">Performance Overview of the Virtual Memory Manager (VMM)</ulink></title>
      </biblioset>
      <biblioset relation="book">
       <title>AIX Documentation: Performance Management Guide</title>
      </biblioset>
     </biblioentry>

     <biblioentry>
      <biblioset relation="article">
       <title><ulink url="http://publib.boulder.ibm.com/infocenter/pseries/v5r3/topic/com.ibm.aix.doc/aixbman/prftungd/memperf7.htm">Page Space Allocation</ulink></title>
      </biblioset>
      <biblioset relation="book">
       <title>AIX Documentation: Performance Management Guide</title>
      </biblioset>
     </biblioentry>

     <biblioentry>
      <biblioset relation="article">
       <title><ulink url="http://publib.boulder.ibm.com/infocenter/pseries/v5r3/topic/com.ibm.aix.doc/aixbman/prftungd/memperf6.htm">Paging-space thresholds tuning</ulink></title>
      </biblioset>
      <biblioset relation="book">
       <title>AIX Documentation: Performance Management Guide</title>
      </biblioset>
     </biblioentry>

     <biblioentry>
       <title><ulink url="http://www.redbooks.ibm.com/abstracts/sg245674.html?Open">Developing and Porting C and C++ Applications on AIX</ulink></title>
       <publisher>
        <publishername>IBM Redbook</publishername>
       </publisher>
     </biblioentry>
    </bibliography>
   </sect3>
  </sect2>

  <sect2 id="installation-notes-cygwin">
   <title>Cygwin</title>

   <indexterm zone="installation-notes-cygwin">
    <primary>Cygwin</primary>
<!--
    <secondary>installation on</secondary>
-->
    <secondary>上へのインストール</secondary>
   </indexterm>

   <para>
<!--
    PostgreSQL can be built using Cygwin, a Linux-like environment for
    Windows, but that method is inferior to the native Windows build
    <![%standalone-ignore[(see <xref linkend="install-windows">)]]> and
    running a server under Cygwin is no longer recommended.
-->
Windowsに対するLinux的環境である、Cygwinを使ってPostgreSQLを構築することが可能です。
しかし、この手法はWindowsネイティブビルド<![%standalone-ignore[(<xref linkend="install-windows">を参照)]]>には及ばないので、もはや推奨されません。
   </para>

   <para>
<!--
    When building from source, proceed according to the normal
    installation procedure (i.e., <literal>./configure;
    make</literal>; etc.), noting the following-Cygwin specific
    differences:
-->
ソースから構築する場合、以下のCygwin特有の差異に注意し、通常のインストール手順に従って進めます（つまり、<literal>./configure;make</literal>; など）。

    <itemizedlist>
     <listitem>
      <para>
<!--
       Set your path to use the Cygwin bin directory before the
       Windows utilities.  This will help prevent problems with
       compilation.
-->
Windowsユーティリティの前に使用するCygwinのbinディレクトリのパスを設定します。
コンパイルにおける問題を回避する助けになります。
      </para>
     </listitem>

     <listitem>
      <para>
<!--
       The <command>adduser</command> command is not supported; use
       the appropriate user management application on Windows NT,
       2000, or XP.  Otherwise, skip this step.
-->
<command>adduser</command>コマンドはサポートされていません。Windows NT、2000、またはXP上の適切なユーザ管理アプリケーションを使用してください。
そうでなければ、この手順を飛ばします。
      </para>
     </listitem>

     <listitem>
      <para>
<!--
       The <command>su</command> command is not supported; use ssh to
       simulate su on Windows NT, 2000, or XP. Otherwise, skip this
       step.
-->
<command>su</command>コマンドはサポートされていません。Windows NT、2000、またはXP上でsuをシミュレートするため、sshを使用します。
そうでなければ、この手順を飛ばします。
      </para>
     </listitem>

     <listitem>
      <para>
<!--
       OpenSSL is not supported.
-->
OpenSSLはサポートされていません。
      </para>
     </listitem>

     <listitem>
      <para>
<!--
       Start <command>cygserver</command> for shared memory support.
       To do this, enter the command <literal>/usr/sbin/cygserver
       &amp;</literal>.  This program needs to be running anytime you
       start the PostgreSQL server or initialize a database cluster
       (<command>initdb</command>).  The
       default <command>cygserver</command> configuration may need to
       be changed (e.g., increase <symbol>SEMMNS</symbol>) to prevent
       PostgreSQL from failing due to a lack of system resources.
-->
共有メモリサポートのために<command>cygserver</command>を開始します。
これを行うためには、コマンド<literal>/usr/sbin/cygserver&amp;</literal>を入力します。
このプログラムはPostgreSQLサーバを起動するとき、または（<command>initdb</command>で）データベースクラスタを初期化するときはいつでも必要です。
システム資源が欠けていることによるPostgreSQLの失敗を避けるため、デフォルトの<command>cygserver</command>設定を（例えば<symbol>SEMMNS</symbol>を増やすなど）変更する必要があるかもしれません。
      </para>
     </listitem>

     <listitem>
      <para>
<!--
        Building might fail on some systems where a locale other than
        C is in use. To fix this, set the locale to C by doing
        <command>export LANG=C.utf8</command> before building, and then
        setting it back to the previous setting, after you have installed
        PostgreSQL.
-->
        いくつかのシステムでは、Cロケール以外を使っている場合に構築が失敗するかもしれません。
        これに対処するためには、構築前に<command>export LANG=C.utf8</command>を実施してロケールをCに設定し、PostgreSQLのインストール後に以前の設定に戻してください。
      </para>
     </listitem>

     <listitem>
      <para>
<!--
       The parallel regression tests (<literal>make check</literal>)
       can generate spurious regression test failures due to
       overflowing the <function>listen()</function> backlog queue
       which causes connection refused errors or hangs.  You can limit
       the number of connections using the make
       variable <varname>MAX_CONNECTIONS</varname> thus:
-->
並行リグレッションテスト（<literal>make check</literal>）は、接続拒絶エラーやハングアップを引き起こす<function>listen()</function>バックログキューのオーバーフローにより、誤ったリグレッションテストの失敗を生成する可能性があります。
make 変数<varname>MAX_CONNECTIONS</varname>を使用して、最大接続数を制限できます。つまり次のようにします。
<programlisting>
make MAX_CONNECTIONS=5 check
</programlisting>
<!--
       (On some systems you can have up to about 10 simultaneous
       connections).
-->
（いくつかのシステムでは、同時接続を10まで広げられます。）
      </para>
     </listitem>
    </itemizedlist>
   </para>

   <para>
<!--
    It is possible to install <command>cygserver</command> and the
    PostgreSQL server as Windows NT services.  For information on how
    to do this, please refer to the <filename>README</filename>
    document included with the PostgreSQL binary package on Cygwin.
    It is installed in the
    directory <filename>/usr/share/doc/Cygwin</filename>.
-->
Windows NTサービスとして<command>cygserver</command>とPostgreSQLサーバをインストールすることができます。
これを実現する方法は、CygwinのPostgreSQLバイナリパッケージに含まれる<filename>README</filename>文書を参照してください。
それは<filename>/usr/share/doc/Cygwin</filename>ディレクトリにインストールされます。
   </para>
  </sect2>

  <sect2 id="installation-notes-hpux">
   <title>HP-UX</title>

   <indexterm zone="installation-notes-hpux">
    <primary>HP-UX</primary>
<!--
    <secondary>installation on</secondary>
-->
    <secondary>上へのインストール</secondary>
   </indexterm>

   <para>
<!--
    PostgreSQL 7.3+ should work on Series 700/800 PA-RISC machines
    running HP-UX 10.X or 11.X, given appropriate system patch levels
    and build tools.  At least one developer routinely tests on HP-UX
    10.20, and we have reports of successful installations on HP-UX
    11.00 and 11.11.
-->
PostgreSQL 7.3以上は、適切なシステムパッチレベルと構築ツールが与えられているとして、HP-UX 10.Xまたは11.Xが稼動するSeries 700/800 PA-RISCコンピュータで動作します。
少なくとも１人の開発者が定期的にHP-UX10.20で試験を行っており、HP-UX11.00と11.11上へのインストールが成功していることの報告を受けています。
   </para>

   <para>
<!--
    Aside from the PostgreSQL source distribution, you will need GNU
    make (HP's make will not do), and either GCC or HP's full ANSI C
    compiler.  If you intend to build from Git sources rather than a
    distribution tarball, you will also need Flex (GNU lex) and Bison
    (GNU yacc).  We also recommend making sure you are fairly
    up-to-date on HP patches.  At a minimum, if you are building 64
    bit binaries on HP-UX 11.11 you may need PHSS_30966 (11.11) or a
    successor patch otherwise <command>initdb</command> may hang:
-->
PostgreSQLのソース配布物の他に、GNU make（HPのmakeは通りません）と、GCCもしくはHPのANSI Cコンパイラの全部いずれかが必要です。
配布物tarボールではなくGitソースから構築を行う時は、Flex（GNU lex）とBison（GNU yacc）も必要です。
同時に、正確に最新のHPパッチが当たっていることの確認を推奨します。
HP-UX 11.11上で64ビット構築を行うのであれば最小限、PHSS_30966 (11.11)またはその後継パッチが必要です。さもないと、<command>initdb</command>がハングアップします。以下を参考にしてください。
<literallayout>
PHSS_30966  s700_800 ld(1) and linker tools cumulative patch
</literallayout>

<!--
    On general principles you should be current on libc and ld/dld
    patches, as well as compiler patches if you are using HP's C
    compiler.  See HP's support sites such
    as <ulink url="http://itrc.hp.com"></ulink> and
    <ulink url="ftp://us-ffs.external.hp.com/"></ulink> for free
    copies of their latest patches.
-->
一般原則として、HPのCコンパイラを使用する場合、libcとld/dldパッチとコンパイラパッチが最新版でなければなりません。
それらの最新パッチの無償コピーについては、<ulink url="http://itrc.hp.com"></ulink>および<ulink url="ftp://us-ffs.external.hp.com/"></ulink>のHPサポートサイトを見てください。
   </para>

   <para>
<!--
    If you are building on a PA-RISC 2.0 machine and want to have
    64-bit binaries using GCC, you must use GCC 64-bit version. GCC
    binaries for HP-UX PA-RISC and Itanium are available from
    <ulink url="http://www.hp.com/go/gcc"></ulink>.  Don't forget to
    get and install binutils at the same time.
-->
PA-RISC 2.0マシン上でGCCを使用して64-ビットバイナリを構築したい場合、GCC 64-ビット版を使用しなければなりません。
HP-UX PA-RISCとItanium用のバイナリは<ulink url="http://www.hp.com/go/gcc"></ulink>から入手できます。
同時にbinutilsも入手しインストールすることを忘れないでください。
   </para>

   <para>
<!--
    If you are building on a PA-RISC 2.0 machine and want the compiled
    binaries to run on PA-RISC 1.1 machines you will need to specify
    <option>+DAportable</option> in <envar>CFLAGS</envar>.
-->
PA-RISC 2.0装置上での構築で、PA-RISC 1.1装置で稼動するコンパイル済みのバイナリが必要な場合、<envar>CFLAGS</envar>で<option>+DAportable</option>を指定する必要があります。
   </para>

   <para>
<!--
    If you are building on a HP-UX Itanium machine, you will need the
    latest HP ANSI C compiler with its dependent patch or successor
    patches:
-->
HP-UX Itaniumマシン上で構築するのであれば、依存するパッチまたはその後継のパッチが当たった最新のHP ANSI Cコンパイラが必要です。以下です。
<literallayout>
PHSS_30848  s700_800 HP C Compiler (A.05.57)
PHSS_30849  s700_800 u2comp/be/plugin library Patch
</literallayout>
   </para>

   <para>
<!--
    If you have both HP's C compiler and GCC's, then you might want to
    explicitly select the compiler to use when you
    run <command>configure</command>:
-->
HPのCコンパイラとGCCの２つが存在するとき、<command>configure</command>実行時に明示的に使用するコンパイラを指定したい場合、HPのCコンパイラでは、
<programlisting>
./configure CC=cc
</programlisting>
<!--
    for HP's C compiler, or
-->
GCCの場合は、
<programlisting>
./configure CC=gcc
</programlisting>
<!--
    for GCC.  If you omit this setting, then configure will
    pick <command>gcc</command> if it has a choice.
-->
のようにします。この設定を省略すると、選択できる場合にはconfigureは<command>gcc</command>を選びます。
   </para>

   <para>
<!--
    The default install target location
    is <filename>/usr/local/pgsql</filename>, which you might want to
    change to something under <filename>/opt</filename>.  If so, use
    the
    <option>&#045;&#045;prefix</option> switch to <command>configure</command>.
-->
デフォルトのインストール対象配置場所は<filename>/usr/local/pgsql</filename>で、<filename>/opt</filename>のような場所に変更したい場合もあります。
そのような時は、<command>configure</command>で<option>--prefix</option>スイッチを使用します。
   </para>

   <para>
<!--
    In the regression tests, there might be some low-order-digit
    differences in the geometry tests, which vary depending on which
    compiler and math library versions you use.  Any other error is
    cause for suspicion.
-->
リグレッションテストにおいて、幾何試験で下位ビット桁の差異があるかもしれません。これはどのコンパイラを使用しているか、使用している数学ライブラリのバージョンは何かに依存し、変化します。
その他のエラーは原因を疑ってください。
   </para>
  </sect2>

  <sect2 id="installation-notes-mingw">
<!--
   <title>MinGW/Native Windows</title>
-->
   <title>MinGW/ネイティブWindows</title>

   <indexterm zone="installation-notes-mingw">
    <primary>MinGW</primary>
<!--
    <secondary>installation on</secondary>
-->
    <secondary>上へのインストール</secondary>
   </indexterm>

   <para>
<!--
    PostgreSQL for Windows can be built using MinGW, a Unix-like build
    environment for Microsoft operating systems, or using
    Microsoft's <productname>Visual C++</productname> compiler suite.
    The MinGW build variant uses the normal build system described in
    this chapter; the Visual C++ build works completely differently
    and is described in <![%standalone-include[the
    documentation]]><![%standalone-ignore[<xref linkend="install-windows">]]>.
    It is a fully native build and uses no additional software like
    MinGW.  A ready-made installer is available on the main
    PostgreSQL web site.
-->
Windows用PostgreSQLは、Microsoftオペレーティングシステム用のUnixに似た構築環境であるMinGW、またはMicrosoftの<productname>Visual C++</productname>コンパイラ一式を使って構築できます。
MinGW版の構築は本章で記述されている通常の構築システムを使用します。Visual C++構築は、<![%standalone-include[文書]]><![%standalone-ignore[<xref linkend="install-windows">]]>で記述するようにまったく異なった動作をします。
それは完全にネイティブな構築で、MinGWのような追加ソフトウェアを使用しません。既製のインストーラがPostgreSQLのメインウェブサイトから入手できます。
   </para>

   <para>
<!--
    The native Windows port requires a 32 or 64-bit version of Windows
    2000 or later. Earlier operating systems do
    not have sufficient infrastructure (but Cygwin may be used on
    those).  MinGW, the Unix-like build tools, and MSYS, a collection
    of Unix tools required to run shell scripts
    like <command>configure</command>, can be downloaded
    from <ulink url="http://www.mingw.org/"></ulink>.  Neither is
    required to run the resulting binaries; they are needed only for
    creating the binaries.
-->
ネイティブに移植されたWindows版ではWindows 2000以降の32ビットまたは64ビット版が必要です。
これより前のオペレーティングシステムには充分な構造基盤がありません（ただし、Cygwinはそれら上で使える可能性があります）。
Unixに似た構築ツールであるMinGWと、<command>configure</command>のようなシェルスクリプトを実行するために必要なUnixツール群であるMSYSは、<ulink url="http://www.mingw.org/"></ulink>からダウンロード可能です。
作成されたバイナリの実行にはいずれも必要ありません。バイナリの作成のためのみ必要です。
   </para>

   <para>
<!--
     To build 64 bit binaries using MinGW, install the 64 bit tool set
     from <ulink url="http://mingw-w64.sourceforge.net/"></ulink>, put its bin
     directory in the <envar>PATH</envar>, and run
     <command>configure</command> with the
     <command>&#045;-host=x86_64-w64-mingw</command> option.
-->
MinGWを使って64ビット版バイナリをビルドするためには、<ulink url="http://mingw-w64.sourceforge.net/"></ulink>から64ビット用のツールを入手してインストールし、<envar>PATH</envar>にあるbinディレクトリへそれらを入れ、そして<command>--host=x86_64-w64-mingw</command>オプション付きで<command>configure</command>を実施します。
   </para>

   <para>
<!--
    After you have everything installed, it is suggested that you
    run <application>psql</application>
    under <command>CMD.EXE</command>, as the MSYS console has
    buffering issues.
-->
MSYSコンソールはバッファリングに問題があるので、すべてをインストールした後に<command>CMD.EXE</command>下で<application>psql</application>を実行することを推奨します。
   </para>

   <sect3 id="windows-crash-dumps">
<!--
    <title>Collecting Crash Dumps on Windows</title>
-->
    <title>Windows上でのクラッシュダンプの収集</title>

    <para>
<!--
     If PostgreSQL on Windows crashes, it has the ability to generate
     <productname>minidumps</> that can be used to track down the cause
     for the crash, similar to core dumps on Unix. These dumps can be
     read using the <productname>Windows Debugger Tools</> or using
     <productname>Visual Studio</>. To enable the generation of dumps
     on Windows, create a subdirectory named <filename>crashdumps</filename>
     inside the cluster data directory. The dumps will then be written
     into this directory with a unique name based on the identifier of
     the crashing process and the current time of the crash.
-->
もしWindows上のPostgreSQLがクラッシュした場合、Unixにおけるコアダンプと似た、クラッシュの原因を追跡するために使用できる<productname>minidumps</>を生成することができます。
このダンプは<productname>Windows Debugger Tools</>や<productname>Visual Studio</>を使うことで解析できます。Windowsにてダンプを生成できるように、<filename>crashdumps</filename>という名前のサブディレクトリをデータベースクラスタディレクトリの中に作成します。
ダンプは、クラッシュ時の現在時間と原因となったプロセスの識別子を元にした一意な名前としてこのディレクトリの中に生成されます。
    </para>
   </sect3>
  </sect2>

  <sect2 id="installation-notes-sco">
<!--
   <title>SCO OpenServer and SCO UnixWare</title>
-->
   <title>SCO OpenServer と SCO UnixWare</title>

   <indexterm zone="installation-notes-sco">
    <primary>SCO</primary>
<!--
    <secondary>installation on</secondary>
-->
    <secondary>上へのインストール</secondary>
   </indexterm>

   <indexterm zone="installation-notes-sco">
    <primary>UnixWare</primary>
<!--
    <secondary>installation on</secondary>
-->
    <secondary>上へのインストール</secondary>
   </indexterm>

   <para>
<!--
    PostgreSQL can be built on SCO UnixWare 7 and SCO OpenServer 5.
    On OpenServer, you can use either the OpenServer Development Kit
    or the Universal Development Kit.  However, some tweaking may be
    needed, as described below.
-->
PostgreSQLはSCO UnixWare 7とSCO OpenServer 5上で構築できます。
OpenServerについて、OpenServer Development Kitまたはthe Universal Development Kitのいずれかが使用できます。
しかし、以下に記載するような微調整が必要です。
   </para>

   <sect3>
    <title>Skunkware</title>

    <para>
<!--
     You should locate your copy of the SCO Skunkware CD.  The
     Skunkware CD is included with UnixWare 7 and current versions of
     OpenServer 5.  Skunkware includes ready-to-install versions of
     many popular programs that are available on the Internet.  For
     example, gzip, gunzip, GNU Make, Flex, and Bison are all
     included.  For UnixWare 7.1, this CD is now labeled "Open License
     Software Supplement".  If you do not have this CD, the software
     on it is available
     from <ulink url="http://www.sco.com/skunkware/"></ulink>.
-->
SCO Skunkware CDのコピーがどこにあるかを知る必要があります。
Skunkware CDはUnixWare 7と現在バージョンのOpenServer 5に含まれています。
Skunkwareには、インターネットから入手可能な数多くのよく知られたプログラムをすぐインストールできるように準備したバージョンが含まれます。
例えば、gzip、gunzip、GNU Make、FlexおよびBisonはすべて含まれています。
UnixWare 7.1では、このCDは現在"Open License Software Supplement"のように名称付けられています。
このCDを持っていない場合、その中にあるソフトウェアは<ulink url="http://www.sco.com/skunkware/"></ulink>から入手できます。
    </para>

    <para>
<!--
     Skunkware has different versions for UnixWare and OpenServer.
     Make sure you install the correct version for your operating
     system, except as noted below.
-->
SkunkwareはUnixWare と OpenServer用に異なったバージョンがあります。
以下に注意書きされている点を除き、オペレーティングシステムに対して適切なバージョンをインストールしたことを確認してください。
    </para>

    <para>
<!--
     On UnixWare 7.1.3 and beyond, the GCC compiler is included on the
     UDK CD as is GNU Make.
-->
UnixWare 7.1.3以降では、UDK CDの中にGCCコンパイラとGNU Makeが含まれます。
    </para>
   </sect3>

   <sect3>
    <title>GNU Make</title>

    <para>
<!--
     You need to use the GNU Make program, which is on the Skunkware
     CD.  By default, it installs
     as <filename>/usr/local/bin/make</filename>.
-->
GNU Makeプログラムを使用する必要があり、それはSkunkware CDの中にあります。
デフォルトでは<filename>/usr/local/bin/make</filename>としてインストールします。
    </para>

    <para>
<!--
     As of UnixWare 7.1.3 and above, the GNU Make program is the
     OSTK portion of the UDK CD, and is
     in <filename>/usr/gnu/bin/gmake</filename>.
-->
UnixWare 7.1.3およびそれ以上で、GNU MakeプログラムはUDK CDのOSTK部分で、<filename>/usr/gnu/bin/gmake</filename>にあります。
    </para>
   </sect3>

   <sect3>
    <title>Readline</title>

    <para>
<!--
     The Readline library is on the Skunkware CD.  But it is not
     included on the UnixWare 7.1 Skunkware CD.  If you have the
     UnixWare 7.0.0 or 7.0.1 Skunkware CDs, you can install it from
     there.  Otherwise,
     try <ulink url="http://www.sco.com/skunkware/"></ulink>.
-->
ReadlineライブラリはSkunkware CDにあります。
しかし、UnixWare 7.1 Skunkware CDにはありません。
もしUnixWare 7.0.0 または 7.0.1 Skunkware CDを所有していれば、そこからインストールできます。
そうでない場合、<ulink url="http://www.sco.com/skunkware/"></ulink>を試してください。
    </para>

    <para>
<!--
     By default, Readline installs into <filename>/usr/local/lib</> and
     <filename>/usr/local/include</>.  However, the
     PostgreSQL <command>configure</command> program will not find it
     there without help.  If you installed Readline, then use the
     following options to <command>configure</command>:
-->
デフォルトでReadlineは<filename>/usr/local/lib</>と<filename>/usr/local/include</>にインストールされます。
しかし、PostgreSQLの<command>configure</command>プログラムは援助無しにそこにあることを見つけません。
Readlineをインストールしたなら、<command>configure</command>で以下のオプションを使ってください。
<programlisting>
./configure --with-libraries=/usr/local/lib --with-includes=/usr/local/include
</programlisting>
    </para>
   </sect3>

   <sect3>
<!--
    <title>Using the UDK on OpenServer</title>
-->
    <title>OpenServer上でUDKを使用</title>

    <para>
<!--
     If you are using the new Universal Development Kit (UDK) compiler
     on OpenServer, you need to specify the locations of the UDK
     libraries:
-->
もしOpenServer上で新規のUniversal Development Kit (UDK) コンパイラを使用しているのであれば、以下のようにUDKライブラリの場所を指定する必要があります。
<programlisting>
./configure --with-libraries=/udk/usr/lib --with-includes=/udk/usr/include
</programlisting>
<!--
     Putting these together with the Readline options from above:
-->
これらを上のReadlineオプションと合わせて、
<programlisting>
./configure --with-libraries="/udk/usr/lib /usr/local/lib" --with-includes="/udk/usr/include /usr/local/include"
</programlisting>
    </para>
   </sect3>

   <sect3>
<!--
    <title>Reading the PostgreSQL Man Pages</title>
-->
    <title>PostgreSQLマニュアルページを読む</title>

    <para>
<!--
     By default, the PostgreSQL man pages are installed into
     <filename>/usr/local/pgsql/man</filename>.  By default, UnixWare
     does not look there for man pages.  To be able to read them you
     need to modify the
     <varname>MANPATH</varname> variable
     in <filename>/etc/default/man</filename>, for example:
-->
デフォルトで、PostgreSQLマニュアルページは<filename>/usr/local/pgsql/man</filename>にインストールされます。
デフォルトで、UnixWareはマニュアルページとしてその場所を見ません。
マニュアルページを読めるようにするには、以下の例のように、<filename>/etc/default/man</filename>の<varname>MANPATH</varname>変数を変更します。
<programlisting>
MANPATH=/usr/lib/scohelp/%L/man:/usr/dt/man:/usr/man:/usr/share/man:scohelp:/usr/local/man:/usr/local/pgsql/man
</programlisting>
    </para>

    <para>
<!--
     On OpenServer, some extra research needs to be invested to make
     the man pages usable, because the man system is a bit different
     from other platforms.  Currently, PostgreSQL will not install
     them at all.
-->
OpenServerについてマニュアルページが使用できるようにするため幾つかの追加研究が注ぎ込まれる必要があります。その理由はマニュアルシステムは他のプラットフォームとは多少異なるからです。
現在、PostgreSQLはそれら全てをインストールしません。
    </para>
   </sect3>

   <sect3>
<!--
    <title>C99 Issues with the 7.1.1b Feature Supplement</title>
-->
    <title>7.1.1b機能追加でのC99問題</title>

    <para>
<!--
     For compilers earlier than the one released with OpenUNIX 8.0.0
     (UnixWare 7.1.2), including the 7.1.1b Feature Supplement, you
     may need to specify <option>-Xb</option>
     in <varname>CFLAGS</varname> or the <varname>CC</varname>
     environment variable.  The indication of this is an error in
     compiling <filename>tuplesort.c</filename> referencing inline
     functions.  Apparently there was a change in the 7.1.2(8.0.0)
     compiler and beyond.
-->
7.1.1b機能追加を含む、OpenUNIX 8.0.0（UnixWare 7.1.2）と共にリリースされたものより早期のコンパイラでは、<varname>CFLAGS</varname>または<varname>CC</varname>環境変数で<option>-Xb</option>を指定する必要があります。
この兆候は、インライン関数を参照する<filename>tuplesort.c</filename>をコンパイルするエラーです。
どうやら、これは7.1.2(8.0.0)とそれ以降のコンパイラで変更があったようです。
    </para>
   </sect3>

   <sect3>
<!--
    <title>Threading on UnixWare</title>
-->
    <title>UnixWare上のスレッド</title>

    <para>
<!--
     For threading, you<emphasis>must</emphasis> use <option>-Kpthread</option>
     on <emphasis>all</emphasis> libpq-using programs.  libpq
     uses <function>pthread_*</function> calls, which are only
     available with the
     <option>-Kpthread</>/<option>-Kthread</> flag.
-->
スレッド処理のためには<emphasis>すべての</emphasis>libpqを使用するプログラムにて<option>-Kpthread</option>を使用する<emphasis>必要があります</emphasis>。
libpqは<function>pthread_*</function>呼び出しを使用しますが、<option>-Kpthread</>/<option>-Kthread</>フラグを伴わないと有効ではありません。
    </para>
   </sect3>
  </sect2>

  <sect2 id="installation-notes-solaris">
   <title>Solaris</title>

   <indexterm zone="installation-notes-solaris">
    <primary>Solaris</primary>
<!--
    <secondary>installation on</secondary>
-->
    <secondary>上へのインストール</secondary>
   </indexterm>

   <para>
<!--
    PostgreSQL is well-supported on Solaris.  The more up to date your
    operating system, the fewer issues you will experience; details
    below.
-->
PostgreSQLはSolaris上でとても良くサポートされています。
オペレーティングシステムが更新されればされる程、問題点の遭遇は少なくなります。
以下に詳細を示します。
   </para>

   <sect3>
<!--
    <title>Required Tools</title>
-->
    <title>必要なツール</title>

    <para>
<!--
     You can build with either GCC or Sun's compiler suite.  For
     better code optimization, Sun's compiler is strongly recommended
     on the SPARC architecture.  We have heard reports of problems
     when using GCC 2.95.1; GCC 2.95.3 or later is recommended.  If
     you are using Sun's compiler, be careful not to select
     <filename>/usr/ucb/cc</filename>;
     use <filename>/opt/SUNWspro/bin/cc</filename>.
-->
GCCもしくはSunのコンパイラ一式により構築できます。
より良いコード最適化のため、SPARCアーキテクチャではSunのコンパイラを強く推奨します。
GCC 2.95.1を使用する場合に問題があったと報告を受けています。GCC 2.95.3以降を勧めます。
Sunのコンパイラを使用するのであれば、<filename>/usr/ucb/cc</filename>を選択せず、<filename>/opt/SUNWspro/bin/cc</filename>を使用するように注意してください。
    </para>

    <para>
<!--
     You can download Sun Studio
     from <ulink url="http://www.oracle.com/technetwork/server-storage/solarisstudio/downloads/"></ulink>.
     Many of GNU tools are integrated into Solaris 10, or they are
     present on the Solaris companion CD.  If you like packages for
     older version of Solaris, you can find these tools
     at <ulink url="http://www.sunfreeware.com"></ulink>.
     If you prefer
     sources, look
     at <ulink url="http://www.gnu.org/order/ftp.html"></ulink>.
-->
<ulink url="http://www.oracle.com/technetwork/server-storage/solarisstudio/downloads/"></ulink>からSun Studioをダウンロードできます。
数多くのGNUツールがSolaris 10に統合、もしくはSolaris companion CDの中にあります。
Solarisのより古いバージョンに対するパッケージを好むのであれば、それらのツールは<ulink url="http://www.sunfreeware.com"></ulink>にあります。
ソースの方が良いという方は<ulink url="http://www.gnu.org/order/ftp.html"></ulink>を参照してください。
    </para>
   </sect3>

   <sect3>
<!--
    <title>Problems with OpenSSL</title>
-->
    <title>OpenSSLでの問題点</title>

    <para>
<!--
     When you build PostgreSQL with OpenSSL support you might get
     compilation errors in the following files:
-->
OpenSSLサポート付きでPostgreSQLを構築するとき、以下に示したファイルでコンパイルエラーを受け取ることがあります。
     <itemizedlist>
      <listitem><para><filename>src/backend/libpq/crypt.c</filename></para></listitem>
      <listitem><para><filename>src/backend/libpq/password.c</filename></para></listitem>
      <listitem><para><filename>src/interfaces/libpq/fe-auth.c</filename></para></listitem>
      <listitem><para><filename>src/interfaces/libpq/fe-connect.c</filename></para></listitem>
     </itemizedlist>

<!--
     This is because of a namespace conflict between the standard
     <filename>/usr/include/crypt.h</filename> header and the header
     files provided by OpenSSL.
-->
これは標準<filename>/usr/include/crypt.h</filename>ヘッダファイルとOpenSSLから供給されるヘッダファイル間での名前空間衝突によるものです。
    </para>

    <para>
<!--
     Upgrading your OpenSSL installation to version 0.9.6a fixes this
     problem.  Solaris 9 and above has a newer version of OpenSSL.
-->
OpenSSLインストレーションを0.9.6aに更新することでこの問題は解決されます。
Solaris 9とそれ以降のバージョンは、より新しいOpenSSLバージョンを持っています。
    </para>
   </sect3>

   <sect3>
<!--
    <title>configure Complains About a Failed Test Program</title>
-->
    <title>失敗したテストプログラムについてconfigureが出すエラー</title>

    <para>
<!--
     If <command>configure</command> complains about a failed test
     program, this is probably a case of the run-time linker being
     unable to find some library, probably libz, libreadline or some
     other non-standard library such as libssl.  To point it to the
     right location, set the <envar>LDFLAGS</envar> environment
     variable on the <command>configure</command> command line, e.g.,
-->
もし<command>configure</command>が失敗したテストプログラムについてエラーを出す場合、おそらく実行時のリンカがlibz、libreadline、またはlibsslのような非標準のライブラリを見つけ出せないことによります。
それを正しい場所に指し示すため、<command>configure</command>コマンドラインで<envar>LDFLAGS</envar>環境変数を例えば以下のように設定します。
<programlisting>
configure ... LDFLAGS="-R /usr/sfw/lib:/opt/sfw/lib:/usr/local/lib"
</programlisting>
<!--
     See
     the <citerefentry><refentrytitle>ld</><manvolnum>1</></citerefentry>
     man page for more information.
-->
より詳細な情報は<citerefentry><refentrytitle>ld</><manvolnum>1</></citerefentry>マニュアルページを参照ください。
    </para>
   </sect3>

   <sect3>
<!--
    <title>64-bit Build Sometimes Crashes</title>
-->
    <title>時折クラッシュする64-ビット構築</title>

    <para>
<!--
     On Solaris 7 and older, the 64-bit version of libc has a buggy
     <function>vsnprintf</function> routine, which leads to erratic
     core dumps in PostgreSQL.  The simplest known workaround is to
     force PostgreSQL to use its own version of <function>vsnprintf</function> rather than
     the library copy.  To do this, after you
     run <command>configure</command> edit a file produced by
     <command>configure</command>:
     In <filename>src/Makefile.global</filename>, change the line
-->
Solaris 7以前の64bit版のlibcには不具合のある<function>vsnprintf</function>ルーチンがあり、それはPostgreSQLのエラーコアダンプに繋がります。
既知の最も単純な回避策は、ライブラリのコピーではなく、自身の<function>vsnprintf</function>バージョンを使うように仕向けることです。
これを行うためには、<command>configure</command>を実行した後、<command>configure</command>で生成されたファイルを編集します。
つまり、<filename>src/Makefile.global</filename>の以下の行
<programlisting>
LIBOBJS =
</programlisting>
<!--
     to read
-->
を次のように変更します。
<programlisting>
LIBOBJS = snprintf.o
</programlisting>
<!--
     (There might be other files already listed in this variable.
     Order does not matter.)  Then build as usual.
-->
（この変数に既に他のファイルが列挙されているかもしれません。その順序は関係ありません。）
その後、通常通りに構築してください。
    </para>
   </sect3>

   <sect3>
<!--
    <title>Compiling for Optimal Performance</title>
-->
    <title>最適性能を得るためのコンパイル</title>

    <para>
<!--
     On the SPARC architecture, Sun Studio is strongly recommended for
     compilation.  Try using the <option>-xO5</option> optimization
     flag to generate significantly faster binaries.  Do not use any
     flags that modify behavior of floating-point operations
     and <varname>errno</varname> processing (e.g.,
     <option>-fast</option>).  These flags could raise some
     nonstandard PostgreSQL behavior for example in the date/time
     computing.
-->
SPARCアーキテクチャにおけるコンパイルでは、Sun Studioを強く推奨します。
特筆するような速さのバイナリを生成するため、<option>-xO5</option>最適化フラグを使用してみてください。
浮動小数点演算と、（<option>-fast</option>のような）<varname>errno</varname>演算を修正するようなフラグはすべて使ってはいけません。
それらのフラグは、例えばdate/time演算において、PostgreSQLの標準ではない動作をさせることがあります。
    </para>

    <para>
<!--
     If you do not have a reason to use 64-bit binaries on SPARC,
     prefer the 32-bit version.  The 64-bit operations are slower and
     64-bit binaries are slower than the 32-bit variants.  And on
     other hand, 32-bit code on the AMD64 CPU family is not native,
     and that is why 32-bit code is significant slower on this CPU
     family.
-->
SPARCで64ビットバイナリを使用する理由がないのであれば、32ビット版を選択してください。
64ビット操作はより遅く、64ビットバイナリは32ビット版より遅いのです。
一方で、AMD64 CPUファミリ上の32ビットコードはネイティブではありません。これが、このCPUファミリで32ビットコードが非常に低速な理由です
    </para>

   </sect3>

   <sect3>
<!--
    <title>Using DTrace for Tracing PostgreSQL</title>
-->
    <title>PostgreSQLをトレースするためのDTrace使用</title>

    <para>
<!--
     Yes, using DTrace is possible.  See <![%standalone-include[the
     documentation]]>
     <![%standalone-ignore[<xref linkend="dynamic-trace">]]> for further
     information.  You can also find more information in this
     article: <ulink url="https://blogs.oracle.com/robertlor/entry/user_level_dtrace_probes_in"></ulink>.
-->
そのとおりです。DTraceを使うことができます。より詳細な情報は<![%standalone-include[文書]]><![%standalone-ignore[<xref linkend="dynamic-trace">]]>を参照してください。
より多くの情報が<ulink url="https://blogs.oracle.com/robertlor/entry/user_level_dtrace_probes_in"></ulink>文書にあります。
    </para>

    <para>
<!--
     If you see the linking of the <command>postgres</command> executable abort with an
     error message like:
-->
以下のようなエラーメッセージで<command>postgres</command>実行形式のリンクが中断することを体験した場合、そのDTraceインストールが静的関数におけるプローブを扱うには古すぎると言うことです。
Solaris 10u4もしくはそれより新しいものが必要です。
<screen>
Undefined                       first referenced
 symbol                             in file
AbortTransaction                    utils/probes.o
CommitTransaction                   utils/probes.o
ld: fatal: Symbol referencing errors. No output written to postgres
collect2: ld returned 1 exit status
make: *** [postgres] Error 1
</screen>
<!--
     your DTrace installation is too old to handle probes in static
     functions.  You need Solaris 10u4 or newer.
-->
    </para>
   </sect3>
  </sect2>
 </sect1>

</chapter>
