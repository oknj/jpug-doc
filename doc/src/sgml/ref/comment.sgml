<!--
doc/src/sgml/ref/comment.sgml
PostgreSQL documentation
-->

<refentry id="SQL-COMMENT">
 <indexterm zone="sql-comment">
  <primary>COMMENT</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>COMMENT</refentrytitle>
  <manvolnum>7</manvolnum>
<!--
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 言語</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>COMMENT</refname>
<!--
  <refpurpose>define or change the comment of an object</refpurpose>
-->
  <refpurpose>オブジェクトのコメントを定義する、または変更する</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
COMMENT ON
{
  AGGREGATE <replaceable class="PARAMETER">aggregate_name</replaceable> ( <replaceable>aggregate_signature</replaceable> ) |
  CAST (<replaceable>source_type</replaceable> AS <replaceable>target_type</replaceable>) |
  COLLATION <replaceable class="PARAMETER">object_name</replaceable> |
  COLUMN <replaceable class="PARAMETER">relation_name</replaceable>.<replaceable class="PARAMETER">column_name</replaceable> |
  CONSTRAINT <replaceable class="PARAMETER">constraint_name</replaceable> ON <replaceable class="PARAMETER">table_name</replaceable> |
  CONVERSION <replaceable class="PARAMETER">object_name</replaceable> |
  DATABASE <replaceable class="PARAMETER">object_name</replaceable> |
  DOMAIN <replaceable class="PARAMETER">object_name</replaceable> |
  EXTENSION <replaceable class="PARAMETER">object_name</replaceable> |
  EVENT TRIGGER <replaceable class="PARAMETER">object_name</replaceable> |
  FOREIGN DATA WRAPPER <replaceable class="PARAMETER">object_name</replaceable> |
  FOREIGN TABLE <replaceable class="PARAMETER">object_name</replaceable> |
  FUNCTION <replaceable class="PARAMETER">function_name</replaceable> ( [ [ <replaceable class="parameter">argmode</replaceable> ] [ <replaceable class="parameter">argname</replaceable> ] <replaceable class="parameter">argtype</replaceable> [, ...] ] ) |
  INDEX <replaceable class="PARAMETER">object_name</replaceable> |
  LARGE OBJECT <replaceable class="PARAMETER">large_object_oid</replaceable> |
  MATERIALIZED VIEW <replaceable class="PARAMETER">object_name</replaceable> |
  OPERATOR <replaceable class="PARAMETER">operator_name</replaceable> (<replaceable class="PARAMETER">left_type</replaceable>, <replaceable class="PARAMETER">right_type</replaceable>) |
  OPERATOR CLASS <replaceable class="PARAMETER">object_name</replaceable> USING <replaceable class="parameter">index_method</replaceable> |
  OPERATOR FAMILY <replaceable class="PARAMETER">object_name</replaceable> USING <replaceable class="parameter">index_method</replaceable> |
  [ PROCEDURAL ] LANGUAGE <replaceable class="PARAMETER">object_name</replaceable> |
  ROLE <replaceable class="PARAMETER">object_name</replaceable> |
  RULE <replaceable class="PARAMETER">rule_name</replaceable> ON <replaceable class="PARAMETER">table_name</replaceable> |
  SCHEMA <replaceable class="PARAMETER">object_name</replaceable> |
  SEQUENCE <replaceable class="PARAMETER">object_name</replaceable> |
  SERVER <replaceable class="PARAMETER">object_name</replaceable> |
  TABLE <replaceable class="PARAMETER">object_name</replaceable> |
  TABLESPACE <replaceable class="PARAMETER">object_name</replaceable> |
  TEXT SEARCH CONFIGURATION <replaceable class="PARAMETER">object_name</replaceable> |
  TEXT SEARCH DICTIONARY <replaceable class="PARAMETER">object_name</replaceable> |
  TEXT SEARCH PARSER <replaceable class="PARAMETER">object_name</replaceable> |
  TEXT SEARCH TEMPLATE <replaceable class="PARAMETER">object_name</replaceable> |
  TRIGGER <replaceable class="PARAMETER">trigger_name</replaceable> ON <replaceable class="PARAMETER">table_name</replaceable> |
  TYPE <replaceable class="PARAMETER">object_name</replaceable> |
  VIEW <replaceable class="PARAMETER">object_name</replaceable>
} IS '<replaceable class="PARAMETER">text</replaceable>'

<!--
<phrase>where <replaceable>aggregate_signature</replaceable> is:</phrase>
-->
<phrase>ここで<replaceable>aggregate_signature</replaceable>は以下の通りです。</phrase>

* |
[ <replaceable>argmode</replaceable> ] [ <replaceable>argname</replaceable> ] <replaceable>argtype</replaceable> [ , ... ] |
[ [ <replaceable>argmode</replaceable> ] [ <replaceable>argname</replaceable> ] <replaceable>argtype</replaceable> [ , ... ] ] ORDER BY [ <replaceable>argmode</replaceable> ] [ <replaceable>argname</replaceable> ] <replaceable>argtype</replaceable> [ , ... ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
<!--
  <title>Description</title>
-->
  <title>説明</title>

  <para>
<!--
   <command>COMMENT</command> stores a comment about a database object.
-->
<command>COMMENT</command>は、データベースオブジェクトに関するコメントを保存します。
  </para>

  <para>
<!--
   Only one comment string is stored for each object, so to modify a comment,
   issue a new <command>COMMENT</> command for the same object.  To remove a
   comment, write <literal>NULL</literal> in place of the text string.
   Comments are automatically dropped when their object is dropped.
-->
各オブジェクトに保存できるコメント文字列は1つだけです。
ですので、コメントを編集するためには、同一オブジェクトに対して新しく<command>COMMENT</>コマンドを発行してください。
コメントを削除するには、テキスト文字列の部分に<literal>NULL</literal>を記述してください。
オブジェクトが削除された時、コメントは自動的に削除されます。
  </para>

  <para>
<!--
   For most kinds of object, only the object's owner can set the comment.
   Roles don't have owners, so the rule for <literal>COMMENT ON ROLE</> is
   that you must be superuser to comment on a superuser role, or have the
   <literal>CREATEROLE</> privilege to comment on non-superuser roles.
   Of course, a superuser can comment on anything.
-->
ほとんどの種類のオブジェクトでは、オブジェクトの所有者のみがコメントを設定することができます。
ロールには所有者がありませんので、<literal>COMMENT ON ROLE</>における規則は、スーパーユーザロールに対するコメント付けはスーパーユーザでなければならず、スーパーユーザ以外のロールに対するコメント付けは<literal>CREATEROLE</>を持たなければならないとなります。
当然ながらスーパーユーザは何にでもコメントを付けることができます。
  </para>

  <para>
<!--
    Comments can be viewed using <application>psql</application>'s
    <command>\d</command> family of commands.
    Other user interfaces to retrieve comments can be built atop
    the same built-in functions that <application>psql</application> uses, namely
    <function>obj_description</>, <function>col_description</>,
    and <function>shobj_description</>
    (see <xref linkend="functions-info-comment-table">).
-->
コメントは、<application>psql</application>の<command>\d</command>系のコマンドで表示することができます。
<function>obj_description()</>、<function>col_description()</>、<function>shobj_description</>という名前の、<application>psql</application>が使用する組み込み関数を使うように構築することで、他のユーザインタフェースを使ってコメントを取り出せるようになります
（<xref linkend="functions-info-comment-table">を参照してください）。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>Parameters</title>
-->
  <title>パラメータ</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">object_name</replaceable></term>
    <term><replaceable class="parameter">relation_name</replaceable>.<replaceable>column_name</replaceable></term>
    <term><replaceable class="parameter">aggregate_name</replaceable></term>
    <term><replaceable class="parameter">constraint_name</replaceable></term>
    <term><replaceable class="parameter">function_name</replaceable></term>
    <term><replaceable class="parameter">operator_name</replaceable></term>
    <term><replaceable class="parameter">rule_name</replaceable></term>
    <term><replaceable class="parameter">trigger_name</replaceable></term>
    <listitem>
     <para>
<!--
      The name of the object to be commented.  Names of tables,
      aggregates, collations, conversions, domains, foreign tables, functions,
      indexes, operators, operator classes, operator families, sequences,
      text search objects, types, and views can be schema-qualified.
      When commenting on a column,
      <replaceable class="parameter">relation_name</replaceable> must refer
      to a table, view, composite type, or foreign table.
-->
コメントを付加するオブジェクトの名前です。
テーブル、集約、照合順、変換、ドメイン、外部テーブル、関数、インデックス、演算子、演算子クラス、演算子族、シーケンス、テキスト検索オブジェクト、データ型、ビューの名前は、スキーマ修飾することができます。
列にコメントを付与する場合、<replaceable class="parameter">relation_name</replaceable>はテーブル、ビュー、複合型、外部テーブルを参照するものでなければなりません。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
     <term><replaceable>source_type</replaceable></term>
     <listitem>
      <para>
<!--
       The name of the source data type of the cast.
-->
キャストの変換元データ型の名前です。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable>target_type</replaceable></term>
     <listitem>
      <para>
<!--
       The name of the target data type of the cast.
-->
キャストの変換先のデータ型の名前です。
      </para>
     </listitem>
    </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">argmode</replaceable></term>

    <listitem>
     <para>
<!--
      The mode of a function or aggregate
      argument: <literal>IN</>, <literal>OUT</>,
      <literal>INOUT</>, or <literal>VARIADIC</>.
      If omitted, the default is <literal>IN</>.
      Note that <command>COMMENT</command> does not actually pay
      any attention to <literal>OUT</> arguments, since only the input
      arguments are needed to determine the function's identity.
      So it is sufficient to list the <literal>IN</>, <literal>INOUT</>,
      and <literal>VARIADIC</> arguments.
-->
関数または集約の引数のモードで、<literal>IN</>、<literal>OUT</>、<literal>INOUT</>、<literal>VARIADIC</>のいずれかです。
省略時のデフォルトは<literal>IN</>です。
関数を識別するには入力引数のみが必要ですので、<command>COMMENT</command>が実際には<literal>OUT</>引数を無視することに注意してください。
したがって、<literal>IN</>、<literal>INOUT</>および<literal>VARIADIC</>引数を列挙することで十分です。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">argname</replaceable></term>

    <listitem>
     <para>
<!--
      The name of a function or aggregate argument.
      Note that <command>COMMENT</command> does not actually pay
      any attention to argument names, since only the argument data
      types are needed to determine the function's identity.
-->
関数または集約の引数の名前です。
関数の識別には引数データ型のみが必要ですので、<command>COMMENT</command>が実際には引数の名前を無視することに注意してください。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">argtype</replaceable></term>

    <listitem>
     <para>
<!--
      The data type of a function or aggregate argument.
-->
関数または集約の引数のデータ型です。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">large_object_oid</replaceable></term>
    <listitem>
     <para>
<!--
      The OID of the large object.
-->
ラージオブジェクトのOIDです。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">left_type</replaceable></term>
    <term><replaceable class="parameter">right_type</replaceable></term>
    <listitem>
     <para>
<!--
      The data type(s) of the operator's arguments (optionally
      schema-qualified).  Write <literal>NONE</> for the missing argument
      of a prefix or postfix operator.
-->
演算子の引数のデータ型（スキーマ修飾も可）です。
右単項演算子、左単項演算子における存在しない引数については<literal>NONE</>と記述してください。
     </para>
    </listitem>
   </varlistentry>

    <varlistentry>
     <term><literal>PROCEDURAL</literal></term>

     <listitem>
      <para>
<!--
       This is a noise word.
-->
これには意味はありません。
      </para>
     </listitem>
    </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">text</replaceable></term>
    <listitem>
     <para>
<!--
      The new comment, written as a string literal; or <literal>NULL</>
      to drop the comment.
-->
追加するコメントです。文字列リテラルとして記述します。
コメントを削除する場合は<literal>NULL</>を記述します。
     </para>
    </listitem>
   </varlistentry>

  </variablelist>
 </refsect1>

 <refsect1>
<!--
  <title>Notes</title>
-->
  <title>注釈</title>

  <para>
<!--
   There is presently no security mechanism for viewing comments: any user
   connected to a database can see all the comments for objects in
   that database.  For shared objects such as
   databases, roles, and tablespaces, comments are stored globally so any
   user connected to any database in the cluster can see all the comments
   for shared objects.  Therefore, don't put security-critical
   information in comments.
-->
現在、コメントの閲覧に関するセキュリティ機構は存在しません。
データベースに接続したユーザは誰でも、そのデータベース内のオブジェクトのコメントを参照することができます。
データベース、ロール、テーブル空間などの共有オブジェクトに対するコメントは大域的に格納され、クラスタ内の任意のデータベースに接続した任意のユーザが共有オブジェクトに対するコメントをすべて見ることができます。
そのため、コメントにはセキュリティ的に重大な情報を記載してはいけません。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>Examples</title>
-->
  <title>例</title>

  <para>
<!--
   Attach a comment to the table <literal>mytable</literal>:
-->
テーブル<literal>mytable</literal>にコメントを付けます。

<programlisting>
COMMENT ON TABLE mytable IS 'This is my table.';
</programlisting>

<!--
   Remove it again:
-->
先ほどのコメントを削除します。

<programlisting>
COMMENT ON TABLE mytable IS NULL;
</programlisting>
  </para>

  <para>
<!--
   Some more examples:
-->
その他の例をいくつか示します。

<programlisting>
COMMENT ON AGGREGATE my_aggregate (double precision) IS 'Computes sample variance';
COMMENT ON CAST (text AS int4) IS 'Allow casts from text to int4';
COMMENT ON COLLATION "fr_CA" IS 'Canadian French';
COMMENT ON COLUMN my_table.my_column IS 'Employee ID number';
COMMENT ON CONVERSION my_conv IS 'Conversion to UTF8';
COMMENT ON CONSTRAINT bar_col_cons ON bar IS 'Constrains column col';
COMMENT ON DATABASE my_database IS 'Development Database';
COMMENT ON DOMAIN my_domain IS 'Email Address Domain';
COMMENT ON EXTENSION hstore IS 'implements the hstore data type';
COMMENT ON FOREIGN DATA WRAPPER mywrapper IS 'my foreign data wrapper';
COMMENT ON FOREIGN TABLE my_foreign_table IS 'Employee Information in other database';
COMMENT ON FUNCTION my_function (timestamp) IS 'Returns Roman Numeral';
COMMENT ON INDEX my_index IS 'Enforces uniqueness on employee ID';
COMMENT ON LANGUAGE plpython IS 'Python support for stored procedures';
COMMENT ON LARGE OBJECT 346344 IS 'Planning document';
COMMENT ON MATERIALIZED VIEW my_matview IS 'Summary of order history';
COMMENT ON OPERATOR ^ (text, text) IS 'Performs intersection of two texts';
COMMENT ON OPERATOR - (NONE, integer) IS 'Unary minus';
COMMENT ON OPERATOR CLASS int4ops USING btree IS '4 byte integer operators for btrees';
COMMENT ON OPERATOR FAMILY integer_ops USING btree IS 'all integer operators for btrees';
COMMENT ON ROLE my_role IS 'Administration group for finance tables';
COMMENT ON RULE my_rule ON my_table IS 'Logs updates of employee records';
COMMENT ON SCHEMA my_schema IS 'Departmental data';
COMMENT ON SEQUENCE my_sequence IS 'Used to generate primary keys';
COMMENT ON SERVER myserver IS 'my foreign server';
COMMENT ON TABLE my_schema.my_table IS 'Employee Information';
COMMENT ON TABLESPACE my_tablespace IS 'Tablespace for indexes';
COMMENT ON TEXT SEARCH CONFIGURATION my_config IS 'Special word filtering';
COMMENT ON TEXT SEARCH DICTIONARY swedish IS 'Snowball stemmer for Swedish language';
COMMENT ON TEXT SEARCH PARSER my_parser IS 'Splits text into words';
COMMENT ON TEXT SEARCH TEMPLATE snowball IS 'Snowball stemmer';
COMMENT ON TRIGGER my_trigger ON my_table IS 'Used for RI';
COMMENT ON TYPE complex IS 'Complex number data type';
COMMENT ON VIEW my_view IS 'View of departmental costs';
</programlisting></para>
 </refsect1>

 <refsect1>
<!--
  <title>Compatibility</title>
-->
  <title>互換性</title>

  <para>
<!--
   There is no <command>COMMENT</command> command in the SQL standard.
-->
標準SQLには<command>COMMENT</command>はありません。
  </para>
 </refsect1>
</refentry>
