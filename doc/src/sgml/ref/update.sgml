<!--
doc/src/sgml/ref/update.sgml
PostgreSQL documentation
-->

<refentry id="SQL-UPDATE">
 <indexterm zone="sql-update">
  <primary>UPDATE</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>UPDATE</refentrytitle>
  <manvolnum>7</manvolnum>
<!--
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 言語</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>UPDATE</refname>
<!--
  <refpurpose>update rows of a table</refpurpose>
-->
  <refpurpose>テーブルの行を更新する</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
[ WITH [ RECURSIVE ] <replaceable class="parameter">with_query</replaceable> [, ...] ]
UPDATE [ ONLY ] <replaceable class="PARAMETER">table_name</replaceable> [ * ] [ [ AS ] <replaceable class="parameter">alias</replaceable> ]
    SET { <replaceable class="PARAMETER">column_name</replaceable> = { <replaceable class="PARAMETER">expression</replaceable> | DEFAULT } |
          ( <replaceable class="PARAMETER">column_name</replaceable> [, ...] ) = ( { <replaceable class="PARAMETER">expression</replaceable> | DEFAULT } [, ...] ) } [, ...]
    [ FROM <replaceable class="PARAMETER">from_list</replaceable> ]
    [ WHERE <replaceable class="PARAMETER">condition</replaceable> | WHERE CURRENT OF <replaceable class="PARAMETER">cursor_name</replaceable> ]
    [ RETURNING * | <replaceable class="parameter">output_expression</replaceable> [ [ AS ] <replaceable class="parameter">output_name</replaceable> ] [, ...] ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
<!--
  <title>Description</title>
-->
  <title>説明</title>

  <para>
<!--
   <command>UPDATE</command> changes the values of the specified
   columns in all rows that satisfy the condition. Only the columns to
   be modified need be mentioned in the <literal>SET</literal> clause;
   columns not explicitly modified retain their previous values.
-->
<command>UPDATE</command>は、条件を満たす全ての行の指定した列の値を変更します。
<literal>SET</literal>句には、変更する列のみを指定する必要があります。
<literal>SET</>句にて明示的に指定されなかった列の値は変更されません。
  </para>

  <para>
<!--
   There are two ways to modify a table using information contained in
   other tables in the database: using sub-selects, or specifying
   additional tables in the <literal>FROM</literal> clause. Which
   technique is more appropriate depends on the specific
   circumstances.
-->
データベース内の他のテーブルの情報を使用してテーブルを変更するには、2つの方法があります。
1つは副問い合わせを使用する方法、もう1つは<literal>FROM</literal>句で追加のテーブルを指定する方法です。
どちらの方法が適切であるかは状況次第です。
  </para>

  <para>
<!--
   The optional <literal>RETURNING</> clause causes <command>UPDATE</>
   to compute and return value(s) based on each row actually updated.
   Any expression using the table's columns, and/or columns of other
   tables mentioned in <literal>FROM</literal>, can be computed.
   The new (post-update) values of the table's columns are used.
   The syntax of the <literal>RETURNING</> list is identical to that of the
   output list of <command>SELECT</>.
-->
<literal>RETURNING</>句を指定すると、<command>UPDATE</>は実際に更新された各行に基づいて計算された値を返すようになります。
そのテーブルの列および<literal>FROM</literal>で指定された他のテーブルの列を使用した式を計算することができます。
テーブル列の新しい（更新された後の）値が使用されます。
<literal>RETURNING</>リストの構文は<command>SELECT</>の出力リストと同一です。
  </para>

  <para>
<!--
   You must have the <literal>UPDATE</literal> privilege on the table,
   or at least on the column(s) that are listed to be updated.
   You must also have the <literal>SELECT</literal>
   privilege on any column whose values are read in the
   <replaceable class="parameter">expressions</replaceable> or
   <replaceable class="parameter">condition</replaceable>.
-->
更新を行うためには、そのテーブルまたは少なくとも更新対象の列について<literal>UPDATE</literal>権限を持たなければなりません。
また<replaceable class="parameter">expressions</replaceable>や<replaceable class="parameter">condition</replaceable>で値を読み込む列に対する<literal>SELECT</literal>権限も必要になります。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>Parameters</title>
-->
  <title>パラメータ</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">with_query</replaceable></term>
    <listitem>
     <para>
<!--
      The <literal>WITH</literal> clause allows you to specify one or more
      subqueries that can be referenced by name in the <command>UPDATE</>
      query. See <xref linkend="queries-with"> and <xref linkend="sql-select">
      for details.
-->
<literal>WITH</literal>句により<command>UPDATE</>問い合わせ内で名前で参照可能な１つ以上の副問い合わせを指定することができます。
<xref linkend="queries-with">と<xref linkend="sql-select">を参照してください。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">table_name</replaceable></term>
    <listitem>
     <para>
<!--
      The name (optionally schema-qualified) of the table to update.
      If <literal>ONLY</> is specified before the table name, matching rows
      are updated in the named table only.  If <literal>ONLY</> is not
      specified, matching rows are also updated in any tables inheriting from
      the named table.  Optionally, <literal>*</> can be specified after the
      table name to explicitly indicate that descendant tables are included.
-->
更新対象のテーブルの名前です（スキーマ修飾名でも可）。 
テーブルの前に<literal>ONLY</>を指定すると、指名されたテーブルでのみマッチする行が更新されます。
<literal>ONLY</>を指定しないと、指名したテーブルから継承されたすべてのテーブルでもマッチする行が同時に更新されます。
オプションで、テーブル名の後に<literal>*</>を指定して、明示的に子テーブルが含まれることを示すこともできます。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">alias</replaceable></term>
    <listitem>
     <para>
<!--
      A substitute name for the target table. When an alias is
      provided, it completely hides the actual name of the table.  For
      example, given <literal>UPDATE foo AS f</>, the remainder of the
      <command>UPDATE</command> statement must refer to this table as
      <literal>f</> not <literal>foo</>.
-->
対象テーブルの代替名です。
別名が指定されると、テーブルの実際の名前は完全に隠蔽されます。
たとえば、<literal>UPDATE foo AS f</>では、<command>UPDATE</command>文の残りの部分では<literal>foo</>ではなく<literal>f</>としてこのテーブルを参照しなければなりません。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">column_name</replaceable></term>
    <listitem>
     <para>
<!--
      The name of a column in the table named by <replaceable
      class="PARAMETER">table_name</replaceable>.
      The column name can be qualified with a subfield name or array
      subscript, if needed.  Do not include the table's name in the
      specification of a target column &mdash; for example,
      <literal>UPDATE tab SET tab.col = 1</> is invalid.
-->
<replaceable class="PARAMETER">table_name</replaceable>で指名されたテーブル内の列名です。
必要に応じて、列名を副フィールド名や配列の指示子で修飾することも可能です。
対象列の指定にはテーブル名を含めないでください。
たとえば、<literal>UPDATE tab SET tab.col = 1</>は無効です。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">expression</replaceable></term>
    <listitem>
     <para>
<!--
      An expression to assign to the column.  The expression can use the
      old values of this and other columns in the table.
-->
列に代入する式です。
この式では、テーブル内の対象列やその他の列の変更前の値を使用することができます。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>DEFAULT</literal></term>
    <listitem>
     <para>
<!--
      Set the column to its default value (which will be NULL if no
      specific default expression has been assigned to it).
-->
      列にデフォルト値を設定します
      （デフォルト式が割り当てられていない場合はNULLになります）。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">from_list</replaceable></term>
    <listitem>
     <para>
<!--
      A list of table expressions, allowing columns from other tables
      to appear in the <literal>WHERE</> condition and the update
      expressions. This is similar to the list of tables that can be
      specified in the <xref linkend="sql-from"
      endterm="sql-from-title"> of a <command>SELECT</command>
      statement.  Note that the target table must not appear in the
      <replaceable>from_list</>, unless you intend a self-join (in which
      case it must appear with an alias in the <replaceable>from_list</>).
-->
<literal>WHERE</>条件や更新用の式において、他のテーブルの列を指定するために使用するテーブル式の集合です。
これは<command>SELECT</command>文の<xref linkend="sql-from" endterm="sql-from-title">で指定するテーブルのリストに似ています。
自己結合を行う場合を除き、<replaceable>from_list</>に更新対象のテーブルを含めてはいけません。
（自己結合を行う場合は、<replaceable>from_list</>内で更新対象のテーブルとその別名を指定しておく必要があります）。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">condition</replaceable></term>
    <listitem>
     <para>
<!--
      An expression that returns a value of type <type>boolean</type>.
      Only rows for which this expression returns <literal>true</>
      will be updated.
-->
      <type>boolean</type>型の値を返す式です。
      この式が<literal>true</>を返す行のみが更新されます。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">cursor_name</replaceable></term>
    <listitem>
     <para>
<!--
      The name of the cursor to use in a <literal>WHERE CURRENT OF</>
      condition.  The row to be updated is the one most recently fetched
      from this cursor.  The cursor must be a non-grouping
      query on the <command>UPDATE</>'s target table.
      Note that <literal>WHERE CURRENT OF</> cannot be
      specified together with a Boolean condition.  See
      <xref linkend="sql-declare">
      for more information about using cursors with
      <literal>WHERE CURRENT OF</>.
-->
<literal>WHERE CURRENT OF</>条件で使用されるカーソルの名前です。
更新対象の行は、そのカーソルからもっとも最近に取り出された行です。
カーソルは<command>UPDATE</>の対象テーブルに対するグループ化のない問い合わせでなければなりません。
<literal>WHERE CURRENT OF</>を論理条件といっしょに指定することはできません。
<literal>WHERE CURRENT OF</>付きのカーソル使用に関する情報については<xref linkend="sql-declare">を参照してください。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">output_expression</replaceable></term>
    <listitem>
     <para>
<!--
      An expression to be computed and returned by the <command>UPDATE</>
      command after each row is updated.  The expression can use any
      column names of the table named by <replaceable class="PARAMETER">table_name</replaceable>
      or table(s) listed in <literal>FROM</>.
      Write <literal>*</> to return all columns.
-->
各行を更新した後に計算され、<command>UPDATE</>によって返される式です。
この式には、<replaceable class="PARAMETER">table_name</replaceable>または<literal>FROM</>で指定したテーブル（複数可）の任意の列名を使用することができます。
すべての列を返す場合は<literal>*</>と記載してください。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">output_name</replaceable></term>
    <listitem>
     <para>
<!--
      A name to use for a returned column.
-->
返される列で使用される名前です。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
<!--
  <title>Outputs</title>
-->
  <title>出力</title>

  <para>
<!--
   On successful completion, an <command>UPDATE</> command returns a command
   tag of the form
-->
正常に処理が終わると、<command>UPDATE</>コマンドは以下の形式のコマンドタグを返します。
<screen>
UPDATE <replaceable class="parameter">count</replaceable>
</screen>
<!--
   The <replaceable class="parameter">count</replaceable> is the number
   of rows updated, including matched rows whose values did not change.
   Note that the number may be less than the number of rows that matched
   the <replaceable class="parameter">condition</replaceable> when
   updates were suppressed by a <literal>BEFORE UPDATE</> trigger.  If
   <replaceable class="parameter">count</replaceable> is 0, no rows were
   updated by the query (this is not considered an error).
-->
<replaceable class="parameter">count</replaceable>は,、合致したが変更されなかった行を含む、更新された行数を意味します。
<literal>BEFORE UPDATE</>トリガにより更新が抑制された場合に、<replaceable class="parameter">condition</replaceable>に合致した行数より少なくなる可能性があることに注意してください。
<replaceable class="parameter">count</replaceable>が0の場合は<replaceable class="parameter">condition</replaceable>に一致する行がなかったことを意味します
（これはエラーとはみなされません）。
  </para>

  <para>
<!--
   If the <command>UPDATE</> command contains a <literal>RETURNING</>
   clause, the result will be similar to that of a <command>SELECT</>
   statement containing the columns and values defined in the
   <literal>RETURNING</> list, computed over the row(s) updated by the
   command.
-->
<command>UPDATE</>コマンドが<literal>RETURNING</>句を持つ場合、その結果は、<literal>RETURNING</>リストで定義した列と値を持ち、そのコマンドで更新された行全体に対して計算を行う<command>SELECT</>文の結果と似たものになるでしょう。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>Notes</title>
-->
  <title>注釈</title>

  <para>
<!--
   When a <literal>FROM</> clause is present, what essentially happens
   is that the target table is joined to the tables mentioned in the
   <replaceable>from_list</replaceable>, and each output row of the join
   represents an update operation for the target table.  When using
   <literal>FROM</> you should ensure that the join
   produces at most one output row for each row to be modified.  In
   other words, a target row shouldn't join to more than one row from
   the other table(s).  If it does, then only one of the join rows
   will be used to update the target row, but which one will be used
   is not readily predictable.
-->
<literal>FROM</>句が存在する場合、基本的に、対象テーブルと<replaceable>from_list</replaceable>で指定されたテーブルが結合され、この結合の出力行が対象テーブルの更新操作の結果となります。
<literal>FROM</>句を使用する場合、更新対象テーブルの1行に対して、結合結果が複数行にならないように注意してください。
言い換えると、対象テーブルの個々の行は、他テーブルの複数の行と結合すべきではありません。
結合結果が複数行になった場合、対象行の更新には結合結果のいずれか1行のみが使用されますが、どの行が使用されるかは簡単には予測できません。
  </para>

  <para>
<!--
   Because of this indeterminacy, referencing other tables only within
   sub-selects is safer, though often harder to read and slower than
   using a join.
-->
このような不定性の問題があるため、他テーブルの参照は副問い合わせ内のみに留めておいた方がより安全です（ただし、結合よりも可読性や実行速度は低下します）。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>Examples</title>
-->
  <title>例</title>

  <para>
<!--
   Change the word <literal>Drama</> to <literal>Dramatic</> in the
   column <structfield>kind</> of the table <structname>films</structname>:
-->
<structname>films</structname>テーブルの<structfield>kind</>列にある<literal>Drama</>という単語を<literal>Dramatic</>に変更します。

<programlisting>
UPDATE films SET kind = 'Dramatic' WHERE kind = 'Drama';
</programlisting>
  </para>

  <para>
<!--
   Adjust temperature entries and reset precipitation to its default
   value in one row of the table <structname>weather</structname>:
-->
<structname>weather</structname>テーブルの特定の行に対し、気温に関する項目を調整し、降水量をデフォルト値に戻します。

<programlisting>
UPDATE weather SET temp_lo = temp_lo+1, temp_hi = temp_lo+15, prcp = DEFAULT
  WHERE city = 'San Francisco' AND date = '2003-07-03';
</programlisting>
  </para>

  <para>
<!--
   Perform the same operation and return the updated entries:
-->
同じ操作を行い、更新された項目を返します。

<programlisting>
UPDATE weather SET temp_lo = temp_lo+1, temp_hi = temp_lo+15, prcp = DEFAULT
  WHERE city = 'San Francisco' AND date = '2003-07-03'
  RETURNING temp_lo, temp_hi, prcp;
</programlisting>
  </para>

  <para>
<!--
   Use the alternative column-list syntax to do the same update:
-->
もう一つの方法である列リスト構文を使用して同じ更新を行います。
<programlisting>
UPDATE weather SET (temp_lo, temp_hi, prcp) = (temp_lo+1, temp_lo+15, DEFAULT)
  WHERE city = 'San Francisco' AND date = '2003-07-03';
</programlisting>
  </para>

  <para>
<!--
   Increment the sales count of the salesperson who manages the
   account for Acme Corporation, using the <literal>FROM</literal>
   clause syntax:
-->
<literal>FROM</literal>句の構文を使用して、Acme Corporationを顧客とするセールスマンのセールスカウントを1増加させます。
<programlisting>
UPDATE employees SET sales_count = sales_count + 1 FROM accounts
  WHERE accounts.name = 'Acme Corporation'
  AND employees.id = accounts.sales_person;
</programlisting>
  </para>

  <para>
<!--
   Perform the same operation, using a sub-select in the
   <literal>WHERE</literal> clause:
-->
<literal>WHERE</literal>句で副問い合わせを使用して、同じ操作を行います。
<programlisting>
UPDATE employees SET sales_count = sales_count + 1 WHERE id =
  (SELECT sales_person FROM accounts WHERE name = 'Acme Corporation');
</programlisting>
  </para>

  <para>
<!--
   Attempt to insert a new stock item along with the quantity of stock. If
   the item already exists, instead update the stock count of the existing
   item. To do this without failing the entire transaction, use savepoints:
-->
新しい商品とその在庫数を挿入します。
既にその商品が存在している場合は、代わりに既存商品の在庫数を更新します。
トランザクション全体が失敗することがないようにこの操作を行うには、セーブポイントを使用してください。
<programlisting>
BEGIN;
<!--
&#055;- other operations
-->
-- 何かしらの他の操作を行います。
SAVEPOINT sp1;
INSERT INTO wines VALUES('Chateau Lafite 2003', '24');
<!--
&#055;- Assume the above fails because of a unique key violation,
&055;- so now we issue these commands:
-->
-- 上記のコマンドが一意キー違反により失敗したとします。
-- この場合、次のコマンドを実行します。
ROLLBACK TO sp1;
UPDATE wines SET stock = stock + 24 WHERE winename = 'Chateau Lafite 2003';
<!--
&#055;- continue with other operations, and eventually
-->
-- 他の操作を続けた後、最後に次を実行します。
COMMIT;
</programlisting>
  </para>

  <para>
<!--
   Change the <structfield>kind</> column of the table
   <structname>films</structname> in the row on which the cursor
   <literal>c_films</> is currently positioned:
-->
<structname>films</structname>テーブルにおいて、<literal>c_films</>カーソルが現在位置している行の<structfield>kind</>列を変更します。
<programlisting>
UPDATE films SET kind = 'Dramatic' WHERE CURRENT OF c_films;
</programlisting></para>
 </refsect1>

 <refsect1>
<!--
  <title>Compatibility</title>
-->
  <title>互換性</title>

  <para>
<!--
   This command conforms to the <acronym>SQL</acronym> standard, except
   that the <literal>FROM</literal> and <literal>RETURNING</> clauses
   are <productname>PostgreSQL</productname> extensions, as is the ability
   to use <literal>WITH</> with <command>UPDATE</>.
-->
このコマンドは標準<acronym>SQL</acronym>に準拠しています。
ただし<literal>FROM</literal>句および<literal>RETURNING</>句は<productname>PostgreSQL</productname>の拡張です。
<command>UPDATE</>で<literal>WITH</>が使用可能であることも同様に拡張です。
  </para>

  <para>
<!--
   According to the standard, the column-list syntax should allow a list
   of columns to be assigned from a single row-valued expression, such
   as a sub-select:
-->
標準に従うと、列リスト構文は、副選択のような単一の行値式から代入される列のリストを許可しなければなりません。
<programlisting>
UPDATE accounts SET (contact_last_name, contact_first_name) =
    (SELECT last_name, first_name FROM salesmen
     WHERE salesmen.id = accounts.sales_id);
</programlisting>
<!--
   This is not currently implemented &mdash; the source must be a list
   of independent expressions.
-->
これは現時点ではサポートされていません。ソースは独立した式のリストでなければなりません。
  </para>

  <para>
<!--
   Some other database systems offer a <literal>FROM</> option in which
   the target table is supposed to be listed again within <literal>FROM</>.
   That is not how <productname>PostgreSQL</productname> interprets
   <literal>FROM</>.  Be careful when porting applications that use this
   extension.
-->
他のデータベースシステムには、<literal>FROM</>オプション内で、対象テーブルが再度指定されることを前提として動作するものもあります。
これは<productname>PostgreSQL</productname>における<literal>FROM</>の解釈方法とは異なります。
この拡張機能を使用するアプリケーションを移植する時は注意してください。
  </para>
 </refsect1>
</refentry>
