<!--
doc/src/sgml/ref/truncate.sgml
PostgreSQL documentation
-->

<refentry id="SQL-TRUNCATE">
 <indexterm zone="sql-truncate">
  <primary>TRUNCATE</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>TRUNCATE</refentrytitle>
  <manvolnum>7</manvolnum>
<!--
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 言語</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>TRUNCATE</refname>
<!--
  <refpurpose>empty a table or set of tables</refpurpose>
-->
  <refpurpose>1テーブルまたはテーブル群を空にする</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
TRUNCATE [ TABLE ] [ ONLY ] <replaceable class="PARAMETER">name</replaceable> [ * ] [, ... ]
    [ RESTART IDENTITY | CONTINUE IDENTITY ] [ CASCADE | RESTRICT ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
<!--
  <title>Description</title>
-->
  <title>説明</title>

  <para>
<!--
   <command>TRUNCATE</command> quickly removes all rows from a set of
   tables. It has the same effect as an unqualified
   <command>DELETE</command> on each table, but since it does not actually
   scan the tables it is faster. Furthermore, it reclaims disk space
   immediately, rather than requiring a subsequent <command>VACUUM</command>
   operation. This is most useful on large tables.
-->
<command>TRUNCATE</command>はテーブル群から全ての行を素早く削除します。
各テーブルに対して条件指定のない<command>DELETE</command>コマンドの実行と同じ効果を持ちますが、実際にテーブルを走査しない分、このコマンドの方が高速です。
さらに、その後に<command>VACUUM</command>操作を行うことなく、このコマンドはディスク領域を即座に回収します。
このコマンドは、大きなテーブルを対象とする場合に最も有用です。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>Parameters</title>
-->
  <title>パラメータ</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="PARAMETER">name</replaceable></term>
    <listitem>
     <para>
<!--
      The name (optionally schema-qualified) of a table to truncate.
      If <literal>ONLY</> is specified before the table name, only that table
      is truncated.  If <literal>ONLY</> is not specified, the table and all
      its descendant tables (if any) are truncated.  Optionally, <literal>*</>
      can be specified after the table name to explicitly indicate that
      descendant tables are included.
-->
空にするテーブルの名前です（スキーマ修飾名も可）。
テーブル名の前に<literal>ONLY</>が指定されている場合、そのテーブルのみを空にします。
<literal>ONLY</>が指定されていない場合、そのテーブルとそのすべての子テーブル（もしあれば）を空にします。
オプションで、テーブル名の後に<literal>*</>を指定することで、明示的に継承するテーブルも含まれることを示すことができます。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>RESTART IDENTITY</literal></term>
    <listitem>
     <para>
<!--
      Automatically restart sequences owned by columns of
      the truncated table(s).
-->
消去されるテーブルの列により所有されるシーケンスを自動的に再開始させます。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>CONTINUE IDENTITY</literal></term>
    <listitem>
     <para>
<!--
      Do not change the values of sequences.  This is the default.
-->
シーケンスの値を変更しません。これがデフォルトです。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>CASCADE</literal></term>
    <listitem>
     <para>
<!--
      Automatically truncate all tables that have foreign-key references
      to any of the named tables, or to any tables added to the group
      due to <literal>CASCADE</literal>.
-->
指定されたテーブル、または、<literal>CASCADE</literal>により削除対象テーブルとされたテーブルを参照する外部キーを持つテーブルすべてを自動的に空にします。

     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>RESTRICT</literal></term>
    <listitem>
     <para>
<!--
      Refuse to truncate if any of the tables have foreign-key references
      from tables that are not listed in the command.  This is the default.
-->
外部キーにより対象のテーブルを参照するテーブルのいずれかがこのコマンドで指定されていない場合、操作を拒否します。
これがデフォルトです。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
<!--
  <title>Notes</title>
-->
  <title>注釈</title>

  <para>
<!--
   You must have the <literal>TRUNCATE</literal> privilege on a table
   to truncate it.
-->
テーブルを空にするためにはそのテーブルに<literal>TRUNCATE</literal>権限を持たなければなりません。
  </para>

  <para>
<!--
   <command>TRUNCATE</> acquires an <literal>ACCESS EXCLUSIVE</> lock on each
   table it operates on, which blocks all other concurrent operations
   on the table.  When <literal>RESTART IDENTITY</> is specified, any
   sequences that are to be restarted are likewise locked exclusively.
   If concurrent access to a table is required, then
   the <command>DELETE</> command should be used instead.
-->
<command>TRUNCATE</>は操作対象の各テーブルに対する<literal>ACCESS EXCLUSIVE</>ロックを獲得します。
これは、この他のそのテーブルに対する同時操作をすべてブロックします。
<literal>RESTART IDENTITY</>が指定された場合、初期化対象のシーケンスがあると、それは同様に排他ロックされます。
テーブルへの同時アクセスが必要ならば、代わりに <command>DELETE</>コマンドを使用しなければなりません。
  </para>

  <para>
<!--
   <command>TRUNCATE</> cannot be used on a table that has foreign-key
   references from other tables, unless all such tables are also truncated
   in the same command.  Checking validity in such cases would require table
   scans, and the whole point is not to do one.  The <literal>CASCADE</>
   option can be used to automatically include all dependent tables &mdash;
   but be very careful when using this option, or else you might lose data you
   did not intend to!
-->
そのテーブルが他のテーブルから外部キーで参照されている場合、<command>TRUNCATE</>でそれらのテーブルをすべて空にするように指定していない限り、<command>TRUNCATE</>を使用することはできません。
このような場合に有効性を検査するならばテーブルスキャンが必要になりますが、テーブルスキャンを行うのであれば、このコマンドの利点がなくなるからです。
<literal>CASCADE</>を使用して、自動的にすべての依存テーブルを含めることができます。
しかし、意図しないデータ損失の可能性がありますので、このオプションを使用する時には十分に注意してください。

  </para>

  <para>
<!--
   <command>TRUNCATE</> will not fire any <literal>ON DELETE</literal>
   triggers that might exist for the tables.  But it will fire
   <literal>ON TRUNCATE</literal> triggers.
   If <literal>ON TRUNCATE</> triggers are defined for any of
   the tables, then all <literal>BEFORE TRUNCATE</literal> triggers are
   fired before any truncation happens, and all <literal>AFTER
   TRUNCATE</literal> triggers are fired after the last truncation is
   performed and any sequences are reset.
   The triggers will fire in the order that the tables are
   to be processed (first those listed in the command, and then any
   that were added due to cascading).
-->
<command>TRUNCATE</>は、テーブルに<literal>ON DELETE</literal>トリガがあっても、それを発行しません。
しかし、<literal>ON TRUNCATE</literal>トリガを発行します。
テーブルのいずれかに<literal>ON TRUNCATE</literal>トリガが定義されている場合、何らかの消去が行われる前にすべての<literal>BEFORE TRUNCATE</literal>トリガが発行されます。
また、最後の消去がなされ、シーケンスが初期化された後すべての<literal>AFTER TRUNCATE</literal>トリガが発行されます。
トリガは処理されるテーブルの順番（コマンドに列挙されたものが先、その後にカスケードのために追加されたもの）に発行されます。
  </para>

  <warning>
   <para>
<!--
    <command>TRUNCATE</> is not MVCC-safe (see <xref linkend="mvcc">
     for general information about MVCC).  After truncation, the table
     will appear empty to all concurrent transactions, even if they
     are using a snapshot taken before the truncation occurred.  This
     will only be an issue for a transaction that did not access the
     truncated table before the truncation happened &mdash; any
     transaction that has done so would hold at least an
     <literal>ACCESS SHARE</literal> lock, which would block
     <command>TRUNCATE</> until that transaction completes.  So
     truncation will not cause any apparent inconsistency in the table
     contents for successive queries on the same table, but it could
     cause visible inconsistency between the contents of the truncated
     table and other tables in the database.
-->
<command>TRUNCATE</>はMVCC的に安全ではありません。
（MVCCに関する一般的な情報については<xref linkend="mvcc">を参照してください。）
削除の後、テーブルはすべてのトランザクションから見て、たとえそのトランザクションが始まる前のスナップショットを使用していたとしても、空に見えます。
これは削除が始まる前にテーブルを参照しなかったトランザクションに関してのみ問題となります。
そうしたトランザクションでは少なくとも <literal>ACCESS SHARE</literal>ロックを保持しますので、そのトランザクションが終わるまで<command>TRUNCATE</>はブロックされます。
このため、トランザクションでは、同一テーブルに対する後の問い合わせにおいてその内容に明らかな矛盾は発生しませんが、削除されたテーブルと他のテーブルとの間の内容に目に見える矛盾が発生します。
   </para>
  </warning>

  <para>
<!--
   <command>TRUNCATE</> is transaction-safe with respect to the data
   in the tables: the truncation will be safely rolled back if the surrounding
   transaction does not commit.
-->
テーブル内のデータという観点では、<command>TRUNCATE</>はトランザクション的に安全です。
前後のトランザクションがコミットされなければ消去は安全にロールバックされます。
  </para>

  <para>
<!--
   When <literal>RESTART IDENTITY</> is specified, the implied
   <command>ALTER SEQUENCE RESTART</> operations are also done
   transactionally; that is, they will be rolled back if the surrounding
   transaction does not commit.  This is unlike the normal behavior of
   <command>ALTER SEQUENCE RESTART</>.  Be aware that if any additional
   sequence operations are done on the restarted sequences before the
   transaction rolls back, the effects of these operations on the sequences
   will be rolled back, but not their effects on <function>currval()</>;
   that is, after the transaction <function>currval()</> will continue to
   reflect the last sequence value obtained inside the failed transaction,
   even though the sequence itself may no longer be consistent with that.
   This is similar to the usual behavior of <function>currval()</> after
   a failed transaction.
-->
<literal>RESTART IDENTITY</>が指定された場合、暗黙的に<command>ALTER SEQUENCE RESTART</>操作がトランザクション的に行われます。
つまりそれを囲むトランザクションがコミットされなければ、ロールバックされます。
これは通常の<command>ALTER SEQUENCE RESTART</>とは異なる動作です。
トランザクションがロールバックされる前に、初期化したシーケンスに対してさらにシーケンス操作を行う場合には注意してください。
シーケンスに対するこれらの操作の影響はロールバックされますが、<function>currval()</>への影響はロールバックされません。
つまりトランザクションの後、<function>currval()</>は、シーケンス自体と値とが一貫性のない状態になっていたとしても、失敗したトランザクションの内側で得た最後のシーケンス値を継続して反映します。
これは、失敗したトランザクションの後の<function>currval()</>の通常の動作と同じです。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>Examples</title>
-->
  <title>例</title>

  <para>
<!--
   Truncate the tables <literal>bigtable</literal> and
   <literal>fattable</literal>:
-->
<literal>bigtable</literal>テーブルおよび<literal>fattable</literal>テーブルを空にします。

<programlisting>
TRUNCATE bigtable, fattable;
</programlisting>
  </para>

  <para>
<!--
   The same, and also reset any associated sequence generators:
-->
以下も同じですが、ここでは関連するシーケンスジェネレータをすべてリセットします。

<programlisting>
TRUNCATE bigtable, fattable RESTART IDENTITY;
</programlisting>
  </para>

  <para>
<!--
   Truncate the table <literal>othertable</literal>, and cascade to any tables
   that reference <literal>othertable</literal> via foreign-key
   constraints:
-->
<literal>othertable</literal>テーブル、および、外部キー制約により<literal>othertable</literal>を参照するすべてのテーブルを空にします。

<programlisting>
TRUNCATE othertable CASCADE;
</programlisting></para>
 </refsect1>

 <refsect1>
<!--
  <title>Compatibility</title>
-->
  <title>互換性</title>

  <para>
<!--
   The SQL:2008 standard includes a <command>TRUNCATE</command> command
   with the syntax <literal>TRUNCATE TABLE
   <replaceable>tablename</replaceable></literal>.  The clauses
   <literal>CONTINUE IDENTITY</literal>/<literal>RESTART IDENTITY</literal>
   also appear in that standard, but have slightly different though related
   meanings.  Some of the concurrency behavior of this command is left
   implementation-defined by the standard, so the above notes should be
   considered and compared with other implementations if necessary.
-->
標準SQL:2008には、<literal>TRUNCATE TABLE <replaceable>tablename</replaceable></literal>という構文の<command>TRUNCATE</command>コマンドが含まれます。
<literal>CONTINUE IDENTITY</literal>/<literal>RESTART IDENTITY</literal>句も標準に記載され、関連してはいるのですが、若干異なります。
標準では、このコマンドの同時実行に関する動作の一部は実装に依存するものとされています。
このため、上記注釈を検討し、必要に応じて他の実装と比べなければなりません。
  </para>
 </refsect1>
</refentry>
