<!--
doc/src/sgml/ref/pg_dump.sgml
PostgreSQL documentation
-->

<refentry id="APP-PGDUMP">
 <indexterm zone="app-pgdump">
  <primary>pg_dump</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>pg_dump</refentrytitle>
  <manvolnum>1</manvolnum>
<!--
  <refmiscinfo>Application</refmiscinfo>
-->
<refmiscinfo>アプリケーション</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>pg_dump</refname>

  <refpurpose>
<!--
   extract a <productname>PostgreSQL</productname> database into a script file or other archive file
-->
<productname>PostgreSQL</productname>データベースをスクリプトファイルまたは他のアーカイブファイルへ抽出する
  </refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <cmdsynopsis>
   <command>pg_dump</command>
   <arg rep="repeat"><replaceable>connection-option</replaceable></arg>
   <arg rep="repeat"><replaceable>option</replaceable></arg>
   <arg choice="opt"><replaceable>dbname</replaceable></arg>
  </cmdsynopsis>
 </refsynopsisdiv>


 <refsect1 id="pg-dump-description">
  <title>
<!--
   Description
-->
説明
  </title>

  <para>
<!--
   <application>pg_dump</application> is a utility for backing up a
   <productname>PostgreSQL</productname> database. It makes consistent
   backups even if the database is being used concurrently.
   <application>pg_dump</application> does not block other users
   accessing the database (readers or writers).
-->
<application>pg_dump</application>は<productname>PostgreSQL</productname>データベースをバックアップするユーティリティです。
データベースを使用中であっても一貫性のあるバックアップを作成することができます。
<application>pg_dump</application>は他のユーザによるデータベースへのアクセス（読み書き）をブロックしません。
  </para>

  <para>
<!--
   Dumps can be output in script or archive file formats. Script
   dumps are plain-text files containing the SQL commands required
   to reconstruct the database to the state it was in at the time it was
   saved. To restore from such a script, feed it to <xref
   linkend="app-psql">. Script files
   can be used to reconstruct the database even on other machines and
   other architectures; with some modifications, even on other SQL
   database products.
-->
ダンプはスクリプト形式、または、アーカイブファイル形式で出力することができます。
スクリプトダンプは、保存した時点の状態のデータベースを再構成するために必要なSQLコマンドが書き込まれた平文ファイルです。
このスクリプトを使ってリストアを行うには、それを<xref linkend="app-psql">に読み込ませます。
スクリプトファイルを使えば、ダンプを行ったのとは別のマシンや別のアーキテクチャ上でも、データベースを再構築することができます。
また、多少編集すれば他のSQLデータベース製品上でもデータベースの再構築が可能です。
  </para>

  <para>
<!--
   The alternative archive file formats must be used with
   <xref linkend="app-pgrestore"> to rebuild the database.  They
   allow <application>pg_restore</application> to be selective about
   what is restored, or even to reorder the items prior to being
   restored.
   The archive file formats are designed to be portable across
   architectures.
-->
もう1つの形式であるアーカイブファイル形式を使ってデータベースを再構築するには、<xref linkend="app-pgrestore">を使用しなければなりません。
このファイルを使用すると、<application>pg_restore</application>がリストア対象を選択したり、リストアするアイテムを並び替えたりできます。
アーカイブファイルもまた、アーキテクチャを越えて移植できるように設計されています。
  </para>

  <para>
<!--
   When used with one of the archive file formats and combined with
   <application>pg_restore</application>,
   <application>pg_dump</application> provides a flexible archival and
   transfer mechanism. <application>pg_dump</application> can be used to
   backup an entire database, then <application>pg_restore</application>
   can be used to examine the archive and/or select which parts of the
   database are to be restored. The most flexible output file formats are
   the <quote>custom</quote> format (<option>-Fc</option>) and the
   <quote>directory</quote> format(<option>-Fd</option>). They allow
   for selection and reordering of all archived items, support parallel
   restoration, and are compressed by default. The <quote>directory</quote>
   format is the only format that supports parallel dumps.
-->
いずれかのアーカイブファイル形式を<application>pg_restore</application>と組み合わせて使用する場合は、<application>pg_dump</application>の柔軟なアーカイブ/転送機構が利用できます。
具体的には、<application>pg_dump</application>を使用してデータベース全体をバックアップし、<application>pg_restore</application>を使用して、アーカイブの内容を検査したり、データベースの一部を選択してリストアしたりすることができます。
最も柔軟な出力ファイル形式は<quote>カスタム</quote>形式（<option>-Fc</option>）と<quote>ディレクトリ</quote>形式（<option>-Fd</option>）です。
これらはすべての保存された項目の選択や並び換えを行うことができ、並行リストアをサポートし、デフォルトで圧縮されます。
<quote>ディレクトリ</quote>形式は、並行ダンプをサポートする唯一の形式です。
  </para>

  <para>
<!--
   While running <application>pg_dump</application>, one should examine the
   output for any warnings (printed on standard error), especially in
   light of the limitations listed below.
-->
<application>pg_dump</application>の実行中は、標準エラーに出力される警告（特に後述の制限に関する警告）が出力されていないか確認してください。
  </para>

 </refsect1>

 <refsect1 id="pg-dump-options">
<!--
  <title>Options</title>
-->
<title>オプション</title>

  <para>
<!--
    The following command-line options control the content and
    format of the output.
-->
以下のコマンドラインオプションは出力内容とその形式を制御します。

    <variablelist>
     <varlistentry>
      <term><replaceable class="parameter">dbname</replaceable></term>
      <listitem>
       <para>
<!--
        Specifies the name of the database to be dumped.  If this is
        not specified, the environment variable
        <envar>PGDATABASE</envar> is used.  If that is not set, the
        user name specified for the connection is used.
-->
ダンプするデータベースの名前を指定します。
指定されていない場合は環境変数<envar>PGDATABASE</envar>が使われます。
この変数も設定されていない場合は、接続のために指定されたユーザ名が使用されます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-a</></term>
      <term><option>--data-only</></term>
      <listitem>
       <para>
<!--
        Dump only the data, not the schema (data definitions).
        Table data, large objects, and sequence values are dumped.
-->
データのみをダンプし、スキーマ（データ定義）はダンプしません。
テーブルデータ、ラージオブジェクト、シーケンス値がダンプされます。
       </para>

       <para>
<!--
        This option is similar to, but for historical reasons not identical
        to, specifying <option>&#045;-section=data</>.
-->
このオプションは<option>--section=data</>を指定することと似ていますが、歴史的な理由で同一ではありません。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-b</></term>
      <term><option>--blobs</></term>
      <listitem>
       <para>
<!--
        Include large objects in the dump.  This is the default behavior
        except when <option>&#045;&#045;schema</>, <option>&#045;&#045;table</>, or
        <option>&#045;&#045;schema-only</> is specified, so the <option>-b</>
        switch is only useful to add large objects to selective dumps.
-->
ラージオブジェクトをダンプに含めます。
<option>--schema</>、<option>--table</>、<option>--schema-only</>が指定された場合を除き、これがデフォルトの動作です。
したがって、<option>-b</>オプションは選択的なダンプにラージオブジェクトを追加する場合にのみ有用です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-c</option></term>
      <term><option>--clean</option></term>
      <listitem>
       <para>
<!--
        Output commands to clean (drop)
        database objects prior to outputting the commands for creating them.
        (Unless <option>&#045;-if-exists</> is also specified,
        restore might generate some harmless error messages, if any objects
        were not present in the destination database.)
-->
データベースオブジェクトを作成するコマンドの前に、データベースオブジェクトを整理（削除）するコマンドを書き出します。
（<option>--if-exists</>も指定されなければ、リストア先のデータベースの中に存在しないオブジェクトがある場合に、害がないエラーがいくつか発生するかもしれません。）
       </para>

       <para>
<!--
        This option is only meaningful for the plain-text format.  For
        the archive formats, you can specify the option when you
        call <command>pg_restore</command>.
-->
このオプションは平文形式の場合にのみ有効です。
アーカイブ形式では、<command>pg_restore</command>を呼び出す時にこのオプションを指定することができます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-C</></term>
      <term><option>--create</></term>
      <listitem>
       <para>
<!--
        Begin the output with a command to create the
        database itself and reconnect to the created database.  (With a
        script of this form, it doesn't matter which database in the
        destination installation you connect to before running the script.)
        If <option>&#045;-clean</option> is also specified, the script drops and
        recreates the target database before reconnecting to it.
-->
初めにデータベース自体を作成するコマンドを出力し、その後、作成したデータベースに接続するコマンドを出力します
（このようなスクリプトを使用すると、スクリプトを実行する前に対象のインストレーションの中のどのデータベースに接続すればよいかという問題を考える必要がなくなります）。
<option>--clean</option>も同時に指定されている場合、このスクリプトは接続する前に対象データベースを削除し再作成します。
       </para>

       <para>
<!--
        This option is only meaningful for the plain-text format.  For
        the archive formats, you can specify the option when you
        call <command>pg_restore</command>.
-->
このオプションは平文形式の場合にのみ有効です。
アーカイブ形式では、<command>pg_restore</command>を呼び出す時にこのオプションを指定することができます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-E <replaceable class="parameter">encoding</replaceable></option></term>
      <term><option>--encoding=<replaceable class="parameter">encoding</replaceable></option></term>
      <listitem>
       <para>
<!--
        Create the dump in the specified character set encoding. By default,
        the dump is created in the database encoding.  (Another way to get the
        same result is to set the <envar>PGCLIENTENCODING</envar> environment
        variable to the desired dump encoding.)
-->
指定した文字セット符号化方式でダンプを作成します。
デフォルトではダンプはデータベースの符号化方式で作成されます。
（環境変数<envar>PGCLIENTENCODING</envar>を好みのダンプ時の符号化方式に設定することで、同じ結果を得ることができます。）
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-f <replaceable class="parameter">file</replaceable></option></term>
      <term><option>--file=<replaceable class="parameter">file</replaceable></option></term>
      <listitem>
       <para>
<!--
        Send output to the specified file. This parameter can be omitted for
        file based output formats, in which case the standard output is used.
        It must be given for the directory output format however, where it
        specifies the target directory instead of a file. In this case the
        directory is created by <command>pg_dump</command> and must not exist
        before.
-->
出力を指定のファイルに送ります。
ファイルを基にする出力形式ではこのパラメータは省くことができます。
省略時は標準出力が使用されます。
しかしディレクトリ出力形式の場合は、省略することはできず、ファイルではなく対象ディレクトリを指定します。
この場合、ディレクトリは<command>pg_dump</command>が生成しますので、事前に存在してはなりません。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-F <replaceable class="parameter">format</replaceable></option></term>
      <term><option>--format=<replaceable class="parameter">format</replaceable></option></term>
      <listitem>
       <para>
<!--
        Selects the format of the output.
        <replaceable>format</replaceable> can be one of the following:
-->
出力形式を選択します。
<replaceable>format</replaceable>には以下のいずれかを取ることができます。

       <variablelist>
        <varlistentry>
         <term><literal>p</></term>
         <term><literal>plain</></term>
         <listitem>
          <para>
<!--
           Output a plain-text <acronym>SQL</acronym> script file (the default).
-->
平文の<acronym>SQL</acronym>スクリプトファイルを出力します（デフォルト）。
          </para>
         </listitem>
        </varlistentry>

        <varlistentry>
         <term><literal>c</></term>
         <term><literal>custom</></term>
         <listitem>
          <para>
<!--
           Output a custom-format archive suitable for input into
           <application>pg_restore</application>.
           Together with the directory output format, this is the most flexible
           output format in that it allows manual selection and reordering of
           archived items during restore. This format is also compressed by
           default.
-->
<application>pg_restore</application>への入力に適したカスタム形式アーカイブを出力します。
ディレクトリ出力形式と一緒に使用する場合、リストア時に手作業で保管された項目の選択、再順序付けできますので、これはもっとも柔軟な出力形式です。
また、この形式はデフォルトで圧縮されます。
          </para>
         </listitem>
        </varlistentry>

        <varlistentry>
         <term><literal>d</></term>
         <term><literal>directory</></term>
         <listitem>
          <para>
<!--
           Output a directory-format archive suitable for input into
           <application>pg_restore</application>. This will create a directory
           with one file for each table and blob being dumped, plus a
           so-called Table of Contents file describing the dumped objects in a
           machine-readable format that <application>pg_restore</application>
           can read. A directory format archive can be manipulated with
           standard Unix tools; for example, files in an uncompressed archive
           can be compressed with the <application>gzip</application> tool.
           This format is compressed by default and also supports parallel
           dumps.
-->
<application>pg_restore</application>への入力に適したディレクトリ形式のアーカイブを出力します。
これは、ダンプされる各テーブルおよびblobごとに1つのファイル、さらに、<application>pg_restore</application>から読み取り可能な、機械的に読み取り易い書式でダンプしたオブジェクトを記述する目次ファイルと呼ばれるファイルを持つディレクトリを作成します。
ディレクトリ形式アーカイブは標準Unixツールで操作することができます。
例えば、未圧縮アーカイブ内のファイルを<application>gzip</application>ツールを使用して圧縮することができます。
この形式はデフォルトで圧縮されます。
また並行ダンプをサポートします。
          </para>
         </listitem>
        </varlistentry>

        <varlistentry>
         <term><literal>t</></term>
         <term><literal>tar</></term>
         <listitem>
          <para>
<!--
           Output a <command>tar</command>-format archive suitable for input
           into <application>pg_restore</application>. The tar-format is
           compatible with the directory-format; extracting a tar-format
           archive produces a valid directory-format archive.
           However, the tar-format does not support compression and has a
           limit of 8 GB on the size of individual tables. Also, the relative
           order of table data items cannot be changed during restore.
-->
<application>pg_restore</application>への入力に適した<command>tar</command>形式のアーカイブを出力します。
このtar形式はディレクトリ形式と互換性があります。
tar形式アーカイブを展開すると、有効なディレクトリ形式のアーカイブを生成します。
しかしtar形式は圧縮をサポートせず、個々のテーブルのサイズに関して8ギガバイトという上限があります。
またリストア時にテーブルデータ項目の相対的な順序を変更することはできません。
          </para>
         </listitem>
        </varlistentry>
       </variablelist></para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-i</></term>
      <term><option>--ignore-version</></term>
      <listitem>
       <para>
<!--
        A deprecated option that is now ignored.
-->
廃止されたオプションであり、現在は無視されます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-j <replaceable class="parameter">njobs</replaceable></></term>
      <term><option>--jobs=<replaceable class="parameter">njobs</replaceable></></term>
      <listitem>
       <para>
<!--
        Run the dump in parallel by dumping <replaceable class="parameter">njobs</replaceable>
        tables simultaneously. This option reduces the time of the dump but it also
        increases the load on the database server. You can only use this option with the
        directory output format because this is the only output format where multiple processes
        can write their data at the same time.
-->
<replaceable class="parameter">njobs</replaceable>個のテーブルを同時にダンプすることによって、並行してダンプを実行します。
このオプションはダンプにかかる時間を減らしますが、データベースサーバの負荷を増やします。
このオプションはディレクトリ出力形式でのみ使用することができます。
複数のプロセスが同時にそのデータを書き出すことができるのはディレクトリ形式だけだからです。
       </para>
<!--
       <para><application>pg_dump</> will open <replaceable class="parameter">njobs</replaceable>
        + 1 connections to the database, so make sure your <xref linkend="guc-max-connections">
        setting is high enough to accommodate all connections.
-->
       <para>
<application>pg_dump</>は<replaceable class="parameter">njobs</replaceable>+1個のデータベース接続を開きます。
このため、すべての接続を収容できる程度に<xref linkend="guc-max-connections">が高いことを確認してください。
       </para>
       <para>
<!--
        Requesting exclusive locks on database objects while running a parallel dump could
        cause the dump to fail. The reason is that the <application>pg_dump</> master process
        requests shared locks on the objects that the worker processes are going to dump later
        in order to
        make sure that nobody deletes them and makes them go away while the dump is running.
        If another client then requests an exclusive lock on a table, that lock will not be
        granted but will be queued waiting for the shared lock of the master process to be
        released. Consequently any other access to the table will not be granted either and
        will queue after the exclusive lock request. This includes the worker process trying
        to dump the table. Without any precautions this would be a classic deadlock situation.
        To detect this conflict, the <application>pg_dump</> worker process requests another
        shared lock using the <literal>NOWAIT</> option. If the worker process is not granted
        this shared lock, somebody else must have requested an exclusive lock in the meantime
        and there is no way to continue with the dump, so <application>pg_dump</> has no choice
        but to abort the dump.
-->
並行ダンプを実行している時にデータベースオブジェクトに対して排他ロックを要求すると、ダンプが失敗する可能性があります。
ダンプ実行中に誰かがダンプ予定のオブジェクトを削除してそれがなくなってしまうことがないように、ワーカプロセスがダンプする予定のオブジェクトに対して<application>pg_dump</>のマスタプロセスが共有ロックを要求するのがその理由です。
その後他のクライアントがテーブルに対する排他ロックを要求すると、
そのロックは許可されませんが、マスタプロセスが共有ロックを解放することを待機するキューに保管されます。
その結果、テーブルへのその他のアクセスは許可されず、排他ロック要求の後のキューに保管されます。
これには、そのテーブルをダンプしようとする作業用プロセスも含まれます。
何らかの注意をしないと、古典的なデッドロック状態になります。
この競合を検知するために<application>pg_dump</>の作業用プロセスは<literal>NOWAIT</>オプションを使用する別の共有ロックを要求します。
作業用プロセスによる共有ロックが許可されない場合、だれかがその時に排他ロックを要求していることになり、ダンプを継続することができません。
<application>pg_dump</>には、ダンプを中断するしか選択肢がありません。
       </para>
       <para>
<!--
        For a consistent backup, the database server needs to support synchronized snapshots,
        a feature that was introduced in <productname>PostgreSQL</productname> 9.2. With this
        feature, database clients can ensure they see the same data set even though they use
        different connections. <command>pg_dump -j</command> uses multiple database
        connections; it connects to the database once with the master process and
        once again for each worker job. Without the synchronized snapshot feature, the
        different worker jobs wouldn't be guaranteed to see the same data in each connection,
        which could lead to an inconsistent backup.
-->
一貫したバックアップのためには、データベースサーバは、<productname>PostgreSQL</productname> 9.2で導入された機能である、同期されたスナップショットをサポートする必要があります。
この機能を用いて、データベースクライアントは異なる接続を使用していたとしても、確実に同じデータセットを参照することができます。
<command>pg_dump -j</command>は複数のデータベース接続を使用します。
マスタプロセスで１つ、作業用ジョブそれぞれでも１つ、データベースと接続します。
同期されたスナップショット機能がないと、異なる作業用ジョブがそれぞれの接続で同じデータを参照していることが保証されず、一貫性がないバックアップになってしまいます。
       </para>
       <para>
<!--
        If you want to run a parallel dump of a pre-9.2 server, you need to make sure that the
        database content doesn't change from between the time the master connects to the
        database until the last worker job has connected to the database. The easiest way to
        do this is to halt any data modifying processes (DDL and DML) accessing the database
        before starting the backup. You also need to specify the
        <option>&#045;-no-synchronized-snapshots</option> parameter when running
        <command>pg_dump -j</command> against a pre-9.2 <productname>PostgreSQL</productname>
        server.
-->
9.2より前のサーバで並行ダンプを実行させたいのであれば、データベースの内容が、マスタがデータベースに接続してから最後の作業用ジョブがデータベースに接続するまでの間に変更されないことを確実にしなければなりません。
このためのもっとも簡単な方法は、バックアップを始める前にデータを変更するプロセス（DDLおよびDML）がデータベースにアクセスすることを止めさせることです。
また、9.2より前の<productname>PostgreSQL</productname>に対して<command>pg_dump -j</command>を実行する場合は<option>--no-synchronized-snapshots</option>パラメータを指定する必要もあります。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-n <replaceable class="parameter">schema</replaceable></option></term>
      <term><option>--schema=<replaceable class="parameter">schema</replaceable></option></term>
      <listitem>
       <para>
<!--
        Dump only schemas matching <replaceable
        class="parameter">schema</replaceable>; this selects both the
        schema itself, and all its contained objects.  When this option is
        not specified, all non-system schemas in the target database will be
        dumped.  Multiple schemas can be
        selected by writing multiple <option>-n</> switches.  Also, the
        <replaceable class="parameter">schema</replaceable> parameter is
        interpreted as a pattern according to the same rules used by
        <application>psql</>'s <literal>\d</> commands (see <xref
        linkend="APP-PSQL-patterns" endterm="APP-PSQL-patterns-title">),
        so multiple schemas can also be selected by writing wildcard characters
        in the pattern.  When using wildcards, be careful to quote the pattern
        if needed to prevent the shell from expanding the wildcards;  see
        <xref linkend="pg-dump-examples" endterm="pg-dump-examples-title">.
-->
<replaceable class="parameter">schema</>にマッチするスキーマのみをダンプします。
これはスキーマ自体とそこに含まれるオブジェクトすべてを選択します。
このオプションが指定されなければ、対象データベース内にあるシステム以外のスキーマ全てがダンプされます。
複数の<option>-n</>オプションを記述することで、複数のスキーマを選択することができます。
また、<replaceable class="parameter">schema</replaceable>パラメータは<application>psql</>の<literal>\d</>コマンドと同じ規則に従うパターン（<xref linkend="APP-PSQL-patterns" endterm="APP-PSQL-patterns-title">参照）として解釈されます。
ですので、ワイルドカード文字をパターン内に記述することで、複数のスキーマを選択することもできます。
ワイルドカードを使用する時は、シェルがそのワイルドカードを展開しないように、必要であればパターンを引用符で括ってください。
<xref linkend="pg-dump-examples" endterm="pg-dump-examples-title">を参照してください。
       </para>

       <note>
        <para>
<!--
         When <option>-n</> is specified, <application>pg_dump</application>
         makes no attempt to dump any other database objects that the selected
         schema(s) might depend upon. Therefore, there is no guarantee
         that the results of a specific-schema dump can be successfully
         restored by themselves into a clean database.
-->
<option>-n</>が指定されると、<application>pg_dump</application>は選択したスキーマ内のオブジェクトが依存する可能性がある、その他のデータベースオブジェクトのダンプを行いません。
したがって、スキーマ指定のダンプ結果を初期状態のデータベースに正常にリストアできるという保証はありません。
        </para>
       </note>

       <note>
        <para>
<!--
         Non-schema objects such as blobs are not dumped when <option>-n</> is
         specified.  You can add blobs back to the dump with the
         <option>&#045;&#045;blobs</> switch.
-->
<option>-n</>が指定されると、blobなどの非スキーマオブジェクトはダンプされません。
<option>--blobs</>オプションをつけてダンプを行うことでblobも追加されます。
        </para>
       </note>

      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-N <replaceable class="parameter">schema</replaceable></option></term>
      <term><option>--exclude-schema=<replaceable class="parameter">schema</replaceable></option></term>
      <listitem>
       <para>
<!--
        Do not dump any schemas matching the <replaceable
        class="parameter">schema</replaceable> pattern.  The pattern is
        interpreted according to the same rules as for <option>-n</>.
        <option>-N</> can be given more than once to exclude schemas
        matching any of several patterns.
-->
<replaceable class="parameter">schema</>パターンにマッチするスキーマをダンプしません。
このパターンは<option>-n</>と同様の規則に従って解釈されます。
<option>-N</>を複数指定して、複数のパターンのいずれかにマッチするスキーマを除外することができます。
       </para>

       <para>
<!--
        When both <option>-n</> and <option>-N</> are given, the behavior
        is to dump just the schemas that match at least one <option>-n</>
        switch but no <option>-N</> switches.  If <option>-N</> appears
        without <option>-n</>, then schemas matching <option>-N</> are
        excluded from what is otherwise a normal dump.
-->
<option>-n</>と<option>-N</>の両方が指定された場合、少なくとも1つの<option>-n</>にマッチし<option>-N</>オプションにマッチしないスキーマだけがダンプされます。
<option>-n</>なしで<option>-N</>が指定された場合、<option>-N</>にマッチするスキーマが通常のダンプから除外されます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-o</></term>
      <term><option>--oids</></term>
      <listitem>
       <para>
<!--
        Dump object identifiers (<acronym>OID</acronym>s) as part of the
        data for every table.  Use this option if your application references
        the <acronym>OID</>
        columns in some way (e.g., in a foreign key constraint).
        Otherwise, this option should not be used.
-->
各テーブルのオブジェクト識別子（<acronym>OID</acronym>）をデータの一部としてダンプします。
アプリケーションで<acronym>OID</>列を（外部キー制約など）何らかの形で使用している場合は、このオプションを使用してください。
その他の場合は、このオプションは使用しないでください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-O</></term>
      <term><option>--no-owner</option></term>
      <listitem>
       <para>
<!--
        Do not output commands to set
        ownership of objects to match the original database.
        By default, <application>pg_dump</application> issues
        <command>ALTER OWNER</> or
        <command>SET SESSION AUTHORIZATION</command>
        statements to set ownership of created database objects.
        These statements
        will fail when the script is run unless it is started by a superuser
        (or the same user that owns all of the objects in the script).
        To make a script that can be restored by any user, but will give
        that user ownership of all the objects, specify <option>-O</>.
-->
オブジェクトの所有権を元のデータベースにマッチさせるためのコマンドを出力しません。
デフォルトでは、<application>pg_dump</application>は、<command>ALTER OWNER</>文または<command>SET SESSION AUTHORIZATION</command>文を発行して、作成したデータベースオブジェクトの所有権を設定します。
スーパーユーザ（もしくは、そのスクリプト内の全てのオブジェクトを所有するユーザ）以外のユーザがスクリプトを実行した場合、これらの文は失敗します。
任意のユーザがリストアできるスクリプトを作成するには、<option>-O</>を指定してください。
ただし、この場合は、全てのオブジェクトの所有者がリストアしたユーザとなってしまいます。
       </para>

       <para>
<!--
        This option is only meaningful for the plain-text format.  For
        the archive formats, you can specify the option when you
        call <command>pg_restore</command>.
-->
このオプションは平文形式の場合にのみ有効です。
アーカイブ形式では、<command>pg_restore</command>を呼び出す時にこのオプションを指定することができます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-R</option></term>
      <term><option>--no-reconnect</option></term>
      <listitem>
       <para>
<!--
        This option is obsolete but still accepted for backwards
        compatibility.
-->
このオプションは廃止されましたが、後方互換性を保持するため受け入れられます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-s</option></term>
      <term><option>--schema-only</option></term>
      <listitem>
       <para>
<!--
        Dump only the object definitions (schema), not data.
-->
データ定義（スキーマ）のみをダンプし、データはダンプしません。
       </para>
       <para>
<!--
        This option is the inverse of <option>&#045;-data-only</>.
        It is similar to, but for historical reasons not identical to,
        specifying
        <option>&#045;-section=pre-data &#045;-section=post-data</>.
-->
このオプションは<option>--data-only</>の逆です。
これは<option>--section=pre-data --section=post-data</>を指定することと似ていますが、歴史的な理由のため同一ではありません。
       </para>
       <para>
<!--
        (Do not confuse this with the <option>&#045;-schema</> option, which
        uses the word <quote>schema</> in a different meaning.)
-->
（これと<option>--schema</>オプションと混乱しないでください。<quote>schema</>という単語を異なる意味で使用しています。）
       </para>
       <para>
<!--
        To exclude table data for only a subset of tables in the database,
        see <option>&#045;-exclude-table-data</>.
-->
データベース内の一部のみのテーブルのテーブルデータを除外するためには<option>--exclude-table-data</>を参照してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-S <replaceable class="parameter">username</replaceable></option></term>
      <term><option>--superuser=<replaceable class="parameter">username</replaceable></option></term>
      <listitem>
       <para>
<!--
        Specify the superuser user name to use when disabling triggers.
        This is relevant only if <option>&#045;-disable-triggers</> is used.
        (Usually, it's better to leave this out, and instead start the
        resulting script as superuser.)
-->
トリガを無効にする場合に使用する、スーパーユーザのユーザ名を指定します。 
これは<option>--disable-triggers</>を使う場合にのみ使用されます。
（通常は このオプションを使うよりも、出力されたスクリプトをスーパーユーザ権限で実行する方が良いでしょう。）
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-t <replaceable class="parameter">table</replaceable></option></term>
      <term><option>--table=<replaceable class="parameter">table</replaceable></option></term>
      <listitem>
       <para>
<!--
        Dump only tables (or views or sequences or foreign tables) matching
        <replaceable class="parameter">table</replaceable>.  Multiple tables
        can be selected by writing multiple <option>-t</> switches.  Also, the
        <replaceable class="parameter">table</replaceable> parameter is
        interpreted as a pattern according to the same rules used by
        <application>psql</>'s <literal>\d</> commands (see <xref
        linkend="APP-PSQL-patterns" endterm="APP-PSQL-patterns-title">),
        so multiple tables can also be selected by writing wildcard characters
        in the pattern.  When using wildcards, be careful to quote the pattern
        if needed to prevent the shell from expanding the wildcards;  see
        <xref linkend="pg-dump-examples" endterm="pg-dump-examples-title">.
-->
<replaceable class="parameter">table</replaceable>にマッチするテーブル（またはビュー、シーケンス、外部テーブル）のみをダンプします。
複数の<option>-t</>オプションを記述することで複数のテーブルを選択することができます。
また、<replaceable class="parameter">table</replaceable>パラメータは<application>psql</>の <literal>\d</>コマンドで使用される規則(<xref linkend="APP-PSQL-patterns" endterm="APP-PSQL-patterns-title">参照)と同じ規則に従うパターンとして解釈されます。
ですので、ワイルドカード文字をパターン内に記述することで、複数のテーブルを選択することもできます。
ワイルドカードを使用する時は、シェルによりそのワイルドカードを展開させないように、パターンを引用符で括ってください。
<xref linkend="pg-dump-examples" endterm="pg-dump-examples-title">を参照してください。
       </para>

       <para>
<!--
        The <option>-n</> and <option>-N</> switches have no effect when
        <option>-t</> is used, because tables selected by <option>-t</> will
        be dumped regardless of those switches, and non-table objects will not
        be dumped.
-->
<option>-t</>が使用されると、<option>-n</>および<option>-N</>オプションの効果はなくなります。
<option>-t</>で選択したテーブルが、これらのオプションとは関係なくダンプされ、また、非テーブルオブジェクトはダンプされないためです。
       </para>

       <note>
        <para>
<!--
         When <option>-t</> is specified, <application>pg_dump</application>
         makes no attempt to dump any other database objects that the selected
         table(s) might depend upon. Therefore, there is no guarantee
         that the results of a specific-table dump can be successfully
         restored by themselves into a clean database.
-->
<option>-t</>が指定されると、<application>pg_dump</application>は選択したテーブル内のオブジェクトが依存する可能性がある他のデータベースオブジェクトのダンプを行いません。
したがって、テーブル指定のダンプ結果を初期化されたデータベースに正常にリストアできるという保証はありません。

        </para>
       </note>

       <note>
        <para>
<!--
         The behavior of the <option>-t</> switch is not entirely upward
         compatible with pre-8.2 <productname>PostgreSQL</productname>
         versions.  Formerly, writing <literal>-t tab</> would dump all
         tables named <literal>tab</>, but now it just dumps whichever one
         is visible in your default search path.  To get the old behavior
         you can write <literal>-t '*.tab'</>.  Also, you must write something
         like <literal>-t sch.tab</> to select a table in a particular schema,
         rather than the old locution of <literal>-n sch -t tab</>.
-->
<option>-t</>オプションの動作は8.2より前のバージョンの<productname>PostgreSQL</productname>と完全な互換性はありません。
以前は、<literal>-t tab</>と記述することで<literal>tab</>という名前のテーブルをすべてダンプしていました。
しかし現在は、デフォルトの検索パスで可視のものだけがダンプされます。
過去の動作を行うためには、<literal>-t '*.tab'</>と記述してください。
また、特定のスキーマ内のテーブルを選択するためには、以前は<literal>-n sch -t tab</>と記述していましたが、<literal>-t sch.tab</>などと記述しなければなりません。
        </para>
       </note>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-T <replaceable class="parameter">table</replaceable></option></term>
      <term><option>--exclude-table=<replaceable class="parameter">table</replaceable></option></term>
      <listitem>
       <para>
<!--
        Do not dump any tables matching the <replaceable
        class="parameter">table</replaceable> pattern.  The pattern is
        interpreted according to the same rules as for <option>-t</>.
        <option>-T</> can be given more than once to exclude tables
        matching any of several patterns.
-->
<replaceable class="parameter">tables</replaceable>パターンにマッチするテーブルをダンプしません。
このパターンは<option>-t</>と同じ規則に従って解釈されます。
<option>-T</>を複数指定することで、複数のパターンのいずれかにマッチするテーブルをすべて除外させることができます。
       </para>

       <para>
<!--
        When both <option>-t</> and <option>-T</> are given, the behavior
        is to dump just the tables that match at least one <option>-t</>
        switch but no <option>-T</> switches.  If <option>-T</> appears
        without <option>-t</>, then tables matching <option>-T</> are
        excluded from what is otherwise a normal dump.
-->
<option>-t</>と<option>-T</>の両方が指定された場合、少なくとも1つの<option>-t</>オプションにマッチし、<option>-T</>オプションにマッチしないテーブルのみがダンプされます。
<option>-t</>なしで<option>-T</>が指定された場合、通常のダンプから<option>-T</>にマッチするテーブルが除外されます。
       </para>

      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-v</></term>
      <term><option>--verbose</></term>
      <listitem>
       <para>
<!--
        Specifies verbose mode.  This will cause
        <application>pg_dump</application> to output detailed object
        comments and start/stop times to the dump file, and progress
        messages to standard error.
-->
冗長モードを指定します。
これを指定すると、<application>pg_dump</application>は、詳細なオブジェクトコメント、開始時刻、終了時刻をダンプファイルに、進行状況メッセージを標準エラーに出力します。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
       <term><option>-V</></term>
       <term><option>--version</></term>
       <listitem>
       <para>
<!--
       Print the <application>pg_dump</application> version and exit.
-->
<application>pg_dump</application>のバージョンを表示し、終了します。
       </para>
       </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-x</></term>
      <term><option>--no-privileges</></term>
      <term><option>--no-acl</></term>
      <listitem>
       <para>
<!--
        Prevent dumping of access privileges (grant/revoke commands).
-->
アクセス権限（grant/revokeコマンド）のダンプを抑制します。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-Z <replaceable class="parameter">0..9</replaceable></option></term>
      <term><option>--compress=<replaceable class="parameter">0..9</replaceable></option></term>
      <listitem>
       <para>
<!--
        Specify the compression level to use.  Zero means no compression.
        For the custom archive format, this specifies compression of
        individual table-data segments, and the default is to compress
        at a moderate level.
        For plain text output, setting a nonzero compression level causes
        the entire output file to be compressed, as though it had been
        fed through <application>gzip</>; but the default is not to compress.
        The tar archive format currently does not support compression at all.
-->
使用する圧縮レベルを指定します。
ゼロは圧縮無しを意味します。
カスタムアーカイブ形式では、これは個々のテーブルデータセグメントの圧縮を指定するもので、デフォルトでは中間レベルで圧縮されます。
平文出力では、非ゼロの圧縮レベルの指定によりあたかも<application>gzip</>に渡されたかのように出力ファイル全体が圧縮されます。
しかしデフォルトは圧縮無しです。
tarアーカイブ形式では現在圧縮を全くサポートしていません。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--binary-upgrade</option></term>
      <listitem>
       <para>
<!--
        This option is for use by in-place upgrade utilities.  Its use
        for other purposes is not recommended or supported.  The
        behavior of the option may change in future releases without
        notice.
-->
このオプションは現位置でのアップグレード用のユーティリティにより使用されるものです。
他の目的での使用は推奨されませんし、サポートもされません。
このオプションの動作は、将来通知することなく変更される可能性があります。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--column-inserts</option></term>
      <term><option>--attribute-inserts</option></term>
      <listitem>
       <para>
<!--
        Dump data as <command>INSERT</command> commands with explicit
        column names (<literal>INSERT INTO
        <replaceable>table</replaceable>
        (<replaceable>column</replaceable>, ...) VALUES
        ...</literal>).  This will make restoration very slow; it is mainly
        useful for making dumps that can be loaded into
        non-<productname>PostgreSQL</productname> databases.
        However, since this option generates a separate command for each row,
        an error in reloading a row causes only that row to be lost rather
        than the entire table contents.
-->
明示的に列名を付けた<command>INSERT</command>コマンド（<literal>INSERT INTO <replaceable>table</replaceable> (<replaceable>column</replaceable>, ...)VALUES...</literal>）としてデータをダンプします。
これによりリストアは非常に遅くなります。
主に<productname>PostgreSQL</productname>以外のデータベースへロード可能なダンプを作成する時に有用です。
しかし、このオプションは各行に対して別々のコマンドを生成しますので、一行を再ロードする時にエラーになったとしても、テーブルの内容まるごと失われることなく、一行のみが失われるだけですみます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--disable-dollar-quoting</></term>
      <listitem>
       <para>
<!--
        This option disables the use of dollar quoting for function bodies,
        and forces them to be quoted using SQL standard string syntax.
-->
このオプションは、関数本体用のドル引用符の使用を無効にし、強制的に標準SQLの文字列構文を使用した引用符付けを行います。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--disable-triggers</></term>
      <listitem>
       <para>
<!--
        This option is relevant only when creating a data-only dump.
        It instructs <application>pg_dump</application> to include commands
        to temporarily disable triggers on the target tables while
        the data is reloaded.  Use this if you have referential
        integrity checks or other triggers on the tables that you
        do not want to invoke during data reload.
-->
このオプションは、データのみのダンプを作成する場合にしか適用されません。
データの再ロード中に、対象テーブル上のトリガを一時的に無効にするコマンドを出力するよう<application>pg_dump</application>に指示します。
このオプションは、データの再ロード中には呼び出したくない参照整合性検査やその他のトリガがテーブル上にある場合に使用します。
       </para>

       <para>
<!--
        Presently, the commands emitted for <option>&#055;&#055;disable-triggers</>
        must be done as superuser.  So, you should also specify
        a superuser name with <option>-S</>, or preferably be careful to
        start the resulting script as a superuser.
-->
現在のところ、<option>--disable-triggers</>に対応するコマンドを実行するのは、スーパーユーザでなければなりません。
そのため、<option>-S</>でスーパーユーザの名前を指定するか、あるいは、可能であれば、スーパーユーザ権限でスクリプトを開始するよう注意する必要があります。
       </para>

       <para>
<!--
        This option is only meaningful for the plain-text format.  For
        the archive formats, you can specify the option when you
        call <command>pg_restore</command>.
-->
このオプションは平文形式の場合にのみ有効です。
他の形式では、<command>pg_restore</command>を呼び出す時にこのオプションを指定することができます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--exclude-table-data=<replaceable class="parameter">table</replaceable></option></term>
      <listitem>
       <para>
<!--
        Do not dump data for any tables matching the <replaceable
        class="parameter">table</replaceable> pattern. The pattern is
        interpreted according to the same rules as for <option>-t</>.
        <option>&#045;-exclude-table-data</> can be given more than once to
        exclude tables matching any of several patterns. This option is
        useful when you need the definition of a particular table even
        though you do not need the data in it.
-->
<replaceable class="parameter">table</replaceable>にマッチするすべてのテーブルのデータをダンプしません。
パターンは<option>-t</>用の規則と同じ規則にしたがって解釈されます。
複数のパターンのいずれかにマッチするテーブルを除外することができるように、<option>--exclude-table-data</>を複数回与えることができます。
このオプションは、特定のテーブルに関してデータを格納する必要はないがテーブル定義は必要である場合に有用です。
       </para>
       <para>
<!--
        To exclude data for all tables in the database, see <option>&#045;-schema-only</>.
-->
データベース内のすべてのテーブルに関してデータを除外するためには、<option>--schema-only</>を参照してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--if-exists</option></term>
      <listitem>
       <para>
<!--
        Use conditional commands (i.e. add an <literal>IF EXISTS</literal>
        clause) when cleaning database objects.  This option is not valid
        unless <option>&#045;-clean</> is also specified.
-->
データベースオブジェクトを初期化するときに、条件コマンドを使います(つまり、<literal>IF EXISTS</literal>句を追加します)。
このオプションは、<option>--clean</>も指定されているのでなければ、有効にはなりません。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--inserts</option></term>
      <listitem>
       <para>
<!--
        Dump data as <command>INSERT</command> commands (rather
        than <command>COPY</command>).  This will make restoration very slow;
        it is mainly useful for making dumps that can be loaded into
        non-<productname>PostgreSQL</productname> databases.
        However, since this option generates a separate command for each row,
        an error in reloading a row causes only that row to be lost rather
        than the entire table contents.
        Note that
        the restore might fail altogether if you have rearranged column order.
        The <option>&#045;-column-inserts</option> option is safe against column
        order changes, though even slower.
-->
データを（<command>COPY</command>ではなく）<command>INSERT</command>コマンドの形式でダンプします。 
これを行うとリストアに非常に時間がかかります。
主に<productname>PostgreSQL</productname>以外のデータベースへロード可能なダンプを作成する時に有用です。
しかし、このオプションは各行に対して別々のコマンドを生成しますので、一行を再ロードする時にエラーになったとしても、テーブルの内容まるごと失われることなく、一行のみが失われるだけですみます。
列の順序を変更した場合はリストアが失敗する可能性があることに注意してください。
<option>--column-inserts</option>はさらに処理が遅くなりますが、列の順序変更に対して安全です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--lock-wait-timeout=<replaceable class="parameter">timeout</replaceable></option></term>
      <listitem>
       <para>
<!--
        Do not wait forever to acquire shared table locks at the beginning of
        the dump. Instead fail if unable to lock a table within the specified
        <replaceable class="parameter">timeout</>. The timeout may be
        specified in any of the formats accepted by <command>SET
        statement_timeout</>.  (Allowed values vary depending on the server
        version you are dumping from, but an integer number of milliseconds
        is accepted by all versions since 7.3.  This option is ignored when
        dumping from a pre-7.3 server.)
-->
ダンプの開始時に共有テーブルのロックを永遠に待ちません。
代わりに指定した<replaceable class="parameter">timeout</>内にテーブルロックを獲得できなければ失敗します。
タイムアウトは<command>SET statement_timeout</>で受け付けられる任意の書式で指定できます。
（使用可能な値はダンプの元となるサーバのバージョンに依存して異なりますが、7.3以降のすべてのバージョンにおいてミリ秒単位の整数値は受け付けられます。
7.3より前のサーバからダンプする場合、このオプションは無視されます。）
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--no-security-labels</option></term>
      <listitem>
       <para>
<!--
        Do not dump security labels.
-->
セキュリティラベルをダンプしません。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--no-synchronized-snapshots</></term>
      <listitem>
       <para>
<!--
        This option allows running <command>pg_dump -j</> against a pre-9.2
        server, see the documentation of the <option>-j</option> parameter
        for more details.
-->
このオプションにより、9.2より前のサーバに対して<command>pg_dump -j</>を実行することができます。
詳細については<option>-j</option>パラメータの説明を参照してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--no-tablespaces</option></term>
      <listitem>
       <para>
<!--
        Do not output commands to select tablespaces.
        With this option, all objects will be created in whichever
        tablespace is the default during restore.
-->
テーブル空間を選択するコマンドを出力しません。
このオプションを使用すると、すべてのオブジェクトはリストア時のデフォルトのテーブル空間の中に作成されます。
       </para>

       <para>
<!--
        This option is only meaningful for the plain-text format.  For
        the archive formats, you can specify the option when you
        call <command>pg_restore</command>.
-->
このオプションは平文書式でのみ有意です。
アーカイブ書式では、<command>pg_restore</command>を呼び出す時にこのオプションを指定することができます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--no-unlogged-table-data</option></term>
      <listitem>
       <para>
<!--
        Do not dump the contents of unlogged tables.  This option has no
        effect on whether or not the table definitions (schema) are dumped;
        it only suppresses dumping the table data. Data in unlogged tables
        is always excluded when dumping from a standby server.
-->
ログを取らないテーブルの内容をダンプしません。
このオプションはテーブル定義（スキーマ）をダンプするかどうかには影響しません。
そのテーブルデータのダンプを抑制するだけです。
スタンバイサーバからダンプを行う場合、ログを取らないテーブル内のデータは常に除外されます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--quote-all-identifiers</></term>
      <listitem>
       <para>
<!--
        Force quoting of all identifiers.  This may be useful when dumping a
        database for migration to a future version that may have introduced
        additional keywords.
-->
強制的にすべての識別子に引用符を付与します。
追加のキーワードが導入されている可能性がある将来のバージョンへの移行用にデータベースをダンプする場合に有用かもしれません。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
       <term><option>--section=<replaceable class="parameter">sectionname</replaceable></option></term>
       <listitem>
         <para>
<!--
          Only dump the named section. The section name can be
          <option>pre-data</>, <option>data</>, or <option>post-data</>.
          This option can be specified more than once to select multiple
          sections. The default is to dump all sections.
-->
指定した部分のみをダンプします。
部分名は<option>pre-data</>、<option>data</>、<option>post-data</>のいずれかを取ることができます。
複数の部分を選択するために、このオプションは複数回指定することができます。
デフォルトではすべての部分をダンプします。
         </para>
         <para>
<!--
          The data section contains actual table data, large-object
          contents, and sequence values.
          Post-data items include definitions of indexes, triggers, rules,
          and constraints other than validated check constraints.
          Pre-data items include all other data definition items.
-->
data部分には、実際のテーブルデータとラージオブジェクトの中身、シーケンス値が含まれます。
post-data項目は、インデックス定義、トリガ定義、ルール定義、有効化された検査制約以外の制約定義が含まれます。
pre-data項目は、他のすべてのデータ定義項目が含まれます。
         </para>
       </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--serializable-deferrable</option></term>
      <listitem>
       <para>
<!--
        Use a <literal>serializable</literal> transaction for the dump, to
        ensure that the snapshot used is consistent with later database
        states; but do this by waiting for a point in the transaction stream
        at which no anomalies can be present, so that there isn't a risk of
        the dump failing or causing other transactions to roll back with a
        <literal>serialization_failure</literal>.  See <xref linkend="mvcc">
        for more information about transaction isolation and concurrency
        control.
-->
使用されるスナップショットがその後のデータベース状態と一貫性を持つことを保証するために、ダンプ時に<literal>serializable</literal>トランザクションを使用します。
ダンプが失敗したり、<literal>serialization_failure</literal>により他のトランザクションがロールバックしたりする危険がないように、トランザクションストリーム内で異常が発生することがない時点まで待つことでこれを行います。
トランザクション隔離および同時実行性の制御については<xref linkend="mvcc">を参照してください。
       </para>

       <para>
<!--
        This option is not beneficial for a dump which is intended only for
        disaster recovery.  It could be useful for a dump used to load a
        copy of the database for reporting or other read-only load sharing
        while the original database continues to be updated.  Without it the
        dump may reflect a state which is not consistent with any serial
        execution of the transactions eventually committed.  For example, if
        batch processing techniques are used, a batch may show as closed in
        the dump without all of the items which are in the batch appearing.
-->
このオプションは障害対策のリカバリのみを目的とするダンプでは利点はありません。
元のデータベースを継続して更新しながら、レポート処理や他の読み取りのみの負荷分散のためにデータベースのコピーをロードするために使用されるダンプとして有用になります。
こうしないと、ダンプには
何らかのトランザクションの直列実行が最終的にコミットされた状態と一貫性がない状態が反映される可能性があります。
例えば、バッチ処理技術が使用される場合、
バッチは、バッチ内で存在するすべての項目を持たないダンプ内でクローズしたものと表示される可能性があります。
       </para>

       <para>
<!--
        This option will make no difference if there are no read-write
        transactions active when pg_dump is started.  If read-write
        transactions are active, the start of the dump may be delayed for an
        indeterminate length of time.  Once running, performance with or
        without the switch is the same.
-->
pg_dumpを始めた時に読み書きを行う実行中のトランザクションが存在しない場合、このオプションは何の差異ももたらしません。
読み書きを行うトランザクションが実行中の場合、確定できない期間、ダンプの起動が遅延される可能性があります。
動き出してからの性能は、このスイッチがある場合とない場合とで違いはありません。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--use-set-session-authorization</></term>
      <listitem>
       <para>
<!--
        Output SQL-standard <command>SET SESSION AUTHORIZATION</> commands
        instead of <command>ALTER OWNER</> commands to determine object
        ownership.  This makes the dump more standards-compatible, but
        depending on the history of the objects in the dump, might not restore
        properly.  Also, a dump using <command>SET SESSION AUTHORIZATION</>
        will certainly require superuser privileges to restore correctly,
        whereas <command>ALTER OWNER</> requires lesser privileges.
-->
オブジェクトの所有権を決定するために、<command>ALTER OWNER</>コマンドの代わりに標準SQLの<command>SET SESSION AUTHORIZATION</>コマンドを出力します。
これにより、ダンプの標準への互換性が高まりますが、ダンプ内のオブジェクトの履歴によっては正しくリストアされない可能性が生じます。
また、<command>SET SESSION AUTHORIZATION</>を使用したダンプを正しくリストアするためには、確実にスーパーユーザ権限が必要となります。
<command>ALTER OWNER</>で必要な権限はこれよりも少なくなります。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
       <term><option>-?</></term>
       <term><option>--help</></term>
       <listitem>
       <para>
<!--
       Show help about <application>pg_dump</application> command line
       arguments, and exit.
-->
<application>pg_dump</application>のコマンドライン引数の使用方法を表示し、終了します。
       </para>
       </listitem>
     </varlistentry>

    </variablelist>
   </para>

   <para>
<!--
    The following command-line options control the database connection parameters.
-->
以下のコマンドラインオプションは、データベース接続パラメータを制御します。

    <variablelist>
     <varlistentry>
      <term><option>-d <replaceable class="parameter">dbname</replaceable></></term>
      <term><option>--dbname=<replaceable class="parameter">dbname</replaceable></></term>
      <listitem>
      <para>
<!--
       Specifies the name of the database to connect to. This is
       equivalent to specifying <replaceable
       class="parameter">dbname</replaceable> as the first non-option
       argument on the command line.
-->
接続するデータベースの名前を指定します。
コマンドラインでオプション以外の最初の引数として<replaceable class="parameter">dbname</replaceable>を指定することと同じです。
      </para>
      <para>
<!--
       If this parameter contains an <symbol>=</symbol> sign or starts
       with a valid <acronym>URI</acronym> prefix
       (<literal>postgresql://</literal>
       or <literal>postgres://</literal>), it is treated as a
       <parameter>conninfo</parameter> string. See <xref linkend="libpq-connect"> for more information.
-->
このパラメータに<symbol>=</symbol>記号が含まれる場合や有効な<acronym>URI</acronym>接頭辞（<literal>postgresql://</literal>または<literal>postgres://</literal>）から始まる場合、<parameter>conninfo</parameter>文字列として扱われます。
詳細については<xref linkend="libpq-connect">を参照してください。
      </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-h <replaceable class="parameter">host</replaceable></option></term>
      <term><option>--host=<replaceable class="parameter">host</replaceable></option></term>
      <listitem>
       <para>
<!--
        Specifies the host name of the machine on which the server is
        running.  If the value begins with a slash, it is used as the
        directory for the Unix domain socket. The default is taken
        from the <envar>PGHOST</envar> environment variable, if set,
        else a Unix domain socket connection is attempted.
-->
サーバが稼働しているマシンのホスト名を指定します。
この値がスラッシュから始まる場合、Unixドメインソケット用のディレクトリとして使用されます。
デフォルトは、設定されていれば環境変数<envar>PGHOST</envar>から取得されます。
設定されていなければ、Unixドメインソケット接続とみなされます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-p <replaceable class="parameter">port</replaceable></option></term>
      <term><option>--port=<replaceable class="parameter">port</replaceable></option></term>
      <listitem>
       <para>
<!--
        Specifies the TCP port or local Unix domain socket file
        extension on which the server is listening for connections.
        Defaults to the <envar>PGPORT</envar> environment variable, if
        set, or a compiled-in default.
-->
サーバが接続を監視するTCPポートもしくはローカルUnixドメインソケットファイルの拡張子を指定します。
デフォルトは、設定されている場合、環境変数<envar>PGPORT</envar>の値となります。設定されていなければ、コンパイル時のデフォルト値となります。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-U <replaceable>username</replaceable></option></term>
      <term><option>--username=<replaceable class="parameter">username</replaceable></option></term>
      <listitem>
       <para>
<!--
        User name to connect as.
-->
接続ユーザ名です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-w</></term>
      <term><option>--no-password</></term>
      <listitem>
       <para>
<!--
        Never issue a password prompt.  If the server requires
        password authentication and a password is not available by
        other means such as a <filename>.pgpass</filename> file, the
        connection attempt will fail.  This option can be useful in
        batch jobs and scripts where no user is present to enter a
        password.
-->
パスワードの入力を促しません。
サーバがパスワード認証を必要とし、かつ、<filename>.pgpass</filename>ファイルなどの他の方法が利用できない場合、接続試行は失敗します。
バッチジョブやスクリプトなどパスワードを入力するユーザが存在しない場合にこのオプションは有用かもしれません。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-W</option></term>
      <term><option>--password</option></term>
      <listitem>
       <para>
<!--
        Force <application>pg_dump</application> to prompt for a
        password before connecting to a database.
-->
データベースに接続する前に、<application>pg_dump</application>は強制的にパスワード入力を促します。
       </para>

       <para>
<!--
        This option is never essential, since
        <application>pg_dump</application> will automatically prompt
        for a password if the server demands password authentication.
        However, <application>pg_dump</application> will waste a
        connection attempt finding out that the server wants a password.
        In some cases it is worth typing <option>-W</> to avoid the extra
        connection attempt.
-->
サーバがパスワード認証を要求する場合<application>pg_dump</application>は自動的にパスワード入力を促しますので、これが重要になることはありません。
しかし、<application>pg_dump</application>は、サーバにパスワードが必要かどうかを判断するための接続試行を無駄に行います。
こうした余計な接続試行を防ぐために<option>-W</>の入力が有意となる場合もあります。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--role=<replaceable class="parameter">rolename</replaceable></option></term>
      <listitem>
       <para>
<!--
        Specifies a role name to be used to create the dump.
        This option causes <application>pg_dump</> to issue a
        <command>SET ROLE</> <replaceable class="parameter">rolename</>
        command after connecting to the database. It is useful when the
        authenticated user (specified by <option>-U</>) lacks privileges
        needed by <application>pg_dump</>, but can switch to a role with
        the required rights.  Some installations have a policy against
        logging in directly as a superuser, and use of this option allows
        dumps to be made without violating the policy.
-->
ダンプを作成する際に使用するロール名を指定します。
このオプションにより<application>pg_dump</>はデータベースに接続した後に<command>SET ROLE</> <replaceable class="parameter">rolename</>コマンドを発行するようになります。
認証に使用したユーザ（<option>-U</>で指定されたユーザ）が<application>pg_dump</>で必要とされる権限を持たないが、必要な権限を持つロールに切り替えることができる場合に有用です。
一部のインストレーションではスーパーユーザとして直接ログインさせないポリシーを取ることがありますが、このオプションを使用することでポリシーに反することなくダンプを作成することができます。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>
 </refsect1>

 <refsect1>
<!--
  <title>Environment</title>
-->
<title>環境</title>

  <variablelist>
   <varlistentry>
    <term><envar>PGDATABASE</envar></term>
    <term><envar>PGHOST</envar></term>
    <term><envar>PGOPTIONS</envar></term>
    <term><envar>PGPORT</envar></term>

    <term><envar>PGUSER</envar></term>
    <listitem>
     <para>
<!--
      Default connection parameters.
-->
      デフォルトの接続パラメータです。
     </para>
    </listitem>

   </varlistentry>
  </variablelist>

  <para>
<!--
   This utility, like most other <productname>PostgreSQL</> utilities,
   also uses the environment variables supported by <application>libpq</>
   (see <xref linkend="libpq-envars">).
-->
また、このユーティリティは、他のほとんどの<productname>PostgreSQL</>ユーティリティと同様、<application>libpq</>でサポートされる環境変数を使用します（<xref linkend="libpq-envars">を参照してください）。
  </para>

 </refsect1>

 <refsect1 id="app-pgdump-diagnostics">
<!--
  <title>Diagnostics</title>
-->
<title>診断</title>

  <para>
<!--
   <application>pg_dump</application> internally executes
   <command>SELECT</command> statements. If you have problems running
   <application>pg_dump</application>, make sure you are able to
   select information from the database using, for example, <xref
   linkend="app-psql">.  Also, any default connection settings and environment
   variables used by the <application>libpq</application> front-end
   library will apply.
-->
<application>pg_dump</application>は内部で<command>SELECT</command>文を実行します。
<application>pg_dump</application>の実行時に問題が発生する場合は、<xref linkend="app-psql">などを使用して、そのデータベースから情報をselectできることを確認してください。
また、<application>libpq</application>フロントエンドライブラリで使用されるデフォルトの接続設定や環境変数も適用されます。
  </para>

  <para>
<!--
   The database activity of <application>pg_dump</application> is
   normally collected by the statistics collector.  If this is
   undesirable, you can set parameter <varname>track_counts</>
   to false via <envar>PGOPTIONS</envar> or the <literal>ALTER
   USER</literal> command.
-->
通常<application>pg_dump</application>のデータベースに対する活動は統計情報コレクタにより収集されます。
これを望まない場合、<envar>PGOPTIONS</envar>または<literal>ALTER USER</literal>コマンドを使用して<varname>track_counts</>パラメータを偽に設定してください。
  </para>

 </refsect1>


 <refsect1 id="pg-dump-notes">
<!--
  <title>Notes</title>
-->
<title>注釈</title>

  <para>
<!--
   If your database cluster has any local additions to the <literal>template1</> database,
   be careful to restore the output of <application>pg_dump</application> into a
   truly empty database; otherwise you are likely to get errors due to
   duplicate definitions of the added objects.  To make an empty database
   without any local additions, copy from <literal>template0</> not <literal>template1</>,
   for example:
-->
データベースクラスタにおいて<literal>template1</>データベースに対し独自の変更を行っている場合、<application>pg_dump</application>の出力は、確実に空のデータベースにリストアするように注意してください。
そうしないと、おそらく追加されたオブジェクトの重複定義によってエラーが発生します。
独自の追加が反映されていない空のデータベースを作成するには、<literal>template1</>ではなく<literal>template0</>をコピーしてください。
以下に例を示します。
<programlisting>
CREATE DATABASE foo WITH TEMPLATE template0;
</programlisting>
  </para>

  <para>
<!--
   When a data-only dump is chosen and the option <option>&#045;-disable-triggers</>
   is used, <application>pg_dump</application> emits commands
   to disable triggers on user tables before inserting the data,
   and then commands to re-enable them after the data has been
   inserted.  If the restore is stopped in the middle, the system
   catalogs might be left in the wrong state.
-->
データのみのダンプを選択し、<option>--disable-triggers</>オプションを使用する場合、<application>pg_dump</application>はデータを挿入する前にユーザテーブルにトリガを無効にするコマンドを発行し、データの挿入が完了した後で、それらを再び有効にする問い合わせを発行します。
リストアが途中で停止した場合、システムカタログが不適切な状態のままになっている可能性があります。
  </para>

  <para>
<!--
   Members of tar archives are limited to a size less than 8 GB.
   (This is an inherent limitation of the tar file format.)  Therefore
   this format cannot be used if the textual representation of any one table
   exceeds that size.  The total size of a tar archive and any of the
   other output formats is not limited, except possibly by the
   operating system.
-->
tarアーカイブのメンバのサイズは、8ギガバイト未満に制限されています
（これはtarファイル形式自体が持っている制限です）。
そのため、いずれか1つのテーブルのテキスト表現がこのサイズを越える場合、この形式は使用できません。
tarアーカイブの合計サイズとその他の出力形式のサイズには制限がありません。
ただしオペレーティングシステムによる制限がある場合があります。
  </para>

  <para>
<!--
   The dump file produced by <application>pg_dump</application>
   does not contain the statistics used by the optimizer to make
   query planning decisions.  Therefore, it is wise to run
   <command>ANALYZE</command> after restoring from a dump file
   to ensure optimal performance; see <xref linkend="vacuum-for-statistics">
   and <xref linkend="autovacuum"> for more information.
   The dump file also does not
   contain any <command>ALTER DATABASE ... SET</> commands;
   these settings are dumped by <xref linkend="app-pg-dumpall">,
   along with database users and other installation-wide settings.
-->
<application>pg_dump</application>が生成するダンプファイルには、オプティマイザが問い合わせ計画を決定する際に使用される統計情報が含まれていません。
そのため、最適な性能を発揮するために、ダンプファイルからリストアした後で<command>ANALYZE</>を実行することをお勧めします。
詳しくは<xref linkend="vacuum-for-statistics">および<xref linkend="autovacuum">を参照してください。
ダンプファイルはまた<command>ALTER DATABASE ... SET</>コマンドがまったく含まれません。
これらの設定およびデータベースユーザと他のインストレーション全体の設定は<xref linkend="app-pg-dumpall">によってダンプされます。
  </para>

  <para>
<!--
   Because <application>pg_dump</application> is used to transfer data
   to newer versions of <productname>PostgreSQL</>, the output of
   <application>pg_dump</application> can be expected to load into
   <productname>PostgreSQL</> server versions newer than
   <application>pg_dump</>'s version.  <application>pg_dump</> can also
   dump from <productname>PostgreSQL</> servers older than its own version.
   (Currently, servers back to version 7.0 are supported.)
   However, <application>pg_dump</> cannot dump from
   <productname>PostgreSQL</> servers newer than its own major version;
   it will refuse to even try, rather than risk making an invalid dump.
   Also, it is not guaranteed that <application>pg_dump</>'s output can
   be loaded into a server of an older major version &mdash; not even if the
   dump was taken from a server of that version.  Loading a dump file
   into an older server may require manual editing of the dump file
   to remove syntax not understood by the older server.
-->
<application>pg_dump</application>は新しいバージョンの<productname>PostgreSQL</>へのデータ移行に使用されますので、<application>pg_dump</application>の出力は<application>pg_dump</>のバージョンより新しいバージョンの<productname>PostgreSQL</>データベースへロード可能と想定できるようになっています。
また、<application>pg_dump</>は自身より古いバージョンの<productname>PostgreSQL</>データベースを読み取ることもできます。
（現在はバージョン7.0までのサーバをサポートします。）
しかし、<application>pg_dump</>はそれ自身のメジャーバージョンより新しい<productname>PostgreSQL</>サーバのダンプを取ることはできません。
無効なダンプを作成するリスクは取らず、ダンプしようとさえしません。
また、<application>pg_dump</>の出力がメジャーバージョンが古いサーバにロードできるとは、たとえ同じバージョンのサーバから取得したダンプであっても、保証されていません。
より古いサーバへのダンプファイルのロードには、古いサーバでは理解できない構文を削除するために、ダンプファイルの手作業による修正が必要になることがあります。
  </para>

 </refsect1>

 <refsect1 id="pg-dump-examples">
<!--
  <title id="pg-dump-examples-title">Examples</title>
-->
  <title id="pg-dump-examples-title">例</title>

  <para>
<!--
   To dump a database called <literal>mydb</> into a SQL-script file:
-->
<literal>mydb</>という名前のデータベースをSQLスクリプトファイルにダンプします。
<screen>
<prompt>$</prompt> <userinput>pg_dump mydb &gt; db.sql</userinput>
</screen>
  </para>

  <para>
<!--
   To reload such a script into a (freshly created) database named
   <literal>newdb</>:
-->
<literal>newdb</>という名前の（新規に作成した）データベースにスクリプトを再ロードします。

<screen>
<prompt>$</prompt> <userinput>psql -d newdb -f db.sql</userinput>
</screen>
  </para>

  <para>
<!--
   To dump a database into a custom-format archive file:
-->
カスタム形式のアーカイブファイルにデータベースをダンプします。

<screen>
<prompt>$</prompt> <userinput>pg_dump -Fc mydb &gt; db.dump</userinput>
</screen>
  </para>

  <para>
<!--
   To dump a database into a directory-format archive:
-->
ディレクトリ形式アーカイブにデータベースをダンプします。

<screen>
<prompt>$</prompt> <userinput>pg_dump -Fd mydb -f dumpdir</userinput>
</screen>
  </para>

  <para>
<!--
   To dump a database into a directory-format archive in parallel with
   5 worker jobs:
-->
5個の作業用ジョブを使用してデータベースをdirectory形式のアーカイブにダンプします。

<screen>
<prompt>$</prompt> <userinput>pg_dump -Fd mydb -j 5 -f dumpdir</userinput>
</screen>
  </para>

  <para>
<!--
   To reload an archive file into a (freshly created) database named
   <literal>newdb</>:
-->
<literal>newdb</>という名前の（新規に作成した）データベースにアーカイブファイルを再ロードします。

<screen>
<prompt>$</prompt> <userinput>pg_restore -d newdb db.dump</userinput>
</screen>
  </para>

  <para>
<!--
   To dump a single table named <literal>mytab</>:
-->
<literal>mytab</>という名前の単一のテーブルをダンプします。

<screen>
<prompt>$</prompt> <userinput>pg_dump -t mytab mydb &gt; db.sql</userinput>
</screen>
  </para>

  <para>
<!--
   To dump all tables whose names start with <literal>emp</> in the
   <literal>detroit</> schema, except for the table named
   <literal>employee_log</literal>:
-->
<literal>detroit</>スキーマ内の名前が<literal>emp</>で始まるすべてのテーブルをダンプします。
ただし、<literal>employee_log</literal>という名前のテーブルは除きます。

<screen>
<prompt>$</prompt> <userinput>pg_dump -t 'detroit.emp*' -T detroit.employee_log mydb &gt; db.sql</userinput>
</screen>
  </para>

  <para>
<!--
   To dump all schemas whose names start with <literal>east</> or
   <literal>west</> and end in <literal>gsm</>, excluding any schemas whose
   names contain the word <literal>test</>:
-->
<literal>east</>または<literal>west</>で始まり<literal>gsm</>で終わるスキーマをすべてダンプします。
ただし、<literal>test</>という単語を含む場合は除きます。


<screen>
<prompt>$</prompt> <userinput>pg_dump -n 'east*gsm' -n 'west*gsm' -N '*test*' mydb &gt; db.sql</userinput>
</screen>
  </para>

  <para>
<!--
   The same, using regular expression notation to consolidate the switches:
-->
正規表現記法を使用してオプションをまとめた形で同じことを行います。

<screen>
<prompt>$</prompt> <userinput>pg_dump -n '(east|west)*gsm' -N '*test*' mydb &gt; db.sql</userinput>
</screen>
  </para>

  <para>
<!--
   To dump all database objects except for tables whose names begin with
   <literal>ts_</literal>:
-->
<literal>ts_</literal>から始まる名前のテーブルを除き、すべてのデータベースオブジェクトをダンプします。

<screen>
<prompt>$</prompt> <userinput>pg_dump -T 'ts_*' mydb &gt; db.sql</userinput>
</screen>
  </para>

  <para>
<!--
   To specify an upper-case or mixed-case name in <option>-t</> and related
   switches, you need to double-quote the name; else it will be folded to
   lower case (see <xref
   linkend="APP-PSQL-patterns" endterm="APP-PSQL-patterns-title">).  But
   double quotes are special to the shell, so in turn they must be quoted.
   Thus, to dump a single table with a mixed-case name, you need something
   like
-->
大文字または大文字小文字混在の名前を<option>-t</>などのスイッチに指定するには、名前を二重引用符で括らなければなりません。
さもないと小文字に変換されます。（<xref linkend="APP-PSQL-patterns" endterm="APP-PSQL-patterns-title">を参照してください。）
しかし、二重引用符はシェルでも特別に扱われますので、これも引用符で括らなければなりません。
したがって、大文字小文字混在の名前を持つテーブルを1つダンプするには、以下のようにしなければなりません。

<screen>
<prompt>$</prompt> <userinput>pg_dump -t "\"MixedCaseName\"" mydb &gt; mytab.sql</userinput>
</screen></para>

 </refsect1>

 <refsect1>
<!--
  <title>See Also</title>
-->
<title>関連項目</title>

  <simplelist type="inline">
   <member><xref linkend="app-pg-dumpall"></member>
   <member><xref linkend="app-pgrestore"></member>
   <member><xref linkend="app-psql"></member>
  </simplelist>
 </refsect1>

</refentry>
