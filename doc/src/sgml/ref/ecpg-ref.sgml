<!--
doc/src/sgml/ref/ecpg-ref.sgml
PostgreSQL documentation
-->

<refentry id="APP-ECPG">
 <indexterm zone="app-ecpg">
  <primary>ecpg</primary>
 </indexterm>

 <refmeta>
  <refentrytitle><application>ecpg</application></refentrytitle>
  <manvolnum>1</manvolnum>
<!--
  <refmiscinfo>Application</refmiscinfo>
-->
<refmiscinfo>アプリケーション</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname><application>ecpg</application></refname>
<!--
  <refpurpose>embedded SQL C preprocessor</refpurpose>
-->
<refpurpose>埋め込みSQL用Cプリプロセッサ</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <cmdsynopsis>
   <command>ecpg</command>
   <arg choice="opt" rep="repeat"><replaceable>option</replaceable></arg>
   <arg choice="plain" rep="repeat"><replaceable>file</replaceable></arg>
  </cmdsynopsis>
 </refsynopsisdiv>


 <refsect1 id="APP-ECPG-description">
<!--
  <title>Description</title>
-->
<title>説明</title>

  <para>
<!--
   <command>ecpg</command> is the embedded SQL preprocessor for C
   programs.  It converts C programs with embedded SQL statements to
   normal C code by replacing the SQL invocations with special
   function calls.  The output files can then be processed with any C
   compiler tool chain.
-->
<command>ecpg</command>は、Cプログラム用の埋め込みSQLプリプロセッサです。
SQL呼び出しを特別な関数呼び出しに置き換えることによって、埋め込みSQL文を含むCプログラムを、通常のCコードに変換します。
これにより、出力ファイルは、任意のCコンパイラツールを使用して処理することができます。
  </para>

  <para>
<!--
   <command>ecpg</command> will convert each input file given on the
   command line to the corresponding C output file.  Input files
   preferably have the extension <filename>.pgc</filename>, in which
   case the extension will be replaced by <filename>.c</filename> to
   determine the output file name.  If the extension of the input file
   is not <filename>.pgc</filename>, then the output file name is
   computed by appending <literal>.c</literal> to the full file name.
   The output file name can also be overridden using the
   <option>-o</option> option.
-->
<command>ecpg</command>は、コマンドラインで指定される各入力ファイルを対応するCの出力ファイルに変換します。
入力ファイルに<filename>.pgc</filename>という拡張子を付けておくと、出力ファイル名の拡張子が<filename>.c</filename>に置き換えられるので便利です。
入力ファイルの拡張子が<filename>.pgc</filename>でない場合、そのファイルのフルネームの末尾に<literal>.c</literal>を追加したものが出力ファイル名となります。
出力ファイル名は、<option>-o</option>オプションによって上書きすることもできます。
  </para>

  <para>
<!--
   This reference page does not describe the embedded SQL language.
   See <xref linkend="ecpg"> for more information on that topic.
-->
このマニュアルページでは埋め込みSQL言語については説明しません。
<xref linkend="ecpg">を参照してください。
  </para>
 </refsect1>


 <refsect1>
<!--
  <title>Options</title>
-->
<title>オプション</title>

  <para>
<!--
   <command>ecpg</command> accepts the following command-line
   arguments:
-->
   <command>ecpg</command>は、以下のコマンドライン引数を受け付けます。

   <variablelist>
    <varlistentry>
     <term><option>-c</option></term>
     <listitem>
      <para>
<!--
       Automatically generate certain C code from SQL code.  Currently, this
       works for <literal>EXEC SQL TYPE</literal>.
-->
SQLコードから有効なCコードを自動的に生成します。
現在、このオプションは<literal>EXEC SQL TYPE</literal>に対して使用できます。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>-C <replaceable>mode</replaceable></option></term>
     <listitem>
      <para>
<!--
       Set a compatibility mode.  <replaceable>mode</replaceable> can
       be <literal>INFORMIX</literal> or
       <literal>INFORMIX_SE</literal>.
-->
互換モードを設定します。
<replaceable>mode</replaceable>は<literal>INFORMIX</literal>もしくは<literal>INFORMIX_SE</literal>のどちらかを取ることができます。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>-D <replaceable>symbol</replaceable></option></term>
     <listitem>
      <para>
<!--
       Define a C preprocessor symbol.
-->
Cプリプロセッサのシンボルを定義します。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>-i</option></term>
     <listitem>
      <para>
<!--
       Parse system include files as well.
-->
同様にシステムインクルードファイルも解析します。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>-I <replaceable class="parameter">directory</replaceable></option></term>
     <listitem>
      <para>
<!--
       Specify an additional include path, used to find files included
       via <literal>EXEC SQL INCLUDE</literal>.  Defaults are
       <filename>.</filename> (current directory),
       <filename>/usr/local/include</filename>, the
       <productname>PostgreSQL</productname> include directory which
       is defined at compile time (default:
       <filename>/usr/local/pgsql/include</filename>), and
       <filename>/usr/include</filename>, in that order.
-->
追加のインクルード用パスを指定します。
これは、<literal>EXEC SQL INCLUDE</literal>を使用してインクルードされるファイルを検索する際に使用されます。
デフォルトでは順に、<filename>.</filename>（カレントディレクトリ）、<filename>/usr/local/include</filename>、コンパイル時に定義される<productname>PostgreSQL</productname>のインクルードディレクトリ（デフォルトでは<filename>/usr/local/pgsql/include</filename>）、<filename>/usr/include</filename>です。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>-o <replaceable>filename</replaceable></option></term>
     <listitem>
      <para>
<!--
       Specifies that <command>ecpg</command> should write all
       its output to the given <replaceable>filename</replaceable>.
-->
<command>ecpg</command>が全ての出力を<replaceable>filename</replaceable>に書き込むことを指定します。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>-r <replaceable>option</replaceable></option></term>
     <listitem>
      <para>
<!--
       Selects run-time behavior.  <replaceable>Option</replaceable> can be
       one of the following:
-->
実行時の動作を選択します。
以下のいずれかを<replaceable>option</replaceable>として取ることができます。
       <variablelist>
        <varlistentry>
         <term><option>no_indicator</option></term>
         <listitem>
         <para>
<!--
         Do not use indicators but instead use special values to represent
         null values. Historically there have been databases using this approach.
-->
指示子を使用せずにNULL値を表す特殊な値を使用します。
歴史的にこの方式を使用したデータベースが存在します。
         </para>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><option>prepare</option></term>
         <listitem>
         <para>
<!--
         Prepare all statements before using them. Libecpg will keep a cache of
         prepared statements and reuse a statement if it gets executed again. If the
         cache runs full, libecpg will free the least used statement.
-->
すべての文を使用する前に準備(プリペア)します。
libecpgはプリペアド文のキャッシュを保持し、再実行される場合に文を再利用します。
キャッシュが満杯になった場合、libecpgは最も使用されていない文を解放します。
         </para>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><option>questionmarks</option></term>
         <listitem>
         <para>
<!--
         Allow question mark as placeholder for compatibility reasons.
         This used to be the default long ago.
-->
互換性のためにクエスチョンマークをプレースホルダとして許します。
これは大昔にデフォルトでした。
         </para>
         </listitem>
        </varlistentry>
       </variablelist></para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>-t</option></term>
     <listitem>
      <para>
<!--
       Turn on autocommit of transactions. In this mode, each SQL command is
       automatically committed unless it is inside an explicit
       transaction block. In the default mode, commands are committed
       only when <command>EXEC SQL COMMIT</command> is issued.
-->
トランザクションの自動コミットを有効にします。
このモードでは、各SQLコマンドは明示的なトランザクションブロックの内部にない限り、自動的にコミットされます。
デフォルトのモードでは、<command>EXEC SQL COMMIT</command>が発行された時にのみコマンドがコミットされます。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>-v</option></term>
     <listitem>
      <para>
<!--
       Print additional information including the version and the
       "include" path.
-->
バージョンやインクルード用パスなどの補足情報を表示します。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>--version</option></term>
     <listitem>
      <para>
<!--
       Print the <application>ecpg</application> version and exit.
-->
<application>ecpg</application>のバージョンを表示し、終了します。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><option>-?</option></term>
     <term><option>--help</option></term>
     <listitem>
      <para>
<!--
       Show help about <application>ecpg</application> command line
       arguments, and exit.
-->
<application>ecpg</application>のコマンドライン引数の使用方法を表示し、終了します。
      </para>
     </listitem>
    </varlistentry>

   </variablelist>
  </para>
 </refsect1>


 <refsect1>
<!--
  <title>Notes</title>
-->
<title>注釈</title>

  <para>
<!--
   When compiling the preprocessed C code files, the compiler needs to
   be able to find the <application>ECPG</> header files in the
   <productname>PostgreSQL</> include directory.  Therefore, you might
   have to use the <option>-I</> option when invoking the compiler
   (e.g., <literal>-I/usr/local/pgsql/include</literal>).
-->
前処理されたCコードファイルをコンパイルする際、コンパイラが<productname>PostgreSQL</>のインクルードディレクトリ内にある<application>ECPG</>ヘッダファイルを検索できるようにしなければなりません。
そのため、コンパイラの呼び出し時に、<option>-I</>オプションを使用しなければならない可能性があります（例：<literal>-I/usr/local/pgsql/include</literal>）。
  </para>

  <para>
<!--
   Programs using C code with embedded SQL have to be linked against
   the <filename>libecpg</filename> library, for example using the
   linker options <literal>-L/usr/local/pgsql/lib -lecpg</literal>.
-->
SQLが埋め込まれたCプログラムには、リンカオプション<literal>-L/usr/local/pgsql/lib -lecpg</literal>を使用するなどして、<filename>libecpg</filename>ライブラリをリンクする必要があります。
  </para>

  <para>
<!--
   The value of either of these directories that is appropriate for
   the installation can be found out using <xref
   linkend="app-pgconfig">.
-->
使用するシステムにおいて上記の2つに対応するディレクトリを調べるには、<xref linkend="app-pgconfig">を使用します。
  </para>
 </refsect1>


 <refsect1>
<!--
  <title>Examples</title>
-->
<title>例</title>

  <para>
<!--
   If you have an embedded SQL C source file named
   <filename>prog1.pgc</filename>, you can create an executable
   program using the following sequence of commands:
-->
埋め込みSQLを使用した<filename>prog1.pgc</filename>というCソースファイルがある場合、次のコマンドを順番に実行すれば、実行可能プログラムを作成することができます。
<programlisting>
ecpg prog1.pgc
cc -I/usr/local/pgsql/include -c prog1.c
cc -o prog1 prog1.o -L/usr/local/pgsql/lib -lecpg
</programlisting></para>
 </refsect1>

</refentry>
