<!--
doc/src/sgml/ref/prepare.sgml
PostgreSQL documentation
-->

<refentry id="SQL-PREPARE">
 <indexterm zone="sql-prepare">
  <primary>PREPARE</primary>
 </indexterm>

 <indexterm zone="sql-prepare">
<!--
  <primary>prepared statements</primary>
  <secondary>creating</secondary>
-->
  <primary>プリペアド文</primary>
  <secondary>の作成</secondary>
 </indexterm>

 <refmeta>
  <refentrytitle>PREPARE</refentrytitle>
  <manvolnum>7</manvolnum>
<!--
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 言語</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>PREPARE</refname>
<!--
  <refpurpose>prepare a statement for execution</refpurpose>
-->
  <refpurpose>実行する文を準備する</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
PREPARE <replaceable class="PARAMETER">name</replaceable> [ ( <replaceable class="PARAMETER">data_type</replaceable> [, ...] ) ] AS <replaceable class="PARAMETER">statement</replaceable>
</synopsis>
 </refsynopsisdiv>

 <refsect1>
<!--
  <title>Description</title>
-->
  <title>説明</title>

  <para>
<!--
   <command>PREPARE</command> creates a prepared statement. A prepared
   statement is a server-side object that can be used to optimize
   performance. When the <command>PREPARE</command> statement is
   executed, the specified statement is parsed, analyzed, and rewritten.
   When an <command>EXECUTE</command> command is subsequently
   issued, the prepared statement is planned and executed.  This division
   of labor avoids repetitive parse analysis work, while allowing
   the execution plan to depend on the specific parameter values supplied.
-->
<command>PREPARE</command>はプリペアド文を作成します。
プリペアド文は、性能を最適化するために利用可能なサーバ側オブジェクトです。
<command>PREPARE</command>文を実行すると、指定された問い合わせの構文解析、書き換えが行われます。
その後、<command>EXECUTE</command>文が発行された際に、プリペアド文は実行計画が作成され、実行されます。
この作業の分割により構文解析作業が繰り返されることを防止でき、さらに、特定のパラメータ値に合わせた実行計画を提供することができます。
  </para>

  <para>
<!--
   Prepared statements can take parameters: values that are
   substituted into the statement when it is executed. When creating
   the prepared statement, refer to parameters by position, using
   <literal>$1</>, <literal>$2</>, etc. A corresponding list of
   parameter data types can optionally be specified. When a
   parameter's data type is not specified or is declared as
   <literal>unknown</literal>, the type is inferred from the context
   in which the parameter is used (if possible). When executing the
   statement, specify the actual values for these parameters in the
   <command>EXECUTE</command> statement.  Refer to <xref
   linkend="sql-execute"> for more
   information about that.
-->
プリペアド文はパラメータ、すなわち文が実行される時に代入される値を取ることができます。
プリペアド文を作成する時には<literal>$1</>や<literal>$2</>などを使用して、位置によりパラメータを参照してください。
対応するパラメータのデータ型のリストをオプションで指定することもできます。
パラメータのデータ型の指定がない、または、<literal>unknown</literal>と宣言されている場合、型はパラメータが使用される文脈より（可能ならば）推測されます。
文の実行時には、<command>EXECUTE</command>文内にこれらのパラメータの実際の値を指定します。
詳細は<xref linkend="sql-execute">を参照してください。
  </para>

  <para>
<!--
   Prepared statements only last for the duration of the current
   database session. When the session ends, the prepared statement is
   forgotten, so it must be recreated before being used again. This
   also means that a single  prepared statement cannot be used by
   multiple simultaneous database clients; however, each client can create
   their own prepared statement to use.  Prepared statements can be
   manually cleaned up using the <xref linkend="sql-deallocate"> command.
-->
プリペアド文は現在のデータベースセッションの期間中にのみ保持されます。
セッションが終了すると、プリペアド文は破棄されます。
そのため、再び利用する場合は、再作成する必要があります。
また、これは、1つのプリペアド文を同時実行中の複数のデータベースクライアントから使用することはできないことを意味します。
ただし、各クライアントが個別にプリペアド文を作成することはできます。
プリペアド文を手作業で削除するには、<xref linkend="sql-deallocate">コマンドを使用します。
  </para>

  <para>
<!--
   Prepared statements have the largest performance advantage when a
   single session is being used to execute a large number of similar
   statements. The performance difference will be particularly
   significant if the statements are complex to plan or rewrite, for
   example, if the query involves a join of many tables or requires
   the application of several rules. If the statement is relatively simple
   to plan and rewrite but relatively expensive to execute, the
   performance advantage of prepared statements will be less noticeable.
-->
プリペアド文の利点を最大限に発揮できるのは、単一のセッションで同類の問い合わせを多数実行する場合です。
パフォーマンスの違いは、文の書き換えや実行計画が複雑なほど顕著になるでしょう。
例えば、問い合わせに多数のテーブルの結合が含まれている場合や、いくつものルールを適用しなければならない場合などが考えられます。 
書き換えおよび実行計画が比較的単純で、実行コストが高い文の場合は、プリペアド文の効果はそれほど現れないでしょう。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>Parameters</title>
-->
  <title>パラメータ</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="PARAMETER">name</replaceable></term>
    <listitem>
     <para>
<!--
      An arbitrary name given to this particular prepared
      statement. It must be unique within a single session and is
      subsequently used to execute or deallocate a previously prepared
      statement.
-->
個々のプリペアド文に与えられる任意の名前です。
この名前は、1つのセッション内で一意でなければいけません。プリペアド文の実行および削除の時に、この名前が使用されます。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">data_type</replaceable></term>
    <listitem>
     <para>
<!--
      The data type of a parameter to the prepared statement.  If the
      data type of a particular parameter is unspecified or is
      specified as <literal>unknown</literal>, it will be inferred
      from the context in which the parameter is used. To refer to the
      parameters in the prepared statement itself, use
      <literal>$1</literal>, <literal>$2</literal>, etc.
-->
プリペアド文に対するパラメータのデータ型です。
特定のパラメータのデータ型の指定がない、または、<literal>unknown</literal>と指定された場合、パラメータが使用される文脈から推測されます。
プリペアド文自体の中でこのパラメータを参照する時は、<literal>$1</literal>、<literal>$2</literal>などを使用します。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="PARAMETER">statement</replaceable></term>
    <listitem>
     <para>
<!--
      Any <command>SELECT</>, <command>INSERT</>, <command>UPDATE</>,
      <command>DELETE</>, or <command>VALUES</> statement.
-->
任意の<command>SELECT</>、<command>INSERT</>、<command>UPDATE</>、<command>DELETE</>、<command>VALUES</>文です。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
<!--
  <title>Notes</title>
-->
  <title>注釈</title>

  <para>
<!--
   If a prepared statement is executed enough times, the server may eventually
   decide to save and re-use a generic plan rather than re-planning each time.
   This will occur immediately if the prepared statement has no parameters;
   otherwise it occurs only if the generic plan appears to be not much more
   expensive than a plan that depends on specific parameter values.
   Typically, a generic plan will be selected only if the query's performance
   is estimated to be fairly insensitive to the specific parameter values
   supplied.
-->
プリペアド文が何度も実行される場合、サーバは最終的に、毎回計画を再作成するのではなく、一般的な計画を保存し再利用することに決定する可能性があります。
プリペアド文がパラメータを持たない場合、これは即座に起こります。
パラメータを持つ場合は、一般的な計画がパラメータ値に合わせた計画に比べて大して高価ではないように見える場合に、これが起こります。
一般化された計画は典型的には、問い合わせの性能が提供された特定のパラメータ値に大きな影響を受けない場合のみに選ばれます。
  </para>

  <para>
<!--
   To examine the query plan <productname>PostgreSQL</productname> is using
   for a prepared statement, use <xref linkend="sql-explain">.
   If a generic plan is in use, it will contain parameter symbols
   <literal>$<replaceable>n</></literal>, while a custom plan will have the
   current actual parameter values substituted into it.
-->
プリペアド文に対して<productname>PostgreSQL</productname>が使用する問い合わせ計画を検証するためには、<xref linkend="sql-explain">を使用してください。
一般的な計画が使用される場合には、<literal>$<replaceable>n</></literal>というパラメータ記号が含まれ、独自計画が使用される場合は現在のパラメータの実値で置換されます。
  </para>

  <para>
<!--
   For more information on query planning and the statistics collected
   by <productname>PostgreSQL</productname> for that purpose, see
   the <xref linkend="sql-analyze">
   documentation.
-->
問い合わせの実行計画や問い合わせの最適化のために<productname>PostgreSQL</productname>が収集する統計に関する詳細は、<xref linkend="sql-analyze">のドキュメントを参照してください。
  </para>

  <para>
<!--
   Although the main point of a prepared statement is to avoid repeated parse
   analysis and planning of the statement, <productname>PostgreSQL</> will
   force re-analysis and re-planning of the statement before using it
   whenever database objects used in the statement have undergone
   definitional (DDL) changes since the previous use of the prepared
   statement.  Also, if the value of <xref linkend="guc-search-path"> changes
   from one use to the next, the statement will be re-parsed using the new
   <varname>search_path</>.  (This latter behavior is new as of
   <productname>PostgreSQL</productname> 9.3.)  These rules make use of a
   prepared statement semantically almost equivalent to re-submitting the
   same query text over and over, but with a performance benefit if no object
   definitions are changed, especially if the best plan remains the same
   across uses.  An example of a case where the semantic equivalence is not
   perfect is that if the statement refers to a table by an unqualified name,
   and then a new table of the same name is created in a schema appearing
   earlier in the <varname>search_path</>, no automatic re-parse will occur
   since no object used in the statement changed.  However, if some other
   change forces a re-parse, the new table will be referenced in subsequent
   uses.
-->
プリペアド文の主要な利点は、文の解析処理と計画作成処理の繰り返しを防止することですが、<productname>PostgreSQL</>では、以前にそのプリペアド文を使用してから、文の中で使用されているデータベースオブジェクトが定義（DDL）の変更を受けた時は常に再解析処理と計画再作成処理を強制します。
また、一度使用してから<xref linkend="guc-search-path">の値が変わった場合も、文は新しい<varname>search_path</>を使用して再解析されます。
（後者の振る舞いは<productname>PostgreSQL</productname> 9.3の時に追加されました。）
これらの規則により、プリペアド文の使用は意味的に同じ問い合わせを繰り返し再投入することとほぼ同じになりますが、特に最善の計画が使用している間に変わらずに残る場合、オブジェクトの変更がない場合の性能という利点があります。
意味的な等価性が完全ではない場合の例は、
文が未修飾名によってテーブルを参照し、その後同じ名前のテーブルが新たに<varname>search_path</>内で前に現れるスキーマ内に作成された場合、文の中で使用されるオブジェクトには変更がありませんので、自動再解析は行われません。
しかし他の何らかの変更により強制的に再解析された場合、その後の使用では新しいテーブルが参照されるようになります。

  </para>

  <para>
<!--
   You can see all prepared statements available in the session by querying the
   <link linkend="view-pg-prepared-statements"><structname>pg_prepared_statements</structname></link>
   system view.
-->
<link linkend="view-pg-prepared-statements"><structname>pg_prepared_statements</structname></link>システムビューを問い合わせることによりセッションで利用可能なプリペアド文をすべて確認することができます。
  </para>
 </refsect1>

 <refsect1 id="sql-prepare-examples">
<!--
  <title id="sql-prepare-examples-title">Examples</title>
-->
  <title id="sql-prepare-examples-title">例</title>
  <para>
<!--
   Create a prepared statement for an <command>INSERT</command>
   statement, and then execute it:
-->
<command>INSERT</command>文に対してプリペアド文を作成し、実行します。
<programlisting>
PREPARE fooplan (int, text, bool, numeric) AS
    INSERT INTO foo VALUES($1, $2, $3, $4);
EXECUTE fooplan(1, 'Hunter Valley', 't', 200.00);
</programlisting>
  </para>

  <para>
<!--
   Create a prepared statement for a <command>SELECT</command>
   statement, and then execute it:
-->
<command>SELECT</command>文に対してプリペアド文を作成し、実行します。
<programlisting>
PREPARE usrrptplan (int) AS
    SELECT * FROM users u, logs l WHERE u.usrid=$1 AND u.usrid=l.usrid
    AND l.date = $2;
EXECUTE usrrptplan(1, current_date);
</programlisting>

<!--
   Note that the data type of the second parameter is not specified,
   so it is inferred from the context in which <literal>$2</> is used.
-->
第2パラメータのデータ型が指定されていないことに注目してください。
このため<literal>$2</>が使用される文脈からデータ型が推測されます。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>Compatibility</title>
-->
  <title>互換性</title>

  <para>
<!--
   The SQL standard includes a <command>PREPARE</command> statement,
   but it is only for use in embedded SQL. This version of the
   <command>PREPARE</command> statement also uses a somewhat different
   syntax.
-->
標準SQLには<command>PREPARE</command>文が含まれていますが、埋め込みSQLでの使用に限られています。
また、標準SQLの<command>PREPARE</command>文では多少異なる構文が使用されます。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>See Also</title>
-->
  <title>関連項目</title>

  <simplelist type="inline">
   <member><xref linkend="sql-deallocate"></member>
   <member><xref linkend="sql-execute"></member>
  </simplelist>
 </refsect1>
</refentry>
