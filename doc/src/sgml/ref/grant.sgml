<!--
doc/src/sgml/ref/grant.sgml
PostgreSQL documentation
-->

<refentry id="SQL-GRANT">
 <indexterm zone="sql-grant">
  <primary>GRANT</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>GRANT</refentrytitle>
  <manvolnum>7</manvolnum>
<!--
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 言語</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>GRANT</refname>
<!--
  <refpurpose>define access privileges</refpurpose>
-->
<refpurpose>アクセス権限を定義する</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
GRANT { { SELECT | INSERT | UPDATE | DELETE | TRUNCATE | REFERENCES | TRIGGER }
    [, ...] | ALL [ PRIVILEGES ] }
    ON { [ TABLE ] <replaceable class="PARAMETER">table_name</replaceable> [, ...]
         | ALL TABLES IN SCHEMA <replaceable class="PARAMETER">schema_name</replaceable> [, ...] }
    TO { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...] [ WITH GRANT OPTION ]

GRANT { { SELECT | INSERT | UPDATE | REFERENCES } ( <replaceable class="PARAMETER">column_name</replaceable> [, ...] )
    [, ...] | ALL [ PRIVILEGES ] ( <replaceable class="PARAMETER">column_name</replaceable> [, ...] ) }
    ON [ TABLE ] <replaceable class="PARAMETER">table_name</replaceable> [, ...]
    TO { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...] [ WITH GRANT OPTION ]

GRANT { { USAGE | SELECT | UPDATE }
    [, ...] | ALL [ PRIVILEGES ] }
    ON { SEQUENCE <replaceable class="PARAMETER">sequence_name</replaceable> [, ...]
         | ALL SEQUENCES IN SCHEMA <replaceable class="PARAMETER">schema_name</replaceable> [, ...] }
    TO { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...] [ WITH GRANT OPTION ]

GRANT { { CREATE | CONNECT | TEMPORARY | TEMP } [, ...] | ALL [ PRIVILEGES ] }
    ON DATABASE <replaceable>database_name</replaceable> [, ...]
    TO { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...] [ WITH GRANT OPTION ]

GRANT { USAGE | ALL [ PRIVILEGES ] }
    ON DOMAIN <replaceable>domain_name</replaceable> [, ...]
    TO { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...] [ WITH GRANT OPTION ]

GRANT { USAGE | ALL [ PRIVILEGES ] }
    ON FOREIGN DATA WRAPPER <replaceable>fdw_name</replaceable> [, ...]
    TO { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...] [ WITH GRANT OPTION ]

GRANT { USAGE | ALL [ PRIVILEGES ] }
    ON FOREIGN SERVER <replaceable>server_name</replaceable> [, ...]
    TO { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...] [ WITH GRANT OPTION ]

GRANT { EXECUTE | ALL [ PRIVILEGES ] }
    ON { FUNCTION <replaceable>function_name</replaceable> ( [ [ <replaceable class="parameter">argmode</replaceable> ] [ <replaceable class="parameter">arg_name</replaceable> ] <replaceable class="parameter">arg_type</replaceable> [, ...] ] ) [, ...]
         | ALL FUNCTIONS IN SCHEMA <replaceable class="PARAMETER">schema_name</replaceable> [, ...] }
    TO { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...] [ WITH GRANT OPTION ]

GRANT { USAGE | ALL [ PRIVILEGES ] }
    ON LANGUAGE <replaceable>lang_name</replaceable> [, ...]
    TO { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...] [ WITH GRANT OPTION ]

GRANT { { SELECT | UPDATE } [, ...] | ALL [ PRIVILEGES ] }
    ON LARGE OBJECT <replaceable class="PARAMETER">loid</replaceable> [, ...]
    TO { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...] [ WITH GRANT OPTION ]

GRANT { { CREATE | USAGE } [, ...] | ALL [ PRIVILEGES ] }
    ON SCHEMA <replaceable>schema_name</replaceable> [, ...]
    TO { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...] [ WITH GRANT OPTION ]

GRANT { CREATE | ALL [ PRIVILEGES ] }
    ON TABLESPACE <replaceable>tablespace_name</replaceable> [, ...]
    TO { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...] [ WITH GRANT OPTION ]

GRANT { USAGE | ALL [ PRIVILEGES ] }
    ON TYPE <replaceable>type_name</replaceable> [, ...]
    TO { [ GROUP ] <replaceable class="PARAMETER">role_name</replaceable> | PUBLIC } [, ...] [ WITH GRANT OPTION ]

GRANT <replaceable class="PARAMETER">role_name</replaceable> [, ...] TO <replaceable class="PARAMETER">role_name</replaceable> [, ...] [ WITH ADMIN OPTION ]
</synopsis>
 </refsynopsisdiv>

 <refsect1 id="sql-grant-description">
<!--
  <title>Description</title>
-->
<title>説明</title>

  <para>
<!--
   The <command>GRANT</command> command has two basic variants: one
   that grants privileges on a database object (table, column, view, foreign
   table, sequence, database, foreign-data wrapper, foreign server, function,
   procedural language, schema, or tablespace), and one that grants
   membership in a role.  These variants are similar in many ways, but
   they are different enough to be described separately.
-->
<command>GRANT</command>には基本的に2つの種類があります。
1つはデータベースオブジェクト（テーブル、列、ビュー、外部テーブル、シーケンス、データベース、外部データラッパ、外部サーバ、関数、手続き言語、スキーマ、テーブル空間）に対する権限の付与、もう1つはロール内のメンバ資格の付与です。
これらの種類は多くの点で似ていますが、説明は別々に行わなければならない程違いがあります。
  </para>

 <refsect2 id="sql-grant-description-objects">
<!--
  <title>GRANT on Database Objects</title>
-->
  <title>データベースオブジェクトに対するGRANT</title>

  <para>
<!--
   This variant of the <command>GRANT</command> command gives specific
   privileges on a database object to
   one or more roles.  These privileges are added
   to those already granted, if any.
-->
この種類の<command>GRANT</command>コマンドはデータベースオブジェクトの特定の権限を1つ以上のロールに付与します。
既に権限が他のロールに付与されている場合でも、追加として付与されます。
  </para>

  <para>
<!--
   There is also an option to grant privileges on all objects of the same
   type within one or more schemas.  This functionality is currently supported
   only for tables, sequences, and functions (but note that <literal>ALL
   TABLES</> is considered to include views and foreign tables).
-->
1つ以上のスキーマ内の同じ種類のオブジェクトすべてに対して権限を付与するオプションも存在します。
この機能は現在テーブル、シーケンス、関数のみでサポートされます。
（しかし<literal>ALL TABLES</>にはビューおよび外部テーブルが含まれるとみなされていることに注意してください。）
  </para>

  <para>
<!--
   The key word <literal>PUBLIC</literal> indicates that the
   privileges are to be granted to all roles, including those that might
   be created later.  <literal>PUBLIC</literal> can be thought of as an
   implicitly defined group that always includes all roles.
   Any particular role will have the sum
   of privileges granted directly to it, privileges granted to any role it
   is presently a member of, and privileges granted to
   <literal>PUBLIC</literal>.
-->
<literal>PUBLIC</literal>キーワードは、今後作成されるロールを含む、全てのロールへの許可を示します。
<literal>PUBLIC</literal>は、全てのロールを常に含む、暗黙的に定義されたグループと考えることができます。
個々のロールは全て、ロールに直接許可された権限、ロールが現在属しているロールに許可された権限、そして、<literal>PUBLIC</literal>に許可された権限を合わせた権限を持っています。
  </para>

  <para>
<!--
   If <literal>WITH GRANT OPTION</literal> is specified, the recipient
   of the privilege can in turn grant it to others.  Without a grant
   option, the recipient cannot do that.  Grant options cannot be granted
   to <literal>PUBLIC</literal>.
-->
<literal>WITH GRANT OPTION</literal>が指定されると、権限の受領者は、その後、他にその権限を与えることができます。
グラントオプションがない場合、受領者はこれを行うことができません。
グラントオプションは<literal>PUBLIC</literal>には与えることができません。
  </para>

  <para>
<!--
   There is no need to grant privileges to the owner of an object
   (usually the user that created it),
   as the owner has all privileges by default.  (The owner could,
   however, choose to revoke some of his own privileges for safety.)
-->
所有者（通常はオブジェクトを作成したユーザ）はデフォルトで全ての権限を保持しているため、オブジェクトの所有者に権限を許可する必要はありません
（ただし、オブジェクトの作成者が、安全性のために自らの権限を取り消すことは可能です）。
  </para>

  <para>
<!--
   The right to drop an object, or to alter its definition in any way, is
   not treated as a grantable privilege; it is inherent in the owner,
   and cannot be granted or revoked.  (However, a similar effect can be
   obtained by granting or revoking membership in the role that owns
   the object; see below.)  The owner implicitly has all grant
   options for the object, too.
-->
オブジェクトを削除する権限や何らかの方法でオブジェクトの定義を変更する権限は、付与可能な権限として扱われません。
これらの権限は、所有者固有のものであり、許可したり取り消したりすることはできません。
（しかし、オブジェクトを所有するロール内のメンバ関係を付与したり取り消すことで、同等な効果を得ることができます。
後で説明します。）
所有者は、オブジェクトに対する全てのグラントオプションも暗黙的に保持しています。
  </para>

  <para>
<!--
   PostgreSQL grants default privileges on some types of objects to
   <literal>PUBLIC</literal>.  No privileges are granted to
   <literal>PUBLIC</literal> by default on tables,
   columns, schemas or tablespaces. For other types, the default privileges
   granted to <literal>PUBLIC</literal> are as follows:
   <literal>CONNECT</literal> and <literal>CREATE TEMP TABLE</literal> for
   databases; <literal>EXECUTE</literal> privilege for functions; and
   <literal>USAGE</literal> privilege for languages.
   The object owner can, of course, <command>REVOKE</command>
   both default and  expressly granted privileges. (For maximum
   security, issue the <command>REVOKE</> in the same transaction that
   creates the object; then there is no window in which another user
   can use the object.)
   Also, these initial default privilege settings can be changed using the
   <xref linkend="sql-alterdefaultprivileges">
   command.
-->
PostgreSQLは、一部の種類のオブジェクトに対し、デフォルトの権限を<literal>PUBLIC</literal>に付与します。
デフォルトでは、テーブル、列、スキーマ、テーブル空間に関して<literal>PUBLIC</literal>に与えられるアクセス権限はありません。
他の種類のオブジェクトでは、<literal>PUBLIC</literal>に与えられる権限は次の通りです。
データベースでは<literal>CONNECT</literal>および<literal>CREATE TEMP TABLE</literal>権限、関数では<literal>EXECUTE</>権限、言語では<literal>USAGE</>権限です。
もちろんオブジェクトの所有者はデフォルトで与えられた権限と明示的に与えられた権限の両方を<command>REVOKE</command>することができます。
（最大限の安全性を得るには、オブジェクトを作成したトランザクションと同じトランザクション内で<command>REVOKE</>コマンドを発行してください。
そうすれば、他のユーザがそのオブジェクトを使用できる隙間はなくなります）。
また、これらの初期デフォルト権限の設定は<xref linkend="sql-alterdefaultprivileges">コマンドを使用して変更可能です。
  </para>

  <para>
<!--
   The possible privileges are:
-->
設定可能な権限は以下のものです。

   <variablelist>
    <varlistentry>
     <term>SELECT</term>
     <listitem>
      <para>
<!--
       Allows <xref linkend="sql-select"> from
       any column, or the specific columns listed, of the specified table,
       view, or sequence.
       Also allows the use of
       <xref linkend="sql-copy"> TO.
       This privilege is also needed to reference existing column values in
       <xref linkend="sql-update"> or
       <xref linkend="sql-delete">.
       For sequences, this privilege also allows the use of the
       <function>currval</function> function.
       For large objects, this privilege allows the object to be read.
-->
指定したテーブル、ビュー、シーケンスの任意の列あるいは指定した列リストに対する<xref linkend="sql-select">を許可します。
また、<xref linkend="sql-copy"> TOの使用も許可します。
存在する列の値を<xref linkend="sql-update">や<xref linkend="sql-delete">で参照するためにも、この権限は必要です。
シーケンスでは、この権限によって<function>currval</function>関数を使用することができます。
ラージオブジェクトでは、この権限によってオブジェクトを読み取ることができます。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>INSERT</term>
     <listitem>
      <para>
<!--
       Allows <xref linkend="sql-insert"> of a new
       row into the specified table.  If specific columns are listed,
       only those columns may be assigned to in the <command>INSERT</>
       command (other columns will therefore receive default values).
       Also allows <xref linkend="sql-copy"> FROM.
-->
指定したテーブルへの新規の行の<xref linkend="sql-insert">を許可します。
列リストが指定された場合は、これらの列のみを<command>INSERT</>コマンド内で設定することができます（従って、その他の列はデフォルト値となります）。
また、<xref linkend="sql-copy"> FROMの使用も許可します。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>UPDATE</term>
     <listitem>
      <para>
<!--
       Allows <xref linkend="sql-update"> of any
       column, or the specific columns listed, of the specified table.
       (In practice, any nontrivial <command>UPDATE</> command will require
       <literal>SELECT</> privilege as well, since it must reference table
       columns to determine which rows to update, and/or to compute new
       values for columns.)
       <literal>SELECT ... FOR UPDATE</literal>
       and <literal>SELECT ... FOR SHARE</literal>
       also require this privilege on at least one column, in addition to the
       <literal>SELECT</literal> privilege.  For sequences, this
       privilege allows the use of the <function>nextval</function> and
       <function>setval</function> functions.
       For large objects, this privilege allows writing or truncating the
       object.
-->
指定したテーブルの任意の列あるいは指定した列リストに対する<xref linkend="sql-update">を許可します。
（実際には、単純ではない<command>UPDATE</>コマンドはすべて、<literal>SELECT</>権限を同様に必要とします。
どの行を更新すべきかを決めるため、または、列の新しい値を計算するため、またはその両方のため、テーブル列を参照する必要があるからです。）
<literal>SELECT ... FOR UPDATE</literal>および<literal>SELECT ... FOR SHARE</literal>も、<literal>SELECT</literal>権限に加えて、少なくとも1つの列に対するこの権限を必要とします。
シーケンスでは、この権限により<function>nextval</function>および<function>setval</function>関数の使用が許可されます。
ラージオブジェクトでは、この権限によりオブジェクトの書き出しや切り詰めを行うことができます。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>DELETE</term>
     <listitem>
      <para>
<!--
       Allows <xref linkend="sql-delete"> of a row
       from the specified table.
       (In practice, any nontrivial <command>DELETE</> command will require
       <literal>SELECT</> privilege as well, since it must reference table
       columns to determine which rows to delete.)
-->
指定したテーブルからの行の<xref linkend="sql-delete">を許可します。
（実際には、単純ではない<command>DELETE</>コマンドはすべて、<literal>SELECT</>権限を同様に必要とします。
どの行を削除すべきかを決めるためにテーブルの列を参照する必要があるからです。）
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>TRUNCATE</term>
     <listitem>
      <para>
<!--
       Allows <xref linkend="sql-truncate"> on
       the specified table.
-->
指定したテーブルに対して<xref linkend="sql-truncate">を行うことができます。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>REFERENCES</term>
     <listitem>
      <para>
<!--
       To create a foreign key constraint, it is
       necessary to have this privilege on both the referencing and
       referenced columns.  The privilege may be granted for all columns
       of a table, or just specific columns.
-->
外部キー制約を作成するには、参照する側と参照される側の両方の列に対して、この権限を持っていなければなりません。
この権限はテーブルのすべての列に付与することも、特定の列のみに付与することもできます。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>TRIGGER</term>
     <listitem>
      <para>
<!--
       Allows the creation of a trigger on the specified table.  (See the
       <xref linkend="sql-createtrigger"> statement.)
-->
指定したテーブル上のトリガの作成を許可します
（<xref linkend="sql-createtrigger">文を参照してください）。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>CREATE</term>
     <listitem>
      <para>
<!--
       For databases, allows new schemas to be created within the database.
-->
対象がデータベースの場合は、データベース内での新規スキーマの作成を許可します。
      </para>
      <para>
<!--
       For schemas, allows new objects to be created within the schema.
       To rename an existing object, you must own the object <emphasis>and</>
       have this privilege for the containing schema.
-->
対象がスキーマの場合は、スキーマ内での新規オブジェクトの作成を許可します。 
既存のオブジェクトの名前を変更するには、オブジェクトを所有し、<emphasis>かつ</>、そのオブジェクトが入っているスキーマに対してこの権限を保持していなければなりません。
      </para>
      <para>
<!--
       For tablespaces, allows tables, indexes, and temporary files to be
       created within the tablespace, and allows databases to be created that
       have the tablespace as their default tablespace.  (Note that revoking
       this privilege will not alter the placement of existing objects.)
-->
対象がテーブル空間の場合は、テーブル空間内でのテーブルとインデックス、一時ファイルの作成と、デフォルトのテーブル空間としてこのテーブル空間を持つデータベースの作成を許可します
（この権限の取り消しによって既存のデータベースやスキーマの配置が変わることはないことに注意してください）。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>CONNECT</term>
     <listitem>
      <para>
<!--
       Allows the user to connect to the specified database.  This
       privilege is checked at connection startup (in addition to checking
       any restrictions imposed by <filename>pg_hba.conf</>).
-->
ユーザは指定されたデータベースに接続することができます。
この権限は（<filename>pg_hba.conf</>で組み込まれる制限の検査に加え）接続開始時に検査されます。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>TEMPORARY</term>
     <term>TEMP</term>
     <listitem>
      <para>
<!--
       Allows temporary tables to be created while using the specified database.
-->
指定したデータベースの使用中に一時テーブルを作成することを許可します。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>EXECUTE</term>
     <listitem>
      <para>
<!--
       Allows the use of the specified function and the use of any
       operators that are implemented on top of the function.  This is
       the only type of privilege that is applicable to functions.
       (This syntax works for aggregate functions, as well.)
-->
指定された関数、さらにその関数で実装されている任意の演算子の使用を許可します。  
これは、関数に適用することができる唯一の権限です
（この構文は集約関数についても同じように機能します）。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>USAGE</term>
     <listitem>
      <para>
<!--
       For procedural languages, allows the use of the specified language for
       the creation of functions in that language.  This is the only type
       of privilege that is applicable to procedural languages.
-->
対象が手続き言語の場合、その言語で関数を作成することを許可します。
これは、手続き言語に適用することができる唯一の権限です。
      </para>
      <para>
<!--
       For schemas, allows access to objects contained in the specified
       schema (assuming that the objects' own privilege requirements are
       also met).  Essentially this allows the grantee to <quote>look up</>
       objects within the schema.  Without this permission, it is still
       possible to see the object names, e.g. by querying the system tables.
       Also, after revoking this permission, existing backends might have
       statements that have previously performed this lookup, so this is not
       a completely secure way to prevent object access.
-->
対象がスキーマの場合、指定したスキーマに含まれるオブジェクトへのアクセスを許可します（オブジェクト自体の権限要件も満たされている必要があります）。
本質的には、この権限によってスキーマ内のオブジェクトを<quote>検索</>する権限が認められます。
この権限がなくても、例えばシステムテーブルを問い合わせることでオブジェクト名を知ることは可能です。
また、この権限を取り消した後でも、存在し続けているバックエンドがこうした検索を以前に実行していた文を持っている可能性があります。
このため、これはオブジェクトへのアクセスを防ぐ、完全に安全な方法ではありません。
      </para>
      <para>
<!--
       For sequences, this privilege allows the use of the
       <function>currval</function> and <function>nextval</function> functions.
-->
対象がシーケンスの場合、この権限は<function>currval</function>および<function>nextval</function>関数の使用を許可します。
      </para>
      <para>
<!--
       For types and domains, this privilege allow the use of the type or
       domain in the creation of tables, functions, and other schema objects.
       (Note that it does not control general <quote>usage</quote> of the type,
       such as values of the type appearing in queries.  It only prevents
       objects from being created that depend on the type.  The main purpose of
       the privilege is controlling which users create dependencies on a type,
       which could prevent the owner from changing the type later.)
-->
対象が型あるいはドメインの場合、この権限により、テーブル、関数、その他のスキーマオブジェクトの作成の際に、この型またはドメインを使用できるようになります。
（問い合わせにおけるその型の値に対する操作など、一般的な型の<quote>使用</quote>を制御するものではないことに注意してください。
その型に依存したオブジェクトが作成されることを防止するだけです。
この権限の主な目的は、どのユーザが型に依存するものを作成するかを制御することです。
そのようなオブジェクトが作成されると、所有者がその型を後で変更できなくなるかもしれないからです。
）
      </para>
      <para>
<!--
       For foreign-data wrappers, this privilege enables the grantee
       to create new servers using that foreign-data wrapper.
-->
対象が外部データラッパの場合、この権限を与えられると外部データラッパを使用する新しいサーバを作成することができます。
      </para>
      <para>
<!--
       For servers, this privilege enables the grantee to create foreign
       tables using the server, and also to create, alter, or drop his own
       user's user mappings associated with that server.
-->
対象がサーバの場合、この権限を与えられると、サーバを使用する外部テーブルの作成を行うことができ、サーバと関連し自身が所有するユーザのユーザマップを作成、変更、削除を行うことができます。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term>ALL PRIVILEGES</term>
     <listitem>
      <para>
<!--
       Grant all of the available privileges at once.
       The <literal>PRIVILEGES</literal> key word is optional in
       <productname>PostgreSQL</productname>, though it is required by
       strict SQL.
-->
利用可能な全ての権限を一度に付与します。
<literal>PRIVILEGES</literal>キーワードは<productname>PostgreSQL</productname>では省略可能ですが、厳密なSQLでは必須です。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>

<!--
   The privileges required by other commands are listed on the
   reference page of the respective command.
-->
その他のコマンドの実行に必要な権限は、そのコマンドのリファレンスページにて示されています。
  </para>
 </refsect2>

 <refsect2 id="sql-grant-description-roles">
<!--
  <title>GRANT on Roles</title>
-->
  <title>ロールに対するGRANT</title>

  <para>
<!--
   This variant of the <command>GRANT</command> command grants membership
   in a role to one or more other roles.  Membership in a role is significant
   because it conveys the privileges granted to a role to each of its
   members.
-->
この種類の<command>GRANT</command>コマンドは、ロール内のメンバ資格を1つ以上の他のロールに付与します。
これによりロールに付与された権限が各メンバに与えられるので、ロール内のメンバ資格は重要です。
  </para>

  <para>
<!--
   If <literal>WITH ADMIN OPTION</literal> is specified, the member can
   in turn grant membership in the role to others, and revoke membership
   in the role as well.  Without the admin option, ordinary users cannot
   do that.  A role is not considered to hold <literal>WITH ADMIN
   OPTION</literal> on itself, but it may grant or revoke membership in
   itself from a database session where the session user matches the
   role.  Database superusers can grant or revoke membership in any role
   to anyone.  Roles having <literal>CREATEROLE</> privilege can grant
   or revoke membership in any role that is not a superuser.
   database superusers can grant or revoke membership in any role to anyone.
   Roles having <literal>CREATEROLE</> privilege can grant or revoke
   membership in any role that is not a superuser.
-->
<literal>WITH ADMIN OPTION</literal>が指定された場合、メンバはロール内のメンバ資格を他に付与することができるようになります。
また同様にロール内のメンバ資格を取り消すこともできるようになります。
アドミンオプションがないと、一般ユーザは他への権限の付与や取り消しを行うことができません。
ロールはそれ自体についての<literal>WITH ADMIN OPTION</literal>を保持しているとはみなされませんが、データベースセッションのユーザがロールにマッチする場合について、ロール内のメンバ資格を付与あるいは取り消しを行うことができます。
データベーススーパーユーザはすべてのロール内のメンバ資格を誰にでも付与したり、取り消したりすることができます。
<literal>CREATEROLE</>権限を持つロールは、スーパーユーザロール以外の任意のロール内のメンバ資格の付与、取り上げが可能です。
  </para>

  <para>
<!--
   Unlike the case with privileges, membership in a role cannot be granted
   to <literal>PUBLIC</>.  Note also that this form of the command does not
   allow the noise word <literal>GROUP</>.
-->
権限の場合と異なり、ロール内のメンバ資格を<literal>PUBLIC</>に付与することはできません。
また、このコマンド構文では無意味な<literal>GROUP</>という単語を受け付けないことに注意してください。
  </para>
 </refsect2>
 </refsect1>


 <refsect1 id="SQL-GRANT-notes">
<!--
  <title>Notes</title>
-->
<title>注釈</title>

   <para>
<!--
    The <xref linkend="sql-revoke"> command is used
    to revoke access privileges.
-->
アクセス権限を取り消すには、<xref linkend="sql-revoke">コマンドが使用されます。
   </para>

   <para>
<!--
    Since <productname>PostgreSQL</productname> 8.1, the concepts of users and
    groups have been unified into a single kind of entity called a role.
    It is therefore no longer necessary to use the keyword <literal>GROUP</>
    to identify whether a grantee is a user or a group.  <literal>GROUP</>
    is still allowed in the command, but it is a noise word.
-->
<productname>PostgreSQL</productname> 8.1から、ユーザとグループという概念は、ロールと呼ばれる１種類の実体に統合されました。
そのため、付与者がユーザかグループかどうかを識別するために<literal>GROUP</>キーワードを使用する必要はなくなりました。
このコマンドではまだ<literal>GROUP</>を使うことはできますが、何の意味もありません。
   </para>

   <para>
<!--
    A user may perform <command>SELECT</>, <command>INSERT</>, etc. on a
    column if he holds that privilege for either the specific column or
    its whole table.  Granting the privilege at the table level and then
    revoking it for one column will not do what you might wish: the
    table-level grant is unaffected by a column-level operation.
-->
ユーザは特定の列あるいはテーブル全体に対する権限を持つ場合に<command>SELECT</>、<command>INSERT</>などを実行することができます。
テーブルレベルの権限を付与してからある列に対する権限を取り消しても、望むことは実現できません。
テーブルレベルの権限は列レベルの操作による影響を受けないからです。
   </para>

   <para>
<!--
    When a non-owner of an object attempts to <command>GRANT</> privileges
    on the object, the command will fail outright if the user has no
    privileges whatsoever on the object.  As long as some privilege is
    available, the command will proceed, but it will grant only those
    privileges for which the user has grant options.  The <command>GRANT ALL
    PRIVILEGES</> forms will issue a warning message if no grant options are
    held, while the other forms will issue a warning if grant options for
    any of the privileges specifically named in the command are not held.
    (In principle these statements apply to the object owner as well, but
    since the owner is always treated as holding all grant options, the
    cases can never occur.)
-->
オブジェクトの所有者でもなく、そのオブジェクトに何の権限も持たないユーザが、そのオブジェクトの権限を<command>GRANT</>しようとしても、コマンドの実行は直ちに失敗します。
何らかの権限を持っている限り、コマンドの実行は進行しますが、与えることのできる権限は、そのユーザがグラントオプションを持つ権限のみです。
グラントオプションを持っていない場合、<command>GRANT ALL PRIVILEGES</>構文は警告メッセージを発します。
一方、その他の構文では、コマンドで名前を指定した権限に関するグラントオプションを持っていない場合に警告メッセージを発します
（原理上、ここまでの説明はオブジェクトの所有者に対しても当てはまりますが、所有者は常に全てのグラントオプションを保持しているものとして扱われるため、こうした状態は決して起こりません）。
   </para>

   <para>
<!--
    It should be noted that database superusers can access
    all objects regardless of object privilege settings.  This
    is comparable to the rights of <literal>root</> in a Unix system.
    As with <literal>root</>, it's unwise to operate as a superuser
    except when absolutely necessary.
-->
データベーススーパーユーザは、オブジェクトに関する権限設定に関係なく、全てのオブジェクトにアクセスできることには注意しなければなりません。
スーパーユーザが持つ権限は、Unixシステムにおける<literal>root</>権限に似ています。
<literal>root</>と同様、どうしても必要という場合以外は、スーパーユーザとして操作を行わないのが賢明です。
   </para>

   <para>
<!--
    If a superuser chooses to issue a <command>GRANT</> or <command>REVOKE</>
    command, the command is performed as though it were issued by the
    owner of the affected object.  In particular, privileges granted via
    such a command will appear to have been granted by the object owner.
    (For role membership, the membership appears to have been granted
    by the containing role itself.)
-->
スーパーユーザが<command>GRANT</>や<command>REVOKE</>の発行を選択した場合、それらのコマンドは対象とするオブジェクトの所有者が発行したかのように実行されます。
特に、こうしたコマンドで与えられる権限は、オブジェクトの所有者によって与えられたものとして表されます。
（ロールのメンバ資格では、メンバ資格は含まれるロール自身が与えたものとして表されます。）
   </para>

   <para>
<!--
    <command>GRANT</> and <command>REVOKE</> can also be done by a role
    that is not the owner of the affected object, but is a member of the role
    that owns the object, or is a member of a role that holds privileges
    <literal>WITH GRANT OPTION</literal> on the object.  In this case the
    privileges will be recorded as having been granted by the role that
    actually owns the object or holds the privileges
    <literal>WITH GRANT OPTION</literal>.  For example, if table
    <literal>t1</> is owned by role <literal>g1</>, of which role
    <literal>u1</> is a member, then <literal>u1</> can grant privileges
    on <literal>t1</> to <literal>u2</>, but those privileges will appear
    to have been granted directly by <literal>g1</>.  Any other member
    of role <literal>g1</> could revoke them later.
-->
<command>GRANT</>および<command>REVOKE</>は、対象のオブジェクトの所有者以外のロールによって実行することもできますが、
オブジェクトを所有するロールのメンバであるか、そのオブジェクトに対し<literal>WITH GRANT OPTION</literal>権限を持つロールのメンバでなければなりません。
この場合、その権限は、そのオブジェクトの実際の所有者ロールまたは<literal>WITH GRANT OPTION</literal>権限を持つロールによって付与されたものとして記録されます。
例えば、テーブル<literal>t1</>がロール<literal>g1</>によって所有され、ロール<literal>u1</>がロール<literal>g1</>のメンバであるとします。
この場合、<literal>u1</>は<literal>t1</>に関する権限を<literal>u2</>に付与できます。
しかし、これらの権限は<literal>g1</>によって直接付与されたものとして現れます。
後でロール<literal>g1</>の他のメンバがこの権限を取り消すことができます。
   </para>

   <para>
<!--
    If the role executing <command>GRANT</> holds the required privileges
    indirectly via more than one role membership path, it is unspecified
    which containing role will be recorded as having done the grant.  In such
    cases it is best practice to use <command>SET ROLE</> to become the
    specific role you want to do the <command>GRANT</> as.
-->
<command>GRANT</>を実行したロールが、ロールの持つ複数メンバ資格の経路を通して間接的に必要な権限を持つ場合、
どのロールが権限を付与したロールとして記録されるかについては指定されません。
こうした場合、<command>SET ROLE</>を使用して、<command>GRANT</>を行わせたい特定のロールになることを推奨します。
   </para>

   <para>
<!--
    Granting permission on a table does not automatically extend
    permissions to any sequences used by the table, including
    sequences tied to <type>SERIAL</> columns.  Permissions on
    sequences must be set separately.
-->
テーブルへの権限付与によって、<type>SERIAL</>列によって関連付けされたシーケンスを含め、そのテーブルで使用されるシーケンスへの権限の拡張は自動的に行われません。
シーケンスへの権限は別途設定しなければなりません。

   </para>

   <para>
<!--
    Use <xref linkend="app-psql">'s <command>\dp</command> command
    to obtain information about existing privileges for tables and
    columns.  For example:
-->
既存のテーブルおよび列に対する権限についての情報を得るには、以下の例のように<xref linkend="app-psql">の<command>\dp</command>コマンドを使用してください。
<programlisting>
=&gt; \dp mytable
                              Access privileges
 Schema |  Name   | Type  |   Access privileges   | Column access privileges 
--------+---------+-------+-----------------------+--------------------------
 public | mytable | table | miriam=arwdDxt/miriam | col1:
                          : =r/miriam             :   miriam_rw=rw/miriam
                          : admin=arw/miriam        
(1 row)
</programlisting>
<!--
    The entries shown by <command>\dp</command> are interpreted thus:
-->
<command>\dp</command>で表される項目は、以下のように解釈することができます。
<literallayout class="monospaced">
<!--
rolename=xxxx &#045;- privileges granted to a role
        =xxxx &#045;- privileges granted to PUBLIC

            r &#045;- SELECT ("read")
            w &#045;- UPDATE ("write")
            a &#045;- INSERT ("append")
            d &#045;- DELETE
            D &#045;- TRUNCATE
            x &#045;- REFERENCES
            t &#045;- TRIGGER
            X &#045;- EXECUTE
            U &#045;- USAGE
            C &#045;- CREATE
            c &#045;- CONNECT
            T &#045;- TEMPORARY
      arwdDxt &#045;- ALL PRIVILEGES (for tables, varies for other objects)
            * &#045;- grant option for preceding privilege

        /yyyy &#045;- role that granted this privilege
-->
rolename=xxxx -- ロールに与えられた権限
        =xxxx -- PUBLICに与えられた権限

            r -- SELECT（読み取り（read））
            w -- UPDATE（書き込み（write））
            a -- INSERT（追加（append））
            d -- DELETE
            D -- TRUNCATE
            x -- REFERENCES
            t -- TRIGGER
            X -- EXECUTE
            U -- USAGE
            C -- CREATE
            c -- CONNECT
            T -- TEMPORARY
      arwdDxt -- すべての権限 (テーブル用。他のオブジェクトでは異なります。)
            * -- 直前の権限に関するグラントオプション

        /yyyy -- この権限を付与したロール
</literallayout>

<!--
    The above example display would be seen by user <literal>miriam</> after
    creating table <literal>mytable</> and doing:
-->
上記の例は、<literal>mytable</>テーブルを作成し、次のコマンドを実行した後に<literal>miriam</>ユーザに表示されます。

<programlisting>
GRANT SELECT ON mytable TO PUBLIC;
GRANT SELECT, UPDATE, INSERT ON mytable TO admin;
GRANT SELECT (col1), UPDATE (col1) ON mytable TO miriam_rw;
</programlisting>
   </para>

   <para>
<!--
    For non-table objects there are other <command>\d</> commands
    that can display their privileges.
-->
テーブル以外のオブジェクトでは、その権限を表示することができる他の<command>\d</>コマンドがあります。
   </para>

   <para>
<!--
    If the <quote>Access privileges</> column is empty for a given object,
    it means the object has default privileges (that is, its privileges column
    is null).  Default privileges always include all privileges for the owner,
    and can include some privileges for <literal>PUBLIC</> depending on the
    object type, as explained above.  The first <command>GRANT</> or
    <command>REVOKE</> on an object
    will instantiate the default privileges (producing, for example,
    <literal>{miriam=arwdDxt/miriam}</>) and then modify them per the
    specified request.  Similarly, entries are shown in <quote>Column access
    privileges</> only for columns with nondefault privileges.
    (Note: for this purpose, <quote>default privileges</> always means the
    built-in default privileges for the object's type.  An object whose
    privileges have been affected by an <command>ALTER DEFAULT PRIVILEGES</>
    command will always be shown with an explicit privilege entry that
    includes the effects of the <command>ALTER</>.)
-->
あるオブジェクトの<quote>アクセス権限</>列が空の場合、そのオブジェクトはデフォルトの権限を持っていることを意味します（つまり権限フィールドがNULL）。
所有者に対しては、デフォルト権限として常に全ての権限が含まれていますが、オブジェクトの種類によっては、<literal>PUBLIC</>の権限が含まれていることがあります。
これについては既に説明した通りです。
オブジェクトに対する最初の<command>GRANT</>または<command>REVOKE</>が実行されるとデフォルトの権限がインスタンス化され（例えば<literal>{miriam=arwdDxt/miriam}</>のように作成されます）、与えられた要求によってこれらを変更します。
同様に、デフォルト以外の権限を持つ列に対してのみ<quote>列アクセス権限</>内で項目が表示されます。
（注意：
この目的のために、<quote>デフォルト権限</>とはそのオブジェクト種類の組み込みのデフォルト権限を意味します。
<command>ALTER DEFAULT PRIVILEGES</>コマンドにより影響をうける権限を持つオブジェクトは常に、この<command>ALTER</>による影響を含め、明示的な権限項目を持って表示されます。）
   </para>


   <para>
<!--
    Notice that the owner's implicit grant options are not marked in the
    access privileges display.  A <literal>*</> will appear only when
    grant options have been explicitly granted to someone.
-->
所有者が暗黙のうちに持つグラントオプションは、上記のアクセス権限の表示に出力されていない点に注目してください。
<literal>*</>は、グラントオプションが明示的に誰かに与えられた場合にのみ出力されます。
   </para>

 </refsect1>

 <refsect1 id="sql-grant-examples">
<!--
  <title>Examples</title>
-->
<title>例</title>

  <para>
<!--
   Grant insert privilege to all users on table <literal>films</literal>:
-->
テーブル<literal>films</literal>にデータを追加する権限を全てのユーザに与えます。

<programlisting>
GRANT INSERT ON films TO PUBLIC;
</programlisting>
  </para>

  <para>
<!--
   Grant all available privileges to user <literal>manuel</literal> on view
   <literal>kinds</literal>:
-->
ビュー<literal>kinds</literal>における利用可能な全ての権限を、ユーザ<literal>manuel</literal>に与えます。

<programlisting>
GRANT ALL PRIVILEGES ON kinds TO manuel;
</programlisting>

<!--
   Note that while the above will indeed grant all privileges if executed by a
   superuser or the owner of <literal>kinds</literal>, when executed by someone
   else it will only grant those permissions for which the someone else has
   grant options.
-->
上のコマンドをスーパーユーザや<literal>kinds</literal>の所有者が実行した場合は、全ての権限が付与されますが、他のユーザが実行した場合は、そのユーザがグラントオプションを持つ権限のみが付与されることに注意してください。
  </para>

  <para>
<!--
   Grant membership in role <literal>admins</> to user <literal>joe</>:
-->
ロール<literal>admins</>内のメンバ資格をユーザ<literal>joe</>に与えます。

<programlisting>
GRANT admins TO joe;
</programlisting></para>
 </refsect1>

 <refsect1 id="sql-grant-compatibility">
<!--
  <title>Compatibility</title>
-->
<title>互換性</title>

   <para>
<!--
    According to the SQL standard, the <literal>PRIVILEGES</literal>
    key word in <literal>ALL PRIVILEGES</literal> is required.  The
    SQL standard does not support setting the privileges on more than
    one object per command.
-->
標準SQLでは、<literal>ALL PRIVILEGES</literal>内の<literal>PRIVILEGES</literal>キーワードは必須です。
標準SQLでは、1つのコマンドで複数のオブジェクトに権限を設定することはサポートしていません。
   </para>

   <para>
<!--
    <productname>PostgreSQL</productname> allows an object owner to revoke his
    own ordinary privileges: for example, a table owner can make the table
    read-only to himself by revoking his own <literal>INSERT</>,
    <literal>UPDATE</>, <literal>DELETE</>, and <literal>TRUNCATE</>
    privileges.  This is not possible according to the SQL standard.  The
    reason is that <productname>PostgreSQL</productname> treats the owner's
    privileges as having been granted by the owner to himself; therefore he
    can revoke them too.  In the SQL standard, the owner's privileges are
    granted by an assumed entity <quote>_SYSTEM</>.  Not being
    <quote>_SYSTEM</>, the owner cannot revoke these rights.
-->
<productname>PostgreSQL</productname>では、オブジェクトの所有者は、自身が持つ権限を取り消すことができます。
例えば、テーブル所有者は自身の<literal>INSERT</>、<literal>UPDATE</>、<literal>DELETE</>、<literal>TRUNCATE</>権限を取り消すことで、自分にとってそのテーブルが読み取り専用になるよう変更することができます。
これは、標準SQLでは不可能です。
<productname>PostgreSQL</productname>では、所有者の権限を、所有者自身により与えられたものとして扱っているため、同様に所有者自身で権限を取り消すことができるようになっています。
標準SQLでは、所有者の権限は仮想的なエンティティ<quote>_SYSTEM</>によって与えられたものとして扱っています。
所有者は<quote>_SYSTEM</>ではないため、その権限を取り消すことができません。
   </para>

   <para>
<!--
    According to the SQL standard, grant options can be granted to
    <literal>PUBLIC</literal>; PostgreSQL only supports granting grant options
    to roles.
-->
標準SQLにしたがうと、グラントオプションは<literal>PUBLIC</literal>に対して与えることができます。
PostgreSQLではグラントオプションはロールに対して与えることのみをサポートしています。
   </para>

   <para>
<!--
    The SQL standard provides for a <literal>USAGE</literal> privilege
    on other kinds of objects: character sets, collations,
    translations.
-->
標準SQLでは、文字セット、照合順序、翻訳といったその他の種類のオブジェクトに対して、<literal>USAGE</literal>権限を付与することができます。
   </para>

   <para>
<!--
    In the SQL standard, sequences only have a <literal>USAGE</literal>
    privilege, which controls the use of the <literal>NEXT VALUE FOR</literal>
    expression, which is equivalent to the
    function <function>nextval</function> in PostgreSQL.  The sequence
    privileges <literal>SELECT</literal> and <literal>UPDATE</literal> are
    PostgreSQL extensions.  The application of the
    sequence <literal>USAGE</literal> privilege to
    the <literal>currval</literal> function is also a PostgreSQL extension (as
    is the function itself).
-->
標準SQLでは、シーケンスは<literal>USAGE</literal>権限のみを持ちます。
これはPostgreSQLにおける<function>nextval</function>関数と等価な<literal>NEXT VALUE FOR</literal>式の使用を制御するものです。
シーケンスに関する<literal>SELECT</literal>権限と<literal>UPDATE</literal>権限はPostgreSQLの拡張です。
シーケンスに関する<literal>USAGE</literal>権限が<literal>currval</literal>関数にも適用される点もPostgreSQLの拡張です(この関数自体が拡張です)。
   </para>

   <para>
<!--
    Privileges on databases, tablespaces, schemas, and languages are
    <productname>PostgreSQL</productname> extensions.
-->
データベース、テーブル空間、スキーマ、言語についての権限は<productname>PostgreSQL</productname>の拡張です。
   </para>
 </refsect1>


 <refsect1>
<!--
  <title>See Also</title>
-->
  <title>関連項目</title>

  <simplelist type="inline">
   <member><xref linkend="sql-revoke"></member>
   <member><xref linkend="sql-alterdefaultprivileges"></member>
  </simplelist>
 </refsect1>

</refentry>
