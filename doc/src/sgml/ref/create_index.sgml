<!--
doc/src/sgml/ref/create_index.sgml
PostgreSQL documentation
-->

<refentry id="SQL-CREATEINDEX">
 <indexterm zone="sql-createindex">
  <primary>CREATE INDEX</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>CREATE INDEX</refentrytitle>
  <manvolnum>7</manvolnum>
<!--
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 言語</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE INDEX</refname>
<!--
  <refpurpose>define a new index</refpurpose>
-->
  <refpurpose>
新しいインデックスを定義する
  </refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
CREATE [ UNIQUE ] INDEX [ CONCURRENTLY ] [ <replaceable class="parameter">name</replaceable> ] ON <replaceable class="parameter">table_name</replaceable> [ USING <replaceable class="parameter">method</replaceable> ]
    ( { <replaceable class="parameter">column_name</replaceable> | ( <replaceable class="parameter">expression</replaceable> ) } [ COLLATE <replaceable class="parameter">collation</replaceable> ] [ <replaceable class="parameter">opclass</replaceable> ] [ ASC | DESC ] [ NULLS { FIRST | LAST } ] [, ...] )
    [ WITH ( <replaceable class="PARAMETER">storage_parameter</replaceable> = <replaceable class="PARAMETER">value</replaceable> [, ... ] ) ]
    [ TABLESPACE <replaceable class="parameter">tablespace_name</replaceable> ]
    [ WHERE <replaceable class="parameter">predicate</replaceable> ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
<!--
  <title>Description</title>
-->
  <title>説明</title>

  <para>
<!--
   <command>CREATE INDEX</command> constructs an index on the specified column(s)
   of the specified relation, which can be a table or a materialized view.
   Indexes are primarily used to enhance database performance (though
   inappropriate use can result in slower performance).
-->
<command>CREATE INDEX</command>は、指定したリレーションの指定した列(複数可)に対するインデックスを作ります。
リレーションとしてテーブルまたはマテリアライズドビューを取ることができます。
インデックスは主にデータベースの性能を向上するために使われます
（しかし、インデックスの不適切な使用は性能の低下につながる可能性があります）。
  </para>

  <para>
<!--
   The key field(s) for the index are specified as column names,
   or alternatively as expressions written in parentheses.
   Multiple fields can be specified if the index method supports
   multicolumn indexes.
-->
インデックスのキーフィールドは、列名、または括弧に囲まれた式として指定されます。
インデックスメソッドが複数列に対するインデックスをサポートする場合は、複数のフィールドを指定できます。
  </para>

  <para>
<!--
   An index field can be an expression computed from the values of
   one or more columns of the table row.  This feature can be used
   to obtain fast access to data based on some transformation of
   the basic data. For example, an index computed on
   <literal>upper(col)</> would allow the clause
   <literal>WHERE upper(col) = 'JIM'</> to use an index.
-->
インデックスのフィールドとして、テーブル行の1つ以上の列の値から計算する式を指定できます。
この機能は、元のデータに何らかの変換を加えた値を基とするデータへの高速なアクセスを行う手段として使用することができます。
例えば、<literal>upper(col)</>という計算に基づくインデックスがあれば、<literal>WHERE upper(col) = 'JIM'</>という句ではインデックスを使用することができます。
  </para>

  <para>
<!--
   <productname>PostgreSQL</productname> provides the index methods
   B-tree, hash, GiST, SP-GiST, and GIN.  Users can also define their own index
   methods, but that is fairly complicated.
-->
<application>PostgreSQL</application>はB-tree、ハッシュ、GiST、SP-GiST、GINのインデックスメソッドを用意しています。
ユーザが独自にインデックスメソッドを定義することもできますが、これはかなり複雑です。
  </para>

  <para>
<!--
    When the <literal>WHERE</literal> clause is present, a
    <firstterm>partial index</firstterm> is created.
    A partial index is an index that contains entries for only a portion of
    a table, usually a portion that is more useful for indexing than the
    rest of the table. For example, if you have a table that contains both
    billed and unbilled orders where the unbilled orders take up a small
    fraction of the total table and yet that is an often used section, you
    can improve performance by creating an index on just that portion.
    Another possible application is to use <literal>WHERE</literal> with
    <literal>UNIQUE</literal> to enforce uniqueness over a subset of a
    table.  See <xref linkend="indexes-partial"> for more discussion.
-->
<literal>WHERE</literal>句が存在する場合、<firstterm>部分インデックス</firstterm>が作成されます。
部分インデックスは、テーブルの一部、通常は、テーブルの中でよりインデックスが有用な部分のみのエントリを持つインデックスです。
例えば、請求済みの注文と未請求の注文を情報として持つテーブルがあり、テーブル全体における未請求の注文の割合が小さく、かつ、頻繁に使用される場合、未請求の注文のみにインデックスを作成することで性能を向上できます。
部分インデックスのその他の利用方法として、<command>UNIQUE</command>付きの<command>WHERE</command>を使用して、テーブルの部分集合に一意性を強制する例が考えられます。
詳細は<xref linkend="indexes-partial">を参照してください。
  </para>

  <para>
<!--
    The expression used in the <literal>WHERE</literal> clause can refer
    only to columns of the underlying table, but it can use all columns,
    not just the ones being indexed.  Presently, subqueries and
    aggregate expressions are also forbidden in <literal>WHERE</literal>.
    The same restrictions apply to index fields that are expressions.
-->
<literal>WHERE</literal>句内の式では、元となるテーブルの列のみを参照できます。
しかし、インデックスを付加する列だけではなく、全ての列を使用することができます。
また、現在、副問い合わせと集約式については、<command>WHERE</command>で使用することができません。
同一の制限は、式で表されたインデックスのフィールドにも適用されます。
  </para>

  <para>
<!--
   All functions and operators used in an index definition must be
   <quote>immutable</>, that is, their results must depend only on
   their arguments and never on any outside influence (such as
   the contents of another table or the current time).  This restriction
   ensures that the behavior of the index is well-defined.  To use a
   user-defined function in an index expression or <literal>WHERE</literal>
   clause, remember to mark the function immutable when you create it.
-->
インデックスの定義で使用される全ての関数と演算子は、<quote>不変</>（immutable）でなければなりません。
つまり、結果は入力引数にのみに依存し、（他のテーブルの内容や現時刻などの）外部からの影響を受けてはなりません。
この制限によって、インデックスの動作が十分定義されていることが保証されます。  
インデックス式や<literal>WHERE</literal>句にユーザ定義の関数を使用する場合、関数を作成する際、IMMUTABLE（不変）オプションを付けることを忘れないでください。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>Parameters</title>
-->
  <title>パラメータ</title>

    <variablelist>
     <varlistentry>
      <term><literal>UNIQUE</literal></term>
      <listitem>
       <para>
<!--
        Causes the system to check for
        duplicate values in the table when the index is created (if data
        already exist) and each time data is added. Attempts to
        insert or update data which would result in duplicate entries
        will generate an error.
-->
インデックスを（既にデータがある状態で）作成する時、およびテーブルにデータを追加する時に、テーブル内の値が重複していないかを検査します。
重複エントリを生じるデータの挿入または更新はエラーとなります。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>CONCURRENTLY</literal></term>
      <listitem>
       <para>
<!--
        When this option is used, <productname>PostgreSQL</> will build the
        index without taking any locks that prevent concurrent inserts,
        updates, or deletes on the table; whereas a standard index build
        locks out writes (but not reads) on the table until it's done.
        There are several caveats to be aware of when using this option
        &mdash; see <xref linkend="SQL-CREATEINDEX-CONCURRENTLY"
        endterm="SQL-CREATEINDEX-CONCURRENTLY-title">.
-->
このオプションを使用すると、<productname>PostgreSQL</>は、対象テーブルに対する同時挿入、更新、削除を防止するようなロックを獲得せずにインデックスを作成します。
通常のインデックス作成処理では、完了するまで対象テーブルへの書き込みはできません（読み取りは可能です）。
このオプションを使用する際に注意しなければならない点が複数あります。
<xref linkend="SQL-CREATEINDEX-CONCURRENTLY" endterm="SQL-CREATEINDEX-CONCURRENTLY-title">を参照してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">name</replaceable></term>
      <listitem>
       <para>
<!--
        The name of the index to be created.  No schema name can be included
        here; the index is always created in the same schema as its parent
        table.  If the name is omitted, <productname>PostgreSQL</> chooses a
        suitable name based on the parent table's name and the indexed column
        name(s).
-->
作成するインデックスの名前です。 
この名前には、スキーマ名を含めることはできません。
インデックスは、常にその親テーブルと同じスキーマに作成されます。
この名前を省略すると、<productname>PostgreSQL</>はその親テーブルの名前とインデックス付けされる列名に基づいた適切な名前を選びます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">table_name</replaceable></term>
      <listitem>
       <para>
<!--
        The name (possibly schema-qualified) of the table to be indexed.
-->
インデックスを作成するテーブルの名前です（スキーマ修飾名の場合もあります）。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">method</replaceable></term>
      <listitem>
       <para>
<!--
        The name of the index method to be used.  Choices are
        <literal>btree</literal>, <literal>hash</literal>,
        <literal>gist</literal>, <literal>spgist</> and <literal>gin</>.
        The default method is <literal>btree</literal>.
-->
使用するインデックスメソッドの名前です。
<literal>btree</literal>、<literal>hash</literal>、<literal>gist</literal>、<literal>spgist</>、<literal>gin</>から選択します。
デフォルトのメソッドは<literal>btree</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">column_name</replaceable></term>
      <listitem>
       <para>
<!--
        The name of a column of the table.
-->
テーブルの列の名前です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">expression</replaceable></term>
      <listitem>
       <para>
<!--
        An expression based on one or more columns of the table.  The
        expression usually must be written with surrounding parentheses,
        as shown in the syntax.  However, the parentheses can be omitted
        if the expression has the form of a function call.
-->
テーブル上の1つ以上の列を使用した式です。
通常この式は、構文で示した通り括弧で囲む必要があります。
しかし、式が関数呼び出し形式になっている場合は括弧を省略することができます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">collation</replaceable></term>
      <listitem>
       <para>
<!--
        The name of the collation to use for the index.  By default,
        the index uses the collation declared for the column to be
        indexed or the result collation of the expression to be
        indexed.  Indexes with non-default collations can be useful for
        queries that involve expressions using non-default collations.
-->
インデックスで使用する照合順序の名前です。
デフォルトではインデックスはインデックス付け対象の列で宣言された照合順序またはインデックス付け対象の式の結果の照合順序を使用します。
デフォルト以外の照合順序を使用する式を含む問い合わせで、デフォルト以外の照合順序を持つインデックスが有用になるかもしれません。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">opclass</replaceable></term>
      <listitem>
       <para>
<!--
        The name of an operator class. See below for details.
-->
演算子クラスの名前です。詳細は下記を参照してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>ASC</></term>
      <listitem>
       <para>
<!--
        Specifies ascending sort order (which is the default).
-->
正方向のソート順を指定します(これがデフォルトです)。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>DESC</></term>
      <listitem>
       <para>
<!--
        Specifies descending sort order.
-->
逆方向のソート順を指定します。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>NULLS FIRST</></term>
      <listitem>
       <para>
<!--
        Specifies that nulls sort before non-nulls.  This is the default
        when <literal>DESC</> is specified.
-->
NULLを非NULLより前にソートすることを指定します。
これは<literal>DESC</>が指定された場合のデフォルトです。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>NULLS LAST</></term>
      <listitem>
       <para>
<!--
        Specifies that nulls sort after non-nulls.  This is the default
        when <literal>DESC</> is not specified.
-->
NULLを非NULLより後にソートすることを指定します。
これは<literal>DESC</>が指定されない場合のデフォルトです。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">storage_parameter</replaceable></term>
      <listitem>
       <para>
<!--
        The name of an index-method-specific storage parameter.  See
        <xref linkend="sql-createindex-storage-parameters" endterm="sql-createindex-storage-parameters-title">
        for details.
-->
インデックスメソッド固有の格納パラメータの名前です。
<xref linkend="sql-createindex-storage-parameters" endterm="sql-createindex-storage-parameters-title">を参照してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">tablespace_name</replaceable></term>
      <listitem>
       <para>
<!--
        The tablespace in which to create the index.  If not specified,
        <xref linkend="guc-default-tablespace"> is consulted, or
        <xref linkend="guc-temp-tablespaces"> for indexes on temporary
        tables.
-->
インデックスを生成するテーブル空間です。
指定されなかった場合、<xref linkend="guc-default-tablespace">、もし一時テーブル上のインデックスであれば、<xref linkend="guc-temp-tablespaces">が考慮されます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><replaceable class="parameter">predicate</replaceable></term>
      <listitem>
       <para>
<!--
        The constraint expression for a partial index.
-->
部分インデックス用の制約式です。
       </para>
      </listitem>
     </varlistentry>

    </variablelist>

  <refsect2 id="SQL-CREATEINDEX-storage-parameters">
<!--
   <title id="SQL-CREATEINDEX-storage-parameters-title">Index Storage Parameters</title>
-->
   <title id="SQL-CREATEINDEX-storage-parameters-title">インデックス格納パラメータ</title>

   <para>
<!--
    The optional <literal>WITH</> clause specifies <firstterm>storage
    parameters</> for the index.  Each index method has its own set of allowed
    storage parameters.  The B-tree, hash, GiST and SP-GiST index methods all
    accept this parameter:
-->
<literal>WITH</>句を使うと、インデックスの<firstterm>格納パラメータ</>を指定できます。
インデックスメソッドはそれぞれ固有の設定可能な格納パラメータを持ちます。
B-tree、ハッシュ、GiSTおよびSP-GiSTといったインデックスはすべて次のパラメータを受け付けます。
   </para>

   <variablelist>
   <varlistentry>
    <term><literal>FILLFACTOR</></term>
    <listitem>
     <para>
<!--
      The fillfactor for an index is a percentage that determines how full
      the index method will try to pack index pages.  For B-trees, leaf pages
      are filled to this percentage during initial index build, and also
      when extending the index at the right (adding new largest key values).
      If pages
      subsequently become completely full, they will be split, leading to
      gradual degradation in the index's efficiency.  B-trees use a default
      fillfactor of 90, but any integer value from 10 to 100 can be selected.
      If the table is static then fillfactor 100 is best to minimize the
      index's physical size, but for heavily updated tables a smaller
      fillfactor is better to minimize the need for page splits.  The
      other index methods use fillfactor in different but roughly analogous
      ways; the default fillfactor varies between methods.
-->
インデックス用のフィルファクタは割合（パーセント）で、インデックスメソッドがインデックスページをまとめ上げる時にどの程度ページを使用するかを決定するものです。
B-treeでは、リーフページは初期インデックス構築時と右側（新しい最大キー値を追加する方向）にインデックスを拡張する時にこの割合分までページを使用します。
その後ページすべてが完全に使用されると分割され、インデックスの効果が徐々に劣化します。
B-treeのデフォルトのフィルファクタは90ですが、10から100までの任意の整数値を設定することができます。
テーブルが静的な場合、100が最善でインデックスの物理サイズを最小化できます。
更新が非常に多い場合は、ページ分割の頻度を少なくするために、より小さなフィルファクタを設定する方が良いです。
この他のインデックスメソッドでは、フィルファクタを異なる意味で使用しますが、おおよそは同じです。
メソッドによってフィルファクタのデフォルト値は異なります。
     </para>
    </listitem>
   </varlistentry>
   </variablelist>

   <para>
<!--
    GiST indexes additionally accept this parameter:
-->
GiSTインデックスではさらに以下のパラメータを受け付けます。
   </para>

   <variablelist>
   <varlistentry>
    <term><literal>BUFFERING</></term>
    <listitem>
    <para>
<!--
     Determines whether the buffering build technique described in
     <xref linkend="gist-buffering-build"> is used to build the index. With
     <literal>OFF</> it is disabled, with <literal>ON</> it is enabled, and
     with <literal>AUTO</> it is initially disabled, but turned on
     on-the-fly once the index size reaches <xref linkend="guc-effective-cache-size">. The default is <literal>AUTO</>.
-->
<xref linkend="gist-buffering-build">で説明するバッファリング構築技術をインデックスを構築する時に使用するかどうかを決定します。
<literal>OFF</>で無効に、<literal>ON</>で有効になります。
また<literal>AUTO</>と指定すると、最初は無効ですが、
インデックスサイズが<xref linkend="guc-effective-cache-size">に達した後はその場で有効になります。
デフォルトは<literal>AUTO</>です。
    </para>
    </listitem>
   </varlistentry>
   </variablelist>

   <para>
<!--
    GIN indexes accept a different parameter:
-->
GINインデックスでは以下の異なるパラメータを受け付けます。
   </para>

   <variablelist>
   <varlistentry>
    <term><literal>FASTUPDATE</></term>
    <listitem>
    <para>
<!--
     This setting controls usage of the fast update technique described in
     <xref linkend="gin-fast-update">.  It is a Boolean parameter:
     <literal>ON</> enables fast update, <literal>OFF</> disables it.
     (Alternative spellings of <literal>ON</> and <literal>OFF</> are
     allowed as described in <xref linkend="config-setting">.)  The
     default is <literal>ON</>.
-->
この設定は<xref linkend="gin-fast-update">で説明する高速更新技法を使用するかどうかを制御します。
これは論理値パラメータであり、<literal>ON</>は高速更新を有効に、<literal>OFF</>は無効にします。
（<xref linkend="config-setting">の説明のように、<literal>ON</>や<literal>OFF</>と異なる記載も可能です。）
デフォルトは<literal>ON</>です。
    </para>

    <note>
     <para>
<!--
      Turning <literal>FASTUPDATE</> off via <command>ALTER INDEX</> prevents
      future insertions from going into the list of pending index entries,
      but does not in itself flush previous entries.  You might want to
      <command>VACUUM</> the table afterward to ensure the pending list is
      emptied.
-->
<command>ALTER INDEX</>を使用して<literal>FASTUPDATE</>を無効にすることにより、以後の挿入は待機中のインデックス項目リストに入らないようになります。
しかし、このコマンド自体はこれまでの項目を吐き出しません。
確実に待機中のリストを空にするためには、続いてテーブルを<command>VACUUM</>する方が良いでしょう。
     </para>
    </note>
    </listitem>
   </varlistentry>
   </variablelist>
  </refsect2>

  <refsect2 id="SQL-CREATEINDEX-CONCURRENTLY">
<!--
   <title id="SQL-CREATEINDEX-CONCURRENTLY-title">Building Indexes Concurrently</title>
-->
   <title id="SQL-CREATEINDEX-CONCURRENTLY-title">インデックスの同時作成</title>

   <indexterm zone="SQL-CREATEINDEX-CONCURRENTLY">
<!--
   <primary>index</primary>
   <secondary>building concurrently</secondary>
-->
   <primary>インデックス</primary>
   <secondary>同時作成</secondary>
   </indexterm>

   <para>
<!--
    Creating an index can interfere with regular operation of a database.
    Normally <productname>PostgreSQL</> locks the table to be indexed against
    writes and performs the entire index build with a single scan of the
    table. Other transactions can still read the table, but if they try to
    insert, update, or delete rows in the table they will block until the
    index build is finished. This could have a severe effect if the system is
    a live production database.  Very large tables can take many hours to be
    indexed, and even for smaller tables, an index build can lock out writers
    for periods that are unacceptably long for a production system.
-->
インデックスの作成が、通常のデータベース操作に影響を与えることがあります。
通常<productname>PostgreSQL</>は、対象テーブルに対する書き込みをロックしてから、対象テーブル全体のインデックス作成を一度のスキャンで行います。
他のトランザクションはテーブルを読み取ることはできますが、対象テーブル内の行を挿入、更新、削除しようとすると、インデックス作成が完了するまでブロックされます。
実行中の運用状態のデータベースシステムの場合、これは重大な影響を与える可能性があります。
非常に大規模なテーブルに対するインデックス作成は何時間もかかることがあり得ます。
また小規模なテーブルであっても、インデックス作成により、運用状態のシステムとしては受け入れられないほど長い時間、書き込みロックがかかる可能性があります。
   </para>

   <para>
<!--
    <productname>PostgreSQL</> supports building indexes without locking
    out writes.  This method is invoked by specifying the
    <literal>CONCURRENTLY</> option of <command>CREATE INDEX</>.
    When this option is used,
    <productname>PostgreSQL</> must perform two scans of the table, and in
    addition it must wait for all existing transactions that could potentially
    use the index to terminate.  Thus
    this method requires more total work than a standard index build and takes
    significantly longer to complete.  However, since it allows normal
    operations to continue while the index is built, this method is useful for
    adding new indexes in a production environment.  Of course, the extra CPU
    and I/O load imposed by the index creation might slow other operations.
-->
<productname>PostgreSQL</>は書き込みをロックしないインデックス作成もサポートしています。
<command>CREATE INDEX</>に<literal>CONCURRENTLY</>オプションをつけることでこの方式が行われます。
このオプションを使うと、<productname>PostgreSQL</>はテーブルを2回スキャンしなければなりません。
さらに、潜在的にそのインデックスを使用する可能性がある、実行中のすべてのトランザクションが終わるまで待機しなければなりません。
したがって、この方式は通常の方式よりも総作業時間がかかり、また、完了するまでの時間が非常に長くなります。
しかし、インデックス作成中に通常の操作を行い続けることができますので、この方式は運用環境での新規インデックス作成に有用です。
もちろん、インデックス作成によりCPUや入出力に余分に負荷がかかりますので、他の操作が低速になる可能性があります。
   </para>

   <para>
<!--
    In a concurrent index build, the index is actually entered into
    the system catalogs in one transaction, then two table scans occur in
    two more transactions.  Any transaction active when the second table
    scan starts can block concurrent index creation until it completes,
    even transactions that only reference the table after the second table
    scan starts.   Concurrent index creation serially waits for each old
    transaction to complete using the method outlined in section <xref
    linkend="view-pg-locks">.
-->
同時実行インデックス構築では実際、1つのトランザクションでシステムカタログに登録され、さらに2つのトランザクションで２つのテーブルスキャンが起こります。
２回目のテーブルスキャンが始まった後にそのテーブルを参照するのみのトランザクションであったとしても、２回目のテーブルスキャンが始まった時に有効なトランザクションは、その完了まで、同時実行インデックス作成をブロックする可能性があります。
同時実行インデックス作成は、<xref linkend="view-pg-locks">節で概要を示す方法を用いて、古いトランザクションが完了することを直列的に待機します。
   </para>

   <para>
<!--
    If a problem arises while scanning the table, such as a deadlock or a
    uniqueness violation in a unique index, the <command>CREATE INDEX</>
    command will fail but leave behind an <quote>invalid</> index. This index
    will be ignored for querying purposes because it might be incomplete;
    however it will still consume update overhead. The <application>psql</>
    <command>\d</> command will report such an index as <literal>INVALID</>:
-->
たとえばデッドロックや一意性インデックスにおける一意性違反など、テーブルスキャン中に問題が発生すると、<command>CREATE INDEX</>は失敗しますが、<quote>無効な</>インデックスが残ってしまいます。
こうしたインデックスは完全ではない可能性がありますので、問い合わせの際には無視されます。
しかし、更新時にオーバーヘッドがかかります。
<application>psql</>の<command>\d</>コマンドでは、こうしたインデックスを<literal>INVALID</>として報告します。

<programlisting>
postgres=# \d tab
       Table "public.tab"
 Column |  Type   | Modifiers 
--------+---------+-----------
 col    | integer | 
Indexes:
    "idx" btree (col) INVALID
</programlisting>

<!--
    The recommended recovery
    method in such cases is to drop the index and try again to perform
    <command>CREATE INDEX CONCURRENTLY</>.  (Another possibility is to rebuild
    the index with <command>REINDEX</>.  However, since <command>REINDEX</>
    does not support concurrent builds, this option is unlikely to seem
    attractive.)
-->
こうした場合の推奨復旧方法は、インデックスを削除し、再度<command>CREATE INDEX CONCURRENTLY</>を実行することです。
（他にも<command>REINDEX</>を使用したインデックスの再作成という方法もあります。
しかし、<command>REINDEX</>は同時作成をサポートしていませんので、この方法は魅力がありません。）
   </para>

   <para>
<!--
    Another caveat when building a unique index concurrently is that the
    uniqueness constraint is already being enforced against other transactions
    when the second table scan begins.  This means that constraint violations
    could be reported in other queries prior to the index becoming available
    for use, or even in cases where the index build eventually fails.  Also,
    if a failure does occur in the second scan, the <quote>invalid</> index
    continues to enforce its uniqueness constraint afterwards.
-->
この他に一意性インデックスを同時作成する場合の注意事項があります。
2回目のテーブルスキャンが始まる時点で、他のトランザクションに対する一意性制約が既に有効になっているという点です。
これは、インデックスが使用できるようになる前やインデックス作成が最終的に失敗したとしても、制約違反が他のトランザクションで報告されてしまうことを意味します。
また、2回目のスキャン中に失敗した後も、<quote>無効な</>インデックスによる一意性制約は強制され続けます。
   </para>

   <para>
<!--
    Concurrent builds of expression indexes and partial indexes are supported.
    Errors occurring in the evaluation of these expressions could cause
    behavior similar to that described above for unique constraint violations.
-->
式インデックスや部分インデックスの同時作成もサポートされています。
式の評価中にエラーが発生した場合も、上で説明した一意性制約違反と同様な状況が発生します。
   </para>

   <para>
<!--
    Regular index builds permit other regular index builds on the
    same table to occur in parallel, but only one concurrent index build
    can occur on a table at a time.  In both cases, no other types of schema
    modification on the table are allowed meanwhile.  Another difference
    is that a regular <command>CREATE INDEX</> command can be performed within
    a transaction block, but <command>CREATE INDEX CONCURRENTLY</> cannot.
-->
同一テーブルに対する通常のインデックス作成処理は複数並行して行うことができます。
しかし、あるテーブルに対するインデックスの同時作成は一度に1つしか行うことができません。
また、どの場合でもインデックス作成中はテーブルスキーマの変更はできません。
この他に、通常の<command>CREATE INDEX</>コマンドはトランザクションブロック内で実行させることができますが、<command>CREATE INDEX CONCURRENTLY</>は実行させることができないという相違点があります。
   </para>
  </refsect2>
 </refsect1>

 <refsect1>
<!--
  <title>Notes</title>
-->
  <title>注釈</title>

  <para>
<!--
   See <xref linkend="indexes"> for information about when indexes can
   be used, when they are not used, and in which particular situations
   they can be useful.
-->
インデックスが、どのような時に使用され、どのような時に使用されないか、また、どのような場合に有用かといった情報については<xref linkend="indexes">を参照してください。
  </para>

  <caution>
   <para>
<!--
    Hash index operations are not presently WAL-logged,
    so hash indexes might need to be rebuilt with <command>REINDEX</>
    after a database crash if there were unwritten changes.
    Also, changes to hash indexes are not replicated over streaming or
    file-based replication after the initial base backup, so they
    give wrong answers to queries that subsequently use them.
    For these reasons, hash index use is presently discouraged.
-->
ハッシュインデックス操作は現在WALに記録されません。
このためハッシュインデックスは、データベースクラッシュの後未書き込みな変更があれば、<command>REINDEX</>を用いて再構築しなければならない可能性があります。
また、ハッシュインデックスの変更は最初のベースバックアップ以降のストリーミングまたはファイルベースのレプリケーションでは複製されません。
ですので、その後にそのインデックスを使用する問い合わせに対して間違った答えが返ります。
このような理由から現在ハッシュインデックスの使用を勧めません。
   </para>
  </caution>

  <para>
<!--
   Currently, only the B-tree, GiST and GIN index methods support
   multicolumn indexes. Up to 32 fields can be specified by default.
   (This limit can be altered when building
   <productname>PostgreSQL</productname>.)  Only B-tree currently
   supports unique indexes.
-->    
現在は、B-tree、GiST、GINインデックスメソッドのみが、複数列に対するインデックスをサポートしています。
指定できる列は、デフォルトでは32個までです（この制限は<productname>PostgreSQL</productname>のコンパイル時に変更できます）。
現在、B-treeのみが一意性インデックスをサポートしています。
  </para>

  <para>
<!--
   An <firstterm>operator class</firstterm> can be specified for each
   column of an index. The operator class identifies the operators to be
   used by the index for that column. For example, a B-tree index on
   four-byte integers would use the <literal>int4_ops</literal> class;
   this operator class includes comparison functions for four-byte
   integers. In practice the default operator class for the column's data
   type is usually sufficient. The main point of having operator classes
   is that for some data types, there could be more than one meaningful
   ordering. For example, we might want to sort a complex-number data
   type either by absolute value or by real part. We could do this by
   defining two operator classes for the data type and then selecting
   the proper class when making an index.  More information about
   operator classes is in <xref linkend="indexes-opclass"> and in <xref
   linkend="xindex">.
-->
<firstterm>演算子クラス</firstterm>は、インデックスのそれぞれの列に指定することができます。
演算子クラスは、その列のインデックスが使う演算子を識別します。
例えば、4バイト整数に対するB-treeインデックスには、<literal>int4_ops</literal>クラスを使います。
この演算子クラスには、4バイト整数の比較関数が含まれています。
実際の使用では、通常、列のデータ型のデフォルト演算子クラスで十分です。
演算子クラスを保持する主な理由は、データ型の中には有意な順序を2つ以上持つものがあるかもしれないからです。
例えば、複素数のソートで絶対値または実数部のどちらかを使いたい場合がありえます。
これを実現するには、データ型として2つの演算子クラスを定義し、インデックスを作る時に適切なクラスを選択します。
演算子クラスについての詳細は、<xref linkend="indexes-opclass">と<xref linkend="xindex">を参照してください。
  </para>

  <para>
<!--
   For index methods that support ordered scans (currently, only B-tree),
   the optional clauses <literal>ASC</>, <literal>DESC</>, <literal>NULLS
   FIRST</>, and/or <literal>NULLS LAST</> can be specified to modify
   the sort ordering of the index.  Since an ordered index can be
   scanned either forward or backward, it is not normally useful to create a
   single-column <literal>DESC</> index &mdash; that sort ordering is already
   available with a regular index.  The value of these options is that
   multicolumn indexes can be created that match the sort ordering requested
   by a mixed-ordering query, such as <literal>SELECT ... ORDER BY x ASC, y
   DESC</>.  The <literal>NULLS</> options are useful if you need to support
   <quote>nulls sort low</> behavior, rather than the default <quote>nulls
   sort high</>, in queries that depend on indexes to avoid sorting steps.
-->
順序付きスキャンをサポートするインデックスメソッド（現時点ではB-Treeのみ）では、<literal>ASC</>、<literal>DESC</>、<literal>NULLS FIRST</>、<literal>NULLS LAST</>句(省略可能)をオプションで指定し、インデックスのソート順を変更することができます。
順序付きインデックスは正方向にも逆方向にもスキャンすることができますので、単一列に対する<literal>DESC</>インデックスは通常は有用ではありません。
このソート順序はすでに通常のインデックスを使用して実現できます。
これらのオプションの価値は、<literal>SELECT ... ORDER BY x ASC, y DESC</>などの順序指定が混在する問い合わせによって要求されるソート順に一致する、複数列に対するインデックスを作成できる点です。
<literal>NULLS</>オプションは、インデックスに基づいた問い合わせにおいてソート処理を省略するために<quote>NULLのソート順を低くする</>動作をサポートする必要がある場合に有用です。
デフォルトの動作は<quote>NULLのソート順を高くする</>です。
  </para>

  <para>
<!--
   For most index methods, the speed of creating an index is
   dependent on the setting of <xref linkend="guc-maintenance-work-mem">.
   Larger values will reduce the time needed for index creation, so long
   as you don't make it larger than the amount of memory really available,
   which would drive the machine into swapping.  For hash indexes, the
   value of <xref linkend="guc-effective-cache-size"> is also relevant to
   index creation time: <productname>PostgreSQL</productname> will use one
   of two different hash index creation methods depending on whether the
   estimated index size is more or less than <varname>effective_cache_size</>.
   For best results, make sure that this parameter is also set to something
   reflective of available memory, and be careful that the sum of
   <varname>maintenance_work_mem</> and <varname>effective_cache_size</> is
   less than the machine's RAM less whatever space is needed by other
   programs.
-->
ほとんどのインデックスメソッドにおいて、インデックス作成速度は<xref linkend="guc-maintenance-work-mem">の設定に依存します。
より大きな値を設定すると、インデックス作成に必要となる時間が短縮されます。
ただし、実際に使用できるメモリ量を超えるほど大きくすると、マシンがスワップ状態になり、遅くなります。
ハッシュインデックスでは、<xref linkend="guc-effective-cache-size">の値もインデックス作成時間に影響を与えます。
<productname>PostgreSQL</productname>は、推定インデックスサイズが<varname>effective_cache_size</>より大きいか小さいかによって、2つのハッシュインデックス作成方法のうち、どちらを使用するかを決めます。
最善の結果を得るために、このパラメータが利用可能なメモリを反映した値に設定されていることを確認してください。
また、<varname>maintenance_work_mem</>と<varname>effective_cache_size</>の和が、マシンのRAM容量から他のプログラムで必要とされる容量を差し引いた容量より小さくなるよう注意してください。
  </para>

  <para>
<!--
   Use <xref linkend="sql-dropindex">
   to remove an index.
-->
インデックスを削除するには、<xref linkend="sql-dropindex">を使用してください。
  </para>

  <para>
<!--
   Prior releases of <productname>PostgreSQL</productname> also had an
   R-tree index method.  This method has been removed because
   it had no significant advantages over the GiST method.
   If <literal>USING rtree</> is specified, <command>CREATE INDEX</>
   will interpret it as <literal>USING gist</>, to simplify conversion
   of old databases to GiST.
-->
以前の<productname>PostgreSQL</productname>にはR-treeインデックスメソッドがありました。
GiSTメソッドに比べて大きな利点がありませんでしたので、このメソッドは削除されました。
古いデータベースからGiSTへの変換を簡単にするため、<literal>USING rtree</>が指定された場合、<command>CREATE INDEX</>は<literal>USING gist</>と解釈します。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>Examples</title>
-->
  <title>例</title>

  <para>
<!--
   To create a B-tree index on the column <literal>title</literal> in
   the table <literal>films</literal>:
-->
テーブル<literal>films</literal>の列<literal>title</literal>にB-treeインデックスを作成します。
<programlisting>
CREATE UNIQUE INDEX title_idx ON films (title);
</programlisting>
  </para>

  <para>
<!--
   To create an index on the expression <literal>lower(title)</>,
   allowing efficient case-insensitive searches:
-->
大文字小文字を区別しない検索が効率的になるように、式<literal>lower(title)</>に対してインデックスを作成します。
<programlisting>
CREATE INDEX ON films ((lower(title)));
</programlisting>
<!--
   (In this example we have chosen to omit the index name, so the system
   will choose a name, typically <literal>films_lower_idx</>.)
-->
(この例では、インデックス名を省略することを選びました。
このためシステムが<literal>films_lower_idx</>などという名前を選ぶことになります。)
  </para>

  <para>
<!--
   To create an index with non-default collation:
-->
デフォルト以外の照合順序でインデックスを作成します。
<programlisting>
CREATE INDEX title_idx_german ON films (title COLLATE "de_DE");
</programlisting>
  </para>

  <para>
<!--
   To create an index with non-default sort ordering of nulls:
-->
デフォルトと異なるNULLのソート順を指定したインデックスを作成します。
<programlisting>
CREATE INDEX title_idx_nulls_low ON films (title NULLS FIRST);
</programlisting>
  </para>

  <para>
<!--
   To create an index with non-default fill factor:
-->
デフォルトと異なるフィルファクタを持つインデックスを作成します。
<programlisting>
CREATE UNIQUE INDEX title_idx ON films (title) WITH (fillfactor = 70);
</programlisting>
  </para>

  <para>
<!--
   To create a <acronym>GIN</> index with fast updates disabled:
-->
高速更新を無効にして<acronym>GIN</>インデックスを作成します。
<programlisting>
CREATE INDEX gin_idx ON documents_table USING gin (locations) WITH (fastupdate = off);
</programlisting>
  </para>

  <para>
<!--
   To create an index on the column <literal>code</> in the table
   <literal>films</> and have the index reside in the tablespace
   <literal>indexspace</>:
-->
テーブル<literal>films</>上の列<literal>code</>に対するインデックスを作成します。
また、このインデックスをテーブル空間<literal>indexspace</>内に生成します。
<programlisting>
CREATE INDEX code_idx ON films (code) TABLESPACE indexspace;
</programlisting>
  </para>

  <para>
<!--
   To create a GiST index on a point attribute so that we
   can efficiently use box operators on the result of the
   conversion function:
-->
変換関数の結果に対するbox操作を効率的に使用できるようにpoint属性にGiSTインデックスを作成します。
<programlisting>
CREATE INDEX pointloc
    ON points USING gist (box(location,location));
SELECT * FROM points
    WHERE box(location,location) &amp;&amp; '(0,0),(1,1)'::box;
</programlisting>
  </para>

  <para>
<!--
   To create an index without locking out writes to the table:
-->
対象テーブルへの書き込みをロックせずにインデックスを作成します。
<programlisting>
CREATE INDEX CONCURRENTLY sales_quantity_index ON sales_table (quantity);
</programlisting></para>

 </refsect1>

 <refsect1>
<!--
  <title>Compatibility</title>
-->
  <title>互換性</title>

  <para>
<!--
   <command>CREATE INDEX</command> is a
   <productname>PostgreSQL</productname> language extension.  There
   are no provisions for indexes in the SQL standard.
-->
<command>CREATE INDEX</command>は<productname>PostgreSQL</productname>の拡張です。
標準SQLにはインデックスについての規定はありません。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>See Also</title>
-->
  <title>関連項目</title>

  <simplelist type="inline">
   <member><xref linkend="sql-alterindex"></member>
   <member><xref linkend="sql-dropindex"></member>
  </simplelist>
 </refsect1>
</refentry>
