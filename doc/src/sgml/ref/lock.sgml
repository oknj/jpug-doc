<!--
doc/src/sgml/ref/lock.sgml
PostgreSQL documentation
-->

<refentry id="SQL-LOCK">
 <indexterm zone="sql-lock">
  <primary>LOCK</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>LOCK</refentrytitle>
  <manvolnum>7</manvolnum>
<!--
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 言語</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>LOCK</refname>
<!--
  <refpurpose>lock a table</refpurpose>
-->
  <refpurpose>テーブルをロックする</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
LOCK [ TABLE ] [ ONLY ] <replaceable class="PARAMETER">name</replaceable> [ * ] [, ...] [ IN <replaceable class="PARAMETER">lockmode</replaceable> MODE ] [ NOWAIT ]

<!--
<phrase>where <replaceable class="PARAMETER">lockmode</replaceable> is one of:</phrase>
-->
<phrase>ここで<replaceable class="PARAMETER">lockmode</replaceable>には以下のいずれかが入ります。</phrase>

    ACCESS SHARE | ROW SHARE | ROW EXCLUSIVE | SHARE UPDATE EXCLUSIVE
    | SHARE | SHARE ROW EXCLUSIVE | EXCLUSIVE | ACCESS EXCLUSIVE
</synopsis>
 </refsynopsisdiv>

 <refsect1>
<!--
  <title>Description</title>
-->
  <title>説明</title>

  <para>
<!--
   <command>LOCK TABLE</command> obtains a table-level lock, waiting
   if necessary for any conflicting locks to be released.  If
   <literal>NOWAIT</literal> is specified, <command>LOCK
   TABLE</command> does not wait to acquire the desired lock: if it
   cannot be acquired immediately, the command is aborted and an
   error is emitted.  Once obtained, the lock is held for the
   remainder of the current transaction.  (There is no <command>UNLOCK
   TABLE</command> command; locks are always released at transaction
   end.)
-->
<command>LOCK TABLE</command>はテーブルレベルのロックを取得します。必要であれば競合するロックが解除されるまで待機します。
<literal>NOWAIT</literal>が指定された場合は、対象のロックを取得できるまで待機せう、すぐにロックが取得できなければ、このコマンドを中止し、エラーを出力します。
ロックは、一度取得されると現行のトランザクションが完了するまで保持されます
（<command>UNLOCK TABLE</command>といったコマンドはありません。
ロックが解除されるのは常にトランザクションの終了時です）。
  </para>

  <para>
<!--
   When acquiring locks automatically for commands that reference
   tables, <productname>PostgreSQL</productname> always uses the least
   restrictive lock mode possible. <command>LOCK TABLE</command>
   provides for cases when you might need more restrictive locking.
   For example, suppose an application runs a transaction at the
   Read Committed isolation level and needs to ensure that data in a
   table remains stable for the duration of the transaction. To
   achieve this you could obtain <literal>SHARE</> lock mode over the
   table before querying. This will prevent concurrent data changes
   and ensure subsequent reads of the table see a stable view of
   committed data, because <literal>SHARE</> lock mode conflicts with
   the <literal>ROW EXCLUSIVE</> lock acquired by writers, and your
   <command>LOCK TABLE <replaceable
   class="PARAMETER">name</replaceable> IN SHARE MODE</command>
   statement will wait until any concurrent holders of <literal>ROW
   EXCLUSIVE</literal> mode locks commit or roll back. Thus, once you
   obtain the lock, there are no uncommitted writes outstanding;
   furthermore none can begin until you release the lock.
-->
テーブルを参照するコマンドのために自動的にロックを取得する場合、<productname>PostgreSQL</productname>は使用可能な一番弱いロックモードを常に使用します。
<command>LOCK TABLE</command>はより制限の強いロックが必要な場合のために用意されています。
例えば、隔離レベルREAD COMMITTEDでトランザクションを実行するアプリケーションで、トランザクションの間中、テーブルのデータを確実に安定させる必要がある場合を考えます。
この場合、問い合わせ実行前にテーブル全体に<literal>SHARE</>ロックモードを使用します。 
これにより、データが同時に変更されるのを防ぎ、それ以降のテーブルの読み取りは、コミット済みの安定したデータが見えるようになります。
なぜなら<literal>SHARE</>ロックモードは書き込み側が取得する<literal>ROW EXCLUSIVE</>ロックと競合するので、<command>LOCK TABLE <replaceable class="PARAMETER">name</replaceable> IN SHARE MODE</command>文は、<literal>ROW EXCLUSIVE</>を保持しているトランザクションがコミットまたはロールバックされるのを待つからです。 
したがって、一度ロックを取得してしまえば、コミットされていない状態の書き込みは存在しないことになります。さらに、ロックを解除するまで他のアプリケーションは書き込みを開始することができません。

  </para>

  <para>
<!--
   To achieve a similar effect when running a transaction at the
   <literal>REPEATABLE READ</> or <literal>SERIALIZABLE</>
   isolation level, you have to execute the <command>LOCK TABLE</> statement
   before executing any <command>SELECT</> or data modification statement.
   A <literal>REPEATABLE READ</> or <literal>SERIALIZABLE</> transaction's
   view of data will be frozen when its first
   <command>SELECT</> or data modification statement begins.  A <command>LOCK
   TABLE</> later in the transaction will still prevent concurrent writes
   &mdash; but it won't ensure that what the transaction reads corresponds to
   the latest committed values.
-->
<literal>REPEATABLE READ</>または<literal>SERIALIZABLE</>隔離レベルで実行しているトランザクションで同様の効果を得るには、全ての<command>SELECT</>文とデータを更新する文を実行する前に<command>LOCK TABLE</>文を実行する必要があります。  
<literal>REPEATABLE READ</>または<literal>SERIALIZABLE</>トランザクション側から参照するデータの状態は、最初に<command>SELECT</>文またはデータ更新用文が開始された時点で固定されます。
後からトランザクション内で<command>LOCK TABLE</>を実行した場合も同時書き込みを防ぐことはできますが、トランザクションの読み込み対象データの値がコミットされた最新の値であることは保証されません。
  </para>

  <para>
<!--
   If a transaction of this sort is going to change the data in the
   table, then it should use <literal>SHARE ROW EXCLUSIVE</> lock mode
   instead of <literal>SHARE</> mode.  This ensures that only one
   transaction of this type runs at a time.  Without this, a deadlock
   is possible: two transactions might both acquire <literal>SHARE</>
   mode, and then be unable to also acquire <literal>ROW EXCLUSIVE</>
   mode to actually perform their updates.  (Note that a transaction's
   own locks never conflict, so a transaction can acquire <literal>ROW
   EXCLUSIVE</> mode when it holds <literal>SHARE</> mode &mdash; but not
   if anyone else holds <literal>SHARE</> mode.)  To avoid deadlocks,
   make sure all transactions acquire locks on the same objects in the
   same order, and if multiple lock modes are involved for a single
   object, then transactions should always acquire the most
   restrictive mode first.
-->
このようなトランザクションでテーブルのデータを変更する場合は、<literal>SHARE</>モードではなく<literal>SHARE ROW EXCLUSIVE</>ロックモードを使用する必要があります。
これによって、この種のトランザクションが同時に複数実行されることがなくなります。
<literal>SHARE ROW EXCLUSIVE</>を使用しないと、デッドロックが発生する可能性があります。
2つのトランザクションの両方が、<literal>SHARE</>モードを取得していながら、実際の更新に必要な<literal>ROW EXCLUSIVE</>モードを取得できない状態になる可能性があるためです
（トランザクション自身が所有しているロック間は競合しないので、トランザクションは<literal>SHARE</>モードを保持している間も<literal>ROW EXCLUSIVE</>を獲得することができます。
しかし、他のトランザクションが<literal>SHARE</>モードを保持している時には<literal>ROW EXCLUSIVE</>を獲得することはできません）。
デッドロックを回避するには、全てのトランザクションが、必ず同一オブジェクトに対して同一の順番でロックを取得するようにしてください。
また、1つのオブジェクトに対して複数のロックモードを呼び出す場合、トランザクションは常に最も制限の強いモードを最初に取得するべきです。
  </para>

  <para>
<!--
   More information about the lock modes and locking strategies can be
   found in <xref linkend="explicit-locking">.
-->
ロックモードとロック取得方針についてのより詳細については<xref linkend="explicit-locking">を参照してください。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>Parameters</title>
-->
  <title>パラメータ</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="PARAMETER">name</replaceable></term>
    <listitem>
     <para>
<!--
      The name (optionally schema-qualified) of an existing table to
      lock. If <literal>ONLY</> is specified before the table name, only that
      table is locked. If <literal>ONLY</> is not specified, the table and all
      its descendant tables (if any) are locked.  Optionally, <literal>*</>
      can be specified after the table name to explicitly indicate that
      descendant tables are included.
-->
ロックする既存のテーブルの名前です（スキーマ修飾名も可）。
テーブル名の前に<literal>ONLY</>が指定された場合、そのテーブルのみをロックします。
<literal>ONLY</>が指定されない場合、そのテーブルとすべての子テーブル（もしあれば）をロックします。
オプションで、テーブル名の後に<literal>*</>を指定することで、明示的に継承するテーブルも含まれることを示すことができます。
     </para>

     <para>
<!--
      The command <literal>LOCK TABLE a, b;</> is equivalent to
      <literal>LOCK TABLE a; LOCK TABLE b;</>. The tables are locked
      one-by-one in the order specified in the <command>LOCK
      TABLE</command> command.
-->
<literal>LOCK a, b;</>というコマンドは<literal>LOCK TABLE a; LOCK TABLE b;</>と同じです。
テーブルは1つひとつ<command>LOCK</command>で指定された順番でロックされます。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">lockmode</replaceable></term>
    <listitem>
     <para>
<!--
      The lock mode specifies which locks this lock conflicts with.
      Lock modes are described in <xref linkend="explicit-locking">.
-->
ロックモードには、取得するロックと競合するロックを指定します。
ロックモードについては、<xref linkend="explicit-locking">で説明します。
     </para>

     <para>
<!--
      If no lock mode is specified, then <literal>ACCESS
      EXCLUSIVE</literal>, the most restrictive mode, is used.
-->
ロックモードを指定しない場合、最も制限が強い<literal>ACCESS EXCLUSIVE</literal>が使用されます。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>NOWAIT</literal></term>
    <listitem>
     <para>
<!--
      Specifies that <command>LOCK TABLE</command> should not wait for
      any conflicting locks to be released: if the specified lock(s)
      cannot be acquired immediately without waiting, the transaction
      is aborted.
-->
<command>LOCK TABLE</command>が競合するロックの解放まで待機しないことを指定します。
指定したロックがすぐに取得できない場合、トランザクションはアボートされます。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1>
<!--
  <title>Notes</title>
-->
  <title>注釈</title>

   <para>
<!--
    <literal>LOCK TABLE ... IN ACCESS SHARE MODE</> requires <literal>SELECT</>
    privileges on the target table.  All other forms of <command>LOCK</>
    require table-level <literal>UPDATE</>, <literal>DELETE</>, or
    <literal>TRUNCATE</> privileges.
-->
<literal>LOCK TABLE ... IN ACCESS SHARE MODE</>には、対象テーブルの<literal>SELECT</>権限が必要です。
他の形式の<command>LOCK</>には、テーブルレベルの<literal>UPDATE</>、<literal>DELETE</>あるいは<literal>TRUNCATE</>権限を持たなければなりません。
   </para>

   <para>
<!--
    <command>LOCK TABLE</> is useless outside a transaction block: the lock
    would remain held only to the completion of the statement.  Therefore
    <productname>PostgreSQL</productname> reports an error if <command>LOCK</>
    is used outside a transaction block.
    Use
    <xref linkend="sql-begin"> and
    <xref linkend="sql-commit">
    (or <xref linkend="sql-rollback">)
    to define a transaction block.
-->
<command>LOCK TABLE</>はトランザクションブロックの外側では意味がありません。
文が完了するまでしかロックは保持されません。
したがって<productname>PostgreSQL</productname>は<command>LOCK</>がトランザクションブロックの外側で使用された場合にエラーを報告します。
トランザクションブロックを定義するためには<xref linkend="sql-begin">および<xref linkend="sql-commit">（または<xref linkend="sql-rollback">）を使用してください。
   </para>

  <para>
<!--
   <command>LOCK TABLE</> only deals with table-level locks, and so
   the mode names involving <literal>ROW</> are all misnomers.  These
   mode names should generally be read as indicating the intention of
   the user to acquire row-level locks within the locked table.  Also,
   <literal>ROW EXCLUSIVE</> mode is a shareable table lock.  Keep in
   mind that all the lock modes have identical semantics so far as
   <command>LOCK TABLE</> is concerned, differing only in the rules
   about which modes conflict with which. For information on how to
   acquire an actual row-level lock, see <xref linkend="locking-rows">
   and the <xref linkend="sql-for-update-share"
   endterm="sql-for-update-share-title"> in the <command>SELECT</command>
   reference documentation.
-->
<command>LOCK</>が扱うのはテーブルレベルのロックのみです。
そのため、モード名に<literal>ROW</>が含まれるのは適切ではありません。
これらのモード名は、普通は、ロックされたテーブル内で行レベルのロックを取得する意図と解釈されるでしょう。
また、<literal>ROW EXCLUSIVE</>モードは共有可能なテーブルロックです。
<command>LOCK TABLE</>に関しては、全てのロックモードが同じ意味を持っており、違うのは、どのモードがどのモードと競合するかという規則だけであることに注意して下さい。
行レベルでのロックを獲得する方法については<command>SELECT</command>参照マニュアルの<xref linkend="locking-rows">と<xref linkend="sql-for-update-share" endterm="sql-for-update-share-title">を参照してください。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>Examples</title>
-->
  <title>例</title>


  <para>
<!--
   Obtain a <literal>SHARE</> lock on a primary key table when going to perform
   inserts into a foreign key table:
-->
外部キーテーブルへの挿入を行う際に、プライマリキーテーブルへの<literal>SHARE</>ロックを獲得します。

<programlisting>
BEGIN WORK;
LOCK TABLE films IN SHARE MODE;
SELECT id FROM films
    WHERE name = 'Star Wars: Episode I - The Phantom Menace';
<!--
&055;&055; Do ROLLBACK if record was not returned
-->
-- レコードがなければROLLBACKしてください。
INSERT INTO films_user_comments VALUES
    (_id_, 'GREAT! I was waiting for it for so long!');
COMMIT WORK;
</programlisting>
  </para>

  <para>
<!--
   Take a <literal>SHARE ROW EXCLUSIVE</> lock on a primary key table when going to perform
   a delete operation:
-->
削除操作を行う際にプライマリキーテーブルの<literal>SHARE ROW EXCLUSIVE</>ロックを取得します。

<programlisting>
BEGIN WORK;
LOCK TABLE films IN SHARE ROW EXCLUSIVE MODE;
DELETE FROM films_user_comments WHERE id IN
    (SELECT id FROM films WHERE rating &lt; 5);
DELETE FROM films WHERE rating &lt; 5;
COMMIT WORK;
</programlisting></para>
 </refsect1>

 <refsect1>
<!--
  <title>Compatibility</title>
-->
  <title>互換性</title>

  <para>
<!--
   There is no <command>LOCK TABLE</command> in the SQL standard,
   which instead uses <command>SET TRANSACTION</command> to specify
   concurrency levels on transactions.  <productname>PostgreSQL</productname> supports that too;
   see <xref linkend="SQL-SET-TRANSACTION"> for details.
-->
標準SQLには<command>LOCK TABLE</command>はありません。
その代わりにトランザクションの同時性レベルを指定する<command>SET TRANSACTION</command>が使用されます。
<productname>PostgreSQL</productname>はこのコマンドもサポートしています。
詳細は<xref linkend="SQL-SET-TRANSACTION">を参照してください。
  </para>

  <para>
<!--
   Except for <literal>ACCESS SHARE</>, <literal>ACCESS EXCLUSIVE</>,
   and <literal>SHARE UPDATE EXCLUSIVE</> lock modes, the
   <productname>PostgreSQL</productname> lock modes and the
   <command>LOCK TABLE</command> syntax are compatible with those
   present in <productname>Oracle</productname>.
-->
<literal>ACCESS SHARE</>、<literal>ACCESS EXCLUSIVE</>、<literal>SHARE UPDATE EXCLUSIVE</>ロックモードを除き、<productname>PostgreSQL</productname>のロックモードと<command>LOCK TABLE</command>構文は<productname>Oracle</productname>のものと互換性があります。
  </para>
 </refsect1>
</refentry>
