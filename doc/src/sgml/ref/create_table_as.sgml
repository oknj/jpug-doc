<!--
doc/src/sgml/ref/create_table_as.sgml
PostgreSQL documentation
-->

<refentry id="SQL-CREATETABLEAS">
 <indexterm zone="sql-createtableas">
  <primary>CREATE TABLE AS</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>CREATE TABLE AS</refentrytitle>
  <manvolnum>7</manvolnum>
<!--
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
<refmiscinfo>SQL - 言語</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE TABLE AS</refname>
<!--
  <refpurpose>define a new table from the results of a query</refpurpose>
-->
<refpurpose>問い合わせの結果によって新しいテーブルを定義する</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
CREATE [ [ GLOBAL | LOCAL ] { TEMPORARY | TEMP } | UNLOGGED ] TABLE <replaceable>table_name</replaceable>
    [ (<replaceable>column_name</replaceable> [, ...] ) ]
    [ WITH ( <replaceable class="PARAMETER">storage_parameter</replaceable> [= <replaceable class="PARAMETER">value</replaceable>] [, ... ] ) | WITH OIDS | WITHOUT OIDS ]
    [ ON COMMIT { PRESERVE ROWS | DELETE ROWS | DROP } ]
    [ TABLESPACE <replaceable class="PARAMETER">tablespace_name</replaceable> ]
    AS <replaceable>query</replaceable>
    [ WITH [ NO ] DATA ]
</synopsis>
 </refsynopsisdiv>

 <refsect1>
<!--
  <title>Description</title>
-->
  <title>説明</title>

  <para>
<!--
   <command>CREATE TABLE AS</command> creates a table and fills it
   with data computed by a <command>SELECT</command> command.
   The table columns have the
   names and data types associated with the output columns of the
   <command>SELECT</command> (except that you can override the column
   names by giving an explicit list of new column names).
-->
<command>CREATE TABLE AS</command>はテーブルを作成し、<command>SELECT</command> コマンドによって算出されたデータをそのテーブルに格納します。
テーブルの列は、<command>SELECT</command>の出力列に結び付いた名前とデータ型を持ちます（ただし、新しい列名を明示したリストを渡すと、この列名を上書きすることができます）。
  </para>

  <para>
<!--
   <command>CREATE TABLE AS</command> bears some resemblance to
   creating a view, but it is really quite different: it creates a new
   table and evaluates the query just once to fill the new table
   initially.  The new table will not track subsequent changes to the
   source tables of the query.  In contrast, a view re-evaluates its
   defining <command>SELECT</command> statement whenever it is
   queried.
-->
<command>CREATE TABLE AS</command>はビューの作成と似ていますが、実際にはまったく異なります。
<command>CREATE TABLE AS</command>は新しいテーブルを作成し、新しいテーブルの内容を初期化するために一度だけ問い合わせを評価します。
それ以降に行われた、問い合わせの元テーブルに対する変更は、新しいテーブルには反映されません。
反対に、ビューは問い合わせの度に定義された<command>SELECT</command>文を再評価します。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>Parameters</title>
-->
  <title>パラメータ</title>

  <variablelist>
   <varlistentry>
<!--
    <term><literal>GLOBAL</literal> or <literal>LOCAL</literal></term>
-->
    <term><literal>GLOBAL</literal>または<literal>LOCAL</literal></term>
    <listitem>
     <para>
<!--
      Ignored for compatibility.  Use of these keywords is deprecated;
      refer to <xref linkend="sql-createtable"> for details.
-->
互換性を保持するためのキーワードで、無視されます。
これらのキーワードの使用は廃止予定です。
詳細については<xref linkend="sql-createtable">を参照してください。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <variablelist>
   <varlistentry>
<!--
    <term><literal>TEMPORARY</> or <literal>TEMP</></term>
-->
    <term><literal>TEMPORARY</>または<literal>TEMP</></term>
    <listitem>
     <para>
<!--
      If specified, the table is created as a temporary table.
      Refer to <xref linkend="sql-createtable"> for details.
-->
指定された場合、テーブルは一時テーブルとして作成されます。
詳細については<xref linkend="sql-createtable">を参照してください。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>UNLOGGED</></term>
    <listitem>
     <para>
<!--
      If specified, the table is created as an unlogged table.
      Refer to <xref linkend="sql-createtable"> for details.
-->
指定された場合、テーブルはログを取らないテーブルとして作成されます。
詳細については<xref linkend="sql-createtable">を参照してください。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable>table_name</replaceable></term>
    <listitem>
     <para>
<!--
      The name (optionally schema-qualified) of the table to be created.
-->
作成するテーブルの名前です（スキーマ修飾名も可）。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable>column_name</replaceable></term>
    <listitem>
     <para>
<!--
      The name of a column in the new table.  If column names are not
      provided, they are taken from the output column names of the query.
-->
新しいテーブルにおける列の名前です。
列名を指定しない場合は、問い合わせの出力列名を利用します。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>WITH ( <replaceable class="PARAMETER">storage_parameter</replaceable> [= <replaceable class="PARAMETER">value</replaceable>] [, ... ] )</literal></term>
    <listitem>
     <para>
<!--
      This clause specifies optional storage parameters for the new table;
      see <xref linkend="sql-createtable-storage-parameters"
      endterm="sql-createtable-storage-parameters-title"> for more
      information.  The <literal>WITH</> clause
      can also include <literal>OIDS=TRUE</> (or just <literal>OIDS</>)
      to specify that rows of the new table
      should have OIDs (object identifiers) assigned to them, or
      <literal>OIDS=FALSE</> to specify that the rows should not have OIDs.
      See <xref linkend="sql-createtable"> for more information.
-->
この句は、新しいテーブル用の格納パラメータ(省略可能)を指定します。
詳細は<xref linkend="sql-createtable-storage-parameters" endterm="sql-createtable-storage-parameters-title">を参照してください。
<literal>WITH</>には、<literal>OIDS=TRUE</>（もしくは単なる<literal>OIDS</>）を含めて、新しいテーブルの行が行に割り当てられたOID（オブジェクト識別子）を持たなければならないことを指定することもできます。
また、<literal>OIDS=FALSE</>を含めて、OIDを持たないことを指定することもできます。
詳細は<xref linkend="sql-createtable">を参照してください。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>WITH OIDS</></term>
    <term><literal>WITHOUT OIDS</></term>
    <listitem>
     <para>
<!--
      These are obsolescent syntaxes equivalent to <literal>WITH (OIDS)</>
      and <literal>WITH (OIDS=FALSE)</>, respectively.  If you wish to give
      both an <literal>OIDS</> setting and storage parameters, you must use
      the <literal>WITH ( ... )</> syntax; see above.
-->
これらは古い構文で、それぞれ<literal>WITH (OIDS)</>と<literal>WITH (OIDS=FALSE)</>と同じです。
<literal>OIDS</>と格納パラメータの設定の両方を指定したい場合、上記の<literal>WITH ( ... )</>構文を使用しなければなりません。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>ON COMMIT</literal></term>
    <listitem>
     <para>
<!--
      The behavior of temporary tables at the end of a transaction
      block can be controlled using <literal>ON COMMIT</literal>.
      The three options are:
-->
トランザクションブロックの終了時の一時テーブルの動作を<literal>ON COMMIT</literal>を使用して制御することができます。
以下の3つのオプションがあります。

      <variablelist>
       <varlistentry>
        <term><literal>PRESERVE ROWS</literal></term>
        <listitem>
         <para>
<!--
          No special action is taken at the ends of transactions.
          This is the default behavior.
-->
トランザクションの終了時に特別な処理は何も行われません。
これがデフォルトの動作です。
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>DELETE ROWS</literal></term>
        <listitem>
         <para>
<!--
          All rows in the temporary table will be deleted at the end
          of each transaction block.  Essentially, an automatic <xref
          linkend="sql-truncate"> is done
          at each commit.
-->
各トランザクションブロックの終了時に、一時テーブルのすべての行が削除されます。
本質的には、コミット毎に自動的に<xref linkend="sql-truncate">が行われます。
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>DROP</literal></term>
        <listitem>
         <para>
<!--
          The temporary table will be dropped at the end of the current
          transaction block.
-->
現在のトランザクションブロックの終了時に一時テーブルは削除されます。
         </para>
        </listitem>
       </varlistentry>
      </variablelist></para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>TABLESPACE <replaceable class="PARAMETER">tablespace_name</replaceable></literal></term>
    <listitem>
     <para>
<!--
      The <replaceable class="PARAMETER">tablespace_name</replaceable> is the name
      of the tablespace in which the new table is to be created.
      If not specified,
      <xref linkend="guc-default-tablespace"> is consulted, or
      <xref linkend="guc-temp-tablespaces"> if the table is temporary.
-->
<replaceable class="PARAMETER">tablespace_name</replaceable>は、新しいテーブルの作成先となるテーブル空間名です。
指定がなければ、<xref linkend="guc-default-tablespace">、一時テーブルの場合は<xref linkend="guc-temp-tablespaces">が考慮されます。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable>query</replaceable></term>
    <listitem>
     <para>
<!--
      A <xref linkend="sql-select">, <link
      linkend="sql-table">TABLE</link>, or <xref linkend="sql-values">
      command, or an <xref linkend="sql-execute"> command that runs a
      prepared <command>SELECT</>, <command>TABLE</>, or
      <command>VALUES</> query.
-->
<xref linkend="sql-select">、<link linkend="sql-table">TABLE</link>、<xref linkend="sql-values">コマンドまたは、あらかじめ準備された<command>SELECT</>、<command>TABLE</>または<command>VALUES</>問い合わせを実行する<xref linkend="sql-execute">コマンドです。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>WITH [ NO ] DATA</></term>
    <listitem>
     <para>
<!--
      This clause specifies whether or not the data produced by the query
      should be copied into the new table.  If not, only the table structure
      is copied.  The default is to copy the data.
-->
この句は問い合わせで生成されるデータを新しいテーブルにコピーすべきかどうかを指定します。
コピーしない場合はテーブル構造のみがコピーされます。
デフォルトではデータをコピーします。
     </para>
    </listitem>
   </varlistentry>

  </variablelist>
 </refsect1>

 <refsect1>
<!--
  <title>Notes</title>
-->
  <title>注釈</title>

  <para>
<!--
   This command is functionally similar to <xref
   linkend="sql-selectinto">, but it is
   preferred since it is less likely to be confused with other uses of
   the <command>SELECT INTO</> syntax. Furthermore, <command>CREATE
   TABLE AS</command> offers a superset of the functionality offered
   by <command>SELECT INTO</command>.
-->
このコマンドは、<xref linkend="sql-selectinto">と同等の機能を持ちますが、<command>SELECT INTO</command>構文の他の使用方法と混乱する可能性が少ないため、こちらを使用する方が良いでしょう。
さらに、<command>CREATE TABLE AS</command>は、<command>SELECT INTO</command>が提供する機能のスーパーセットを提供します。
  </para>

  <para>
<!--
   The <command>CREATE TABLE AS</command> command allows the user to
   explicitly specify whether OIDs should be included. If the
   presence of OIDs is not explicitly specified,
   the <xref linkend="guc-default-with-oids"> configuration variable is
   used.
-->
<command>CREATE TABLE AS</command>コマンドでは、OIDを含めるかどうかを明示的に指定できます。
OIDの有無を明示していない場合、設定変数<xref linkend="guc-default-with-oids">が使用されます。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>Examples</title>
-->
  <title>例</title>

  <para>
<!--
   Create a new table <literal>films_recent</literal> consisting of only
   recent entries from the table <literal>films</literal>:
-->
<literal>films</literal>の最近の項目のみから構成される、新しいテーブル<literal>films_recent</literal>を作成します。

<programlisting>
CREATE TABLE films_recent AS
  SELECT * FROM films WHERE date_prod &gt;= '2002-01-01';
</programlisting>
  </para>

  <para>
<!--
   To copy a table completely, the short form using
   the <literal>TABLE</literal> command can also be used:
-->
テーブルを完全に複製するために、<literal>TABLE</literal>コマンドを使った短縮形も使用することができます。

<programlisting>
CREATE TABLE films2 AS
  TABLE films;
</programlisting>
  </para>

  <para>
<!--
   Create a new temporary table <literal>films_recent</literal>, consisting of
   only recent entries from the table <literal>films</literal>, using a
   prepared statement.  The new table has OIDs and will be dropped at commit:
-->
プリペアド文を使用して、<literal>films</literal>内の最近の項目のみから構成される一時テーブル<literal>films_recent</literal>を作成します。
この新しいテーブルはOIDを持ち、コミット時に削除されます。

<programlisting>
PREPARE recentfilms(date) AS
  SELECT * FROM films WHERE date_prod &gt; $1;
CREATE TEMP TABLE films_recent WITH (OIDS) ON COMMIT DROP AS
  EXECUTE recentfilms('2002-01-01');
</programlisting></para>
 </refsect1>

 <refsect1>
<!--
  <title>Compatibility</title>
-->
<title>互換性</title>

  <para>
<!--
   <command>CREATE TABLE AS</command> conforms to the <acronym>SQL</acronym>
   standard.  The following are nonstandard extensions:
-->
<command>CREATE TABLE AS</command>は標準<acronym>SQL</acronym>に従います。
以下は非標準の拡張です。

   <itemizedlist spacing="compact">
    <listitem>
     <para>
<!--
      The standard requires parentheses around the subquery clause; in
      <productname>PostgreSQL</productname>, these parentheses are
      optional.
-->
標準では副問い合わせ句を括弧で囲む必要がありますが、<productname>PostgreSQL</>ではこの括弧は省略可能です。
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      In the standard, the <literal>WITH [ NO ] DATA</literal> clause
      is required; in PostgreSQL it is optional.
-->
標準では<literal>WITH [ NO ] DATA</literal>句は必須ですが、PostgreSQLでは省略可能です。
     </para>
    </listitem>

    <listitem>
<!--
     <para><productname>PostgreSQL</> handles temporary tables in a way
      rather different from the standard; see
      <xref linkend="sql-createtable">
      for details.
-->
<para><productname>PostgreSQL</>の一時テーブルの扱いは標準とは異なります。
詳細は<xref linkend="sql-createtable">を参照してください。
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      The <literal>WITH</> clause is a <productname>PostgreSQL</productname>
      extension; neither storage parameters nor OIDs are in the standard.
-->
<literal>WITH</>句は<productname>PostgreSQL</productname>の拡張です。
格納パラメータもOIDも標準にはありません。
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      The <productname>PostgreSQL</productname> concept of tablespaces is not
      part of the standard.  Hence, the clause <literal>TABLESPACE</literal>
      is an extension.
-->
<productname>PostgreSQL</productname>のテーブル空間という概念は標準にはありません。
したがって、<literal>TABLESPACE</literal>句は拡張です。
     </para>
    </listitem>
   </itemizedlist></para>
 </refsect1>

 <refsect1>
<!--
  <title>See Also</title>
-->
  <title>関連項目</title>

  <simplelist type="inline">
   <member><xref linkend="sql-creatematerializedview"></member>
   <member><xref linkend="sql-createtable"></member>
   <member><xref linkend="sql-execute"></member>
   <member><xref linkend="sql-select"></member>
   <member><xref linkend="sql-selectinto"></member>
   <member><xref linkend="sql-values"></member>
  </simplelist>
 </refsect1>

</refentry>
