<!-- doc/src/sgml/client-auth.sgml -->

<chapter id="client-authentication">
<!--
 <title>Client Authentication</title>
-->
 <title>クライアント認証</title>

 <indexterm zone="client-authentication">
<!--
  <primary>client authentication</primary>
-->
  <primary>クライアント認証</primary>
 </indexterm>

 <para>
<!--
  When a client application connects to the database server, it
  specifies which <productname>PostgreSQL</productname> database user name it
  wants to connect as, much the same way one logs into a Unix computer
  as a particular user. Within the SQL environment the active database
  user name determines access privileges to database objects &mdash; see
  <xref linkend="user-manag"> for more information. Therefore, it is
  essential to restrict which database users can connect.
-->
クライアントアプリケーションがデータベースサーバに接続する時、Unixコンピュータに特定のユーザとしてログインする時と同じように、どの<productname>PostgreSQL</productname>ユーザ名で接続するかを指定します。 
SQL 環境の中では存在するユーザ名でデータベースオブジェクトへのアクセス権限が決まります。
詳しい情報は<xref linkend="user-manag">を参照してください。 
ですから、どのデータベースユーザがデータベースに接続できるかを制限することが基本となります。
 </para>

 <note>
  <para>
<!--
   As explained in <xref linkend="user-manag">,
   <productname>PostgreSQL</productname> actually does privilege
   management in terms of <quote>roles</>.  In this chapter, we
   consistently use <firstterm>database user</> to mean <quote>role with the
   <literal>LOGIN</> privilege</quote>.
-->
<xref linkend="user-manag">で説明されていますが、実は<productname>PostgreSQL</productname>は<quote>ロール</>によって権限の管理を行っています。
この章では一貫して<firstterm>データベースユーザ</>という呼び方を<quote><literal>ログイン</>権限を持つロール</quote>として使用します。
  </para>
 </note>

 <para>
<!--
  <firstterm>Authentication</firstterm> is the process by which the
  database server establishes the identity of the client, and by
  extension determines whether the client application (or the user
  who runs the client application) is permitted to connect with the
  database user name that was requested.
-->
<firstterm>認証</firstterm>はデータベースサーバがクライアントの身元を識別し、その延長としてクライアントアプリケーション（もしくはクライアントアプリケーションを実行するユーザ）が要求されたデータベースユーザ名で接続することができるかどうかを決定する手順です。
 </para>

 <para>
<!--
  <productname>PostgreSQL</productname> offers a number of different
  client authentication methods. The method used to authenticate a
  particular client connection can be selected on the basis of
  (client) host address, database, and user.
-->
<productname>PostgreSQL</productname>は異なったクライアント認証方法を複数提供します。
特定のクライアント接続の認証に使用する方法は、（クライアントの）ホストアドレス、データベース、およびユーザに従って選択できます。
 </para>

 <para>
<!--
  <productname>PostgreSQL</productname> database user names are logically
  separate from user names of the operating system in which the server
  runs. If all the users of a particular server also have accounts on
  the server's machine, it makes sense to assign database user names
  that match their operating system user names. However, a server that
  accepts remote connections might have many database users who have no local
  operating system
  account, and in such cases there need be no connection between
  database user names and OS user names.
-->
<productname>PostgreSQL</productname>データベースユーザ名は稼働しているサーバのオペレーティングシステムのユーザ名とは論理的に分かれています。
もし特定のサーバの全てのユーザがサーバマシン上にもアカウントを持っている場合、そのオペレーティングシステムのユーザ名に一致するデータベースユーザ名を割り当てることは理にかなっています。
しかし、リモート接続を受け付けるサーバは、ローカルなオペレーティングシステムのアカウントを持たないデータベースユーザを多く持っている場合もあります。
そのような時にはデータベースユーザ名とOSのユーザ名との間の関連性は必要ありません。
 </para>

 <sect1 id="auth-pg-hba-conf">
<!--
  <title>The <filename>pg_hba.conf</filename> File</title>
-->
  <title><filename>pg_hba.conf</filename>ファイル</title>

  <indexterm zone="auth-pg-hba-conf">
   <primary>pg_hba.conf</primary>
  </indexterm>

  <para>
<!--
   Client authentication is controlled by a configuration file,
   which traditionally is named
   <filename>pg_hba.conf</filename> and is stored in the database
   cluster's data directory.
   (<acronym>HBA</> stands for host-based authentication.) A default
   <filename>pg_hba.conf</filename> file is installed when the data
   directory is initialized by <command>initdb</command>.  It is
   possible to place the authentication configuration file elsewhere,
   however; see the <xref linkend="guc-hba-file"> configuration parameter.
-->
クライアント認証はデータベースクラスタのデータディレクトリ内の、伝統的に<filename>pg_hba.conf</filename>という名前の設定ファイルで管理されています
（<acronym>HBA</>とは、host-based authentication: ホストベース認証の略です）。
デフォルトの<filename>pg_hba.conf</filename>ファイルは、データディレクトリが<command>initdb</command>で初期化される時にインストールされます。
しかし、この認証設定ファイルを他の場所に設置することができます。
<xref linkend="guc-hba-file">設定パラメータを参照してください。
  </para>

  <para>
<!--
   The general format of the <filename>pg_hba.conf</filename> file is
   a set of records, one per line. Blank lines are ignored, as is any
   text after the <literal>#</literal> comment character.
   Records cannot be continued across lines.
   A record is made
   up of a number of fields which are separated by spaces and/or tabs.
   Fields can contain white space if the field value is double-quoted.
   Quoting one of the keywords in a database, user, or address field (e.g.,
   <literal>all</> or <literal>replication</>) makes the word lose its special
   meaning, and just match a database, user, or host with that name.
-->
<filename>pg_hba.conf</filename>ファイルの一般的な書式は、1行につき1つのレコードというレコードの集合です。
空行はコメント用の<literal>#</literal>文字以降の文字と同じく無視されます。 
レコードは行をまたいで続けることはできません。
レコードはスペースもしくはタブ、もしくはその両方で区切られた、複数のフィールドで構成されています。 
フィールドには、フィールド値が二重引用符付きの場合空白文字を含むことができます。 
データベース、ユーザもしくはアドレスフィールド内のキーワード(例：<literal>all</>または<literal>replication</>)の一つを引用するとその特別な意味が失われ、その名称のデータベース、ユーザもしくはホストと一致するようになります。
  </para>

  <para>
<!--
   Each record specifies a connection type, a client IP address range
   (if relevant for the connection type), a database name, a user name,
   and the authentication method to be used for connections matching
   these parameters. The first record with a matching connection type,
   client address, requested database, and user name is used to perform
   authentication. There is no <quote>fall-through</> or
   <quote>backup</>: if one record is chosen and the authentication
   fails, subsequent records are not considered. If no record matches,
   access is denied.
-->
それぞれのレコードは接続形式、（接続形式に対して意味を持つのであれば）クライアントのIPアドレス範囲、データベースの名前、ユーザ名およびこれらのパラメータに一致する接続で使用される認証方法を指定します。 
接続形式、クライアントアドレス、要求されたデータベース、およびユーザ名に一致する最初のレコードが認証処理に使用されます。
<quote>失敗時の継続</>や、 あるいは<quote>バックアップ</>はありません。 
これは、もしあるレコードが選択されて認証に失敗した場合、後続のレコードは考慮されないということです。 
どのレコードも一致しない時はアクセスが拒否されます。
  </para>

  <para>
<!--
   A record can have one of the seven formats
-->
レコードは7つの書式のうちの1つの形式を取ります。
<synopsis>
local      <replaceable>database</replaceable>  <replaceable>user</replaceable>  <replaceable>auth-method</replaceable>  <optional><replaceable>auth-options</replaceable></optional>
host       <replaceable>database</replaceable>  <replaceable>user</replaceable>  <replaceable>address</replaceable>  <replaceable>auth-method</replaceable>  <optional><replaceable>auth-options</replaceable></optional>
hostssl    <replaceable>database</replaceable>  <replaceable>user</replaceable>  <replaceable>address</replaceable>  <replaceable>auth-method</replaceable>  <optional><replaceable>auth-options</replaceable></optional>
hostnossl  <replaceable>database</replaceable>  <replaceable>user</replaceable>  <replaceable>address</replaceable>  <replaceable>auth-method</replaceable>  <optional><replaceable>auth-options</replaceable></optional>
host       <replaceable>database</replaceable>  <replaceable>user</replaceable>  <replaceable>IP-address</replaceable>  <replaceable>IP-mask</replaceable>  <replaceable>auth-method</replaceable>  <optional><replaceable>auth-options</replaceable></optional>
hostssl    <replaceable>database</replaceable>  <replaceable>user</replaceable>  <replaceable>IP-address</replaceable>  <replaceable>IP-mask</replaceable>  <replaceable>auth-method</replaceable>  <optional><replaceable>auth-options</replaceable></optional>
hostnossl  <replaceable>database</replaceable>  <replaceable>user</replaceable>  <replaceable>IP-address</replaceable>  <replaceable>IP-mask</replaceable>  <replaceable>auth-method</replaceable>  <optional><replaceable>auth-options</replaceable></optional>
</synopsis>
<!--
   The meaning of the fields is as follows:
-->
フィールドの意味は以下のようになっています。

   <variablelist>
    <varlistentry>
     <term><literal>local</literal></term>
     <listitem>
      <para>
<!--
       This record matches connection attempts using Unix-domain
       sockets.  Without a record of this type, Unix-domain socket
       connections are disallowed.
-->
このレコードはUnixドメインソケットを使用する接続に対応します。  
この種類のレコードを使用しないと、Unixドメインソケット経由の接続は拒否されます。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>host</literal></term>
     <listitem>
      <para>
<!--
       This record matches connection attempts made using TCP/IP.
       <literal>host</literal> records match either
       <acronym>SSL</acronym> or non-<acronym>SSL</acronym> connection
       attempts.
-->
このレコードは、TCP/IPを使用した接続に対応します。
<literal>host</literal>レコードは、<acronym>SSL</acronym>もしくは非<acronym>SSL</acronym>接続のいずれかに対応します。
      </para>
     <note>
      <para>
<!--
       Remote TCP/IP connections will not be possible unless
       the server is started with an appropriate value for the
       <xref linkend="guc-listen-addresses"> configuration parameter,
       since the default behavior is to listen for TCP/IP connections
       only on the local loopback address <literal>localhost</>.
-->
サーバのデフォルトの動作は、ローカルループバックアドレスである<literal>localhost</>のみTCP/IP接続を監視しています。
よってサーバにおいて<xref linkend="guc-listen-addresses">パラメータが適切な値に設定された状態で起動されていない限り、リモートのTCP/IP接続はできません。
      </para>
     </note>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>hostssl</literal></term>
     <listitem>
      <para>
<!--
       This record matches connection attempts made using TCP/IP,
       but only when the connection is made with <acronym>SSL</acronym>
       encryption.
-->
このレコードは、接続が<acronym>SSL</acronym>で暗号化されている場合にのみTCP/IPネットワークを使用する接続に対応します。
      </para>

      <para>
<!--
       To make use of this option the server must be built with
       <acronym>SSL</acronym> support. Furthermore,
       <acronym>SSL</acronym> must be enabled at server start time
       by setting the <xref linkend="guc-ssl"> configuration parameter (see
       <xref linkend="ssl-tcp"> for more information).
-->
このオプションを使用するためには、サーバは<acronym>SSL</acronym>サポートができるように構築されていなければいけません。 
また、 <acronym>SSL</acronym>は<xref linkend="guc-ssl">パラメータを設定することによりサーバの起動時に有効になっていなくてはなりません（詳細は<xref linkend="ssl-tcp">を参照してください）。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><literal>hostnossl</literal></term>
     <listitem>
      <para>
<!--
       This record type has the opposite behavior of <literal>hostssl</>;
       it only matches connection attempts made over
       TCP/IP that do not use <acronym>SSL</acronym>.
-->
このレコードは、<literal>hostssl</>と反対の動作で、<acronym>SSL</acronym>を使用していないTCP/IPの接続のみに対応します。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable>database</replaceable></term>
     <listitem>
      <para>
<!--
       Specifies which database name(s) this record matches.  The value
       <literal>all</literal> specifies that it matches all databases.
       The value <literal>sameuser</> specifies that the record
       matches if the requested database has the same name as the
       requested user.  The value <literal>samerole</> specifies that
       the requested user must be a member of the role with the same
       name as the requested database.  (<literal>samegroup</> is an
       obsolete but still accepted spelling of <literal>samerole</>.)
       Superusers are not considered to be members of a role for the
       purposes of <literal>samerole</> unless they are explicitly
       members of the role, directly or indirectly, and not just by
       virtue of being a superuser.
       The value <literal>replication</> specifies that the record
       matches if a replication connection is requested (note that
       replication connections do not specify any particular database).
       Otherwise, this is the name of
       a specific <productname>PostgreSQL</productname> database.
       Multiple database names can be supplied by separating them with
       commas.  A separate file containing database names can be specified by
       preceding the file name with <literal>@</>.
-->
このレコードで対応するデータベース名を指定します。  
<literal>all</literal> という値は、全てのデータベースと対応することを指定します。 
<literal>sameuser</>という値は、要求されたデータベースが要求ユーザと同じ名前を持つ場合にレコードが対応することを指定します。  
<literal>samerole</>という値は、要求ユーザが要求されたデータベースと同じ名前のロールのメンバでなければならないことを指定します。  
（以前は<literal>samegroup</>と書いていましたが、<literal>samerole</>と記述してください）
スーパーユーザは、直接的であれ間接的であれ、明示的にsameroleのメンバでない限りsameroleのメンバとはみなされません。
また、スーパーユーザであるからといって<literal>samerole</>のメンバとはみなされません。
<literal>replication</>の値は、もしレプリケーション接続が要求された場合（レプリケーション接続は特定のデータベースを指定しないことに注意して下さい）にレコードが一致することを指定します。
それ以外の場合には、特定の<productname>PostgreSQL</productname>データベースの名前になります。 
データベースの名前はカンマで区切ることで複数指定できます。  
データベース名を含む別のファイルを、そのファイル名の前に<literal>@</>を付けることで指定できます。 
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable>user</replaceable></term>
     <listitem>
      <para>
<!--
       Specifies which database user name(s) this record
       matches. The value <literal>all</literal> specifies that it
       matches all users.  Otherwise, this is either the name of a specific
       database user, or a group name preceded by <literal>+</>.
       (Recall that there is no real distinction between users and groups
       in <productname>PostgreSQL</>; a <literal>+</> mark really means
       <quote>match any of the roles that are directly or indirectly members
       of this role</>, while a name without a <literal>+</> mark matches
       only that specific role.) For this purpose, a superuser is only
       considered to be a member of a role if they are explicitly a member
       of the role, directly or indirectly, and not just by virtue of
       being a superuser.
       Multiple user names can be supplied by separating them with commas.
       A separate file containing user names can be specified by preceding the
       file name with <literal>@</>.
-->
このレコードで対応するデータベースユーザを指定します。 
<literal>all</literal>という値は、全てのユーザが対応することを指定します。 
それ以外の場合には特定のデータベースユーザの名前もしくは<literal>+</>で始まるグループ名のどちらかになります。 
（<productname>PostgreSQL</>ではユーザとグループの明確な区別がないことを思い出してください。
<literal>+</>のマークは、<quote>このロールの直接的もしくは間接的なメンバのどちらかに一致していること</>を意味しています。
一方、<literal>+</>のマークのない名前は特定のロールにのみ一致します）
このため、スーパーユーザは、直接的であれ間接的であれ明示的にロールのメンバである場合にのみ、ロールのメンバとみなされます。
スーパーユーザであるからといってロールのメンバとはみなされません。
ユーザ名は、カンマで区切ることで複数指定できます。
ユーザ名を含む別のファイルを、そのファイル名の前に<literal>@</>を付けることで指定できます。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable>address</replaceable></term>
     <listitem>
      <para>
<!--
       Specifies the client machine addresses that this record
       matches.  This field can contain either a host name, an IP
       address range, or one of the special key words mentioned below.
-->
このレコードに対応しているクライアントマシンのアドレス。
このフィールドはホスト名、IPアドレスの範囲、もしくは下記の特別なキーワードの1つを含んでいます。
      </para>

      <para>
<!--
       An IP address is specified in standard dotted decimal
       notation with a <acronym>CIDR</> mask length.  The mask
       length indicates the number of high-order bits of the client
       IP address that must match.  Bits to the right of this should
       be zero in the given IP address.
       There must not be any white space between the IP address, the
       <literal>/</literal>, and the CIDR mask length.
-->
このIPアドレスは、<acronym>CIDR</>マスクの長さを含んだ標準のドット区切り10進表記で指定されます。
CIDRマスク長とは、クライアントIPアドレスが一致しなければならない、高位のビット数を表すものです。
指定するIPアドレスのこれより右側のビットには、0を指定しなければなりません。
IPアドレスと<literal>/</literal>、およびCIDRマスク長の間には空白を入れてはいけません。
      </para>

      <para>
<!--
       Typical examples of an IP address range specified this way are
       <literal>172.20.143.89/32</literal> for a single host, or
       <literal>172.20.143.0/24</literal> for a small network, or
       <literal>10.6.0.0/16</literal> for a larger one.
       <literal>0.0.0.0/0</literal> represents all
       IPv4 addresses, and <literal>::/0</literal> represents
       all IPv6 addresses.
       To specify a single host, use a CIDR mask of 32 for IPv4 or
       128 for IPv6.  In a network address, do not omit trailing zeroes.
-->
典型的なIPアドレス範囲の例は、単一のホストでは<literal>172.20.143.89/32</literal>、小規模ネットワークでは<literal>172.20.143.0/24</literal>、大規模ネットワークでは<literal>10.6.0.0/16</literal>のようなものです。
<literal>0.0.0.0/0</literal>は全てのIPv4アドレスを意味します。また、<literal>::/0</literal>は全てのIPv6アドレスを意味しています。
単一ホストを指定するには、IPv4では32というCIDRマスクを、IPv6では128を使用してください。
ネットワークアドレスでは末尾の0を省略できません。
      </para>

      <para>
<!--
       An IP address given in IPv4 format will match IPv6 connections that
       have the corresponding address, for example <literal>127.0.0.1</>
       will match the IPv6 address <literal>::ffff:127.0.0.1</>.  An entry
       given in IPv6 format will match only IPv6 connections, even if the
       represented address is in the IPv4-in-IPv6 range.  Note that entries
       in IPv6 format will be rejected if the system's C library does not have
       support for IPv6 addresses.
-->
IPv4書式で与えられたIPアドレスは、対応するアドレスを持つIPv6接続に対しても対応します。
例えば、<literal>127.0.0.1</>は<literal>::ffff:127.0.0.1</> IPv6アドレスに対応します。
IPv6書式で与えられた項目は、たとえそのアドレスがIPv6内のIPv4の範囲内であったとしてもIPv6接続のみに対応します。
IPv6書式の項目は、システムのCライブラリがIPv6アドレスをサポートしていない場合拒絶されることに注意してください。
      </para>

      <para>
<!--      
       You can also write <literal>all</literal> to match any IP address,
       <literal>samehost</literal> to match any of the server's own IP
       addresses, or <literal>samenet</literal> to match any address in any
       subnet that the server is directly connected to.
-->
どのIPアドレスにも一致するように<literal>all</literal>と書くこともできますし、
サーバ自身のどのIPアドレスにも一致するように<literal>samehost</literal>と書くこともできます。
もしくは、サーバが直接接続されているサブネット内のどのアドレスにも一致するように<literal>samenet</literal>と書くことができます。
      </para>

      <para>
<!--      
       If a host name is specified (anything that is not an IP address
       or a special key word is treated as a host name),
       that name is compared with the result of a reverse name
       resolution of the client's IP address (e.g., reverse DNS
       lookup, if DNS is used).  Host name comparisons are case
       insensitive.  If there is a match, then a forward name
       resolution (e.g., forward DNS lookup) is performed on the host
       name to check whether any of the addresses it resolves to are
       equal to the client's IP address.  If both directions match,
       then the entry is considered to match.  (The host name that is
       used in <filename>pg_hba.conf</filename> should be the one that
       address-to-name resolution of the client's IP address returns,
       otherwise the line won't be matched.  Some host name databases
       allow associating an IP address with multiple host names, but
       the operating system will only return one host name when asked
       to resolve an IP address.)
-->
もし、ホスト名（IPアドレスではない場合の全て、もしくはホスト名として処理される特別なキーワード）が指定されている場合は、その名前は、クライアントのIPアドレスの逆引き名前解決の結果と比較されます（例えば、もしDNSが使用されている場合は逆引きDNS検索により解決されます）。
ホスト名の比較は、大文字小文字が区別されます。もし一致するものがあった場合は、解決された、どのアドレスもクライアントのIPアドレスと等しいか否かをチェックするために（例えば、前方一致のDNS検索のような）ホスト名の前方一致の名前解決が実行されます。
もし前方、後方の両方向で一致した場合は、エントリは一致するものとみなされます。
（<filename>pg_hba.conf</filename>内で使用されているホスト名は、クライアントのIPアドレスのアドレス-名前解決が返すホスト名の1つでなければいけません。
もしそうでなければこの行は一致しません。
1つのIPアドレスを複数のホスト名に関連付けるホスト名データベースもありますが、IPアドレスの解決を要求された場合にオペレーティングシステムは1つのホスト名のみを返します。）
      </para>

      <para>
<!--      
       A host name specification that starts with a dot
       (<literal>.</literal>) matches a suffix of the actual host
       name.  So <literal>.example.com</literal> would match
       <literal>foo.example.com</literal> (but not just
       <literal>example.com</literal>).
-->
ドット（<literal>.</literal>）で始まるホスト名の特定は実際のホスト名のサフィックスに一致します。
よって、<literal>.example.com</literal>は、<literal>foo.example.com</literal>に一致します
（<literal>example.com</literal>だけでは一致しません）。
      </para>

      <para>
<!--
       When host names are specified
       in <filename>pg_hba.conf</filename>, you should make sure that
       name resolution is reasonably fast.  It can be of advantage to
       set up a local name resolution cache such
       as <command>nscd</command>.  Also, you may wish to enable the
       configuration parameter <varname>log_hostname</varname> to see
       the client's host name instead of the IP address in the log.
-->
ホスト名が<filename>pg_hba.conf</filename>内で指定されている場合、名前解決が適度に早いことを
確かめてください。<command>nscd</command>のようなローカル名前解決のキャッシュを設定することによる恩恵です。
また、クライアントのIPアドレスの代わりにホスト名がログで見られるように、<varname>log_hostname</varname>の
設定パラメータを有効化することもできます。
      </para>

      <para>
<!--
       This field only applies to <literal>host</literal>,
       <literal>hostssl</literal>, and <literal>hostnossl</> records.
-->
このフィールドは<literal>host</literal>および<literal>hostssl</literal>、<literal>hostnossl</>レコードにのみ適用されます。
      </para>

      <sidebar>
       <para>
<!--
        Users sometimes wonder why host names are handled
        in this seemingly complicated way, with two name resolutions
        including a reverse lookup of the client's IP address.  This
        complicates use of the feature in case the client's reverse DNS
        entry is not set up or yields some undesirable host name.
        It is done primarily for efficiency: this way, a connection attempt
        requires at most two resolver lookups, one reverse and one forward.
        If there is a resolver problem with some address, it becomes only
        that client's problem.  A hypothetical alternative
        implementation that only did forward lookups would have to
        resolve every host name mentioned in
        <filename>pg_hba.conf</filename> during every connection attempt.
        That could be quite slow if many names are listed.
        And if there is a resolver problem with one of the host names,
        it becomes everyone's problem.
-->
時折、ユーザは、クライアントのIPアドレスの逆引きを含む2つの名前解決が必要になる、というような一見複雑に見える方法でなぜホスト名が扱われるのか不思議に思うことがあります。
このため、クライアントの逆引きDNSエントリが設定されていなかったり、いくつかの望ましくないホスト名を生成する場合にこの機能の使用が複雑になります。
これは主に効率のために行なわれます。このように、接続要求では最大2つのリゾルバの検索、1つは逆引き、1つは正引き、が必要になります。
もしリゾルバにおいて、アドレスに問題があった場合、クライアントのみの問題となります。
前方検索のみを行うような実装を仮に行っていると、全ての接続要求において<filename>pg_hba.conf</filename>内に記載された全てのホスト名を解決しなくてはいけなくなります。
これは、多くの名前が列挙されていた場合にかなり遅くなります。
また、リゾルバにおいて1つのホスト名に問題があった場合、全員の問題となってしまいます。
       </para>

       <para>
<!--
        Also, a reverse lookup is necessary to implement the suffix
        matching feature, because the actual client host name needs to
        be known in order to match it against the pattern.
-->
さらに、逆引き検索はサフィックス一致の機能を実装するために必要です。というのも実際のクライアントのホスト名は
ホスト名がパターンに対して一致するために、知られる必要があるためです。
       </para>

       <para>
<!--
        Note that this behavior is consistent with other popular
        implementations of host name-based access control, such as the
        Apache HTTP Server and TCP Wrappers.
-->
このふるまいは、Apache HTTPサーバやTCPラッパーのような他のよくあるホスト名ベースのアクセス制御の実装と
一致していることに注意して下さい。
       </para>
      </sidebar>

      <para>
<!--
       This field only applies to <literal>host</literal>,
       <literal>hostssl</literal>, and <literal>hostnossl</> records.
-->
これらのフィールドは<literal>host</literal>および<literal>hostssl</literal>、<literal>hostnossl</>レコードにのみ適用されます。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable>IP-address</replaceable></term>
     <term><replaceable>IP-mask</replaceable></term>
     <listitem>
      <para>
<!--
       These fields can be used as an alternative to the
       <replaceable>CIDR-address</replaceable> notation. Instead of
       specifying the mask length, the actual mask is specified in a
       separate column. For example, <literal>255.0.0.0</> represents an IPv4
       CIDR mask length of 8, and <literal>255.255.255.255</> represents a
       CIDR mask length of 32.
-->
このフィールドは<replaceable>CIDR-address</replaceable>表記の代替として使用可能です。
マスク長を指定する代わりに、実際のマスクを分離した列で指定します。
例えば<literal>255.0.0.0</>はIPv4のCIDRマスク長8を意味し、<literal>255.255.255.255</>はCIDRマスク長32を意味しています。
      </para>

      <para>
<!--
       These fields only apply to <literal>host</literal>,
       <literal>hostssl</literal>, and <literal>hostnossl</> records.
-->
このフィールドは<literal>host</literal>および<literal>hostssl</literal>、<literal>hostnossl</>レコードにのみ適用されます。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable>auth-method</replaceable></term>
     <listitem>
      <para>
<!--
       Specifies the authentication method to use when a connection matches
       this record. The possible choices are summarized here; details
       are in <xref linkend="auth-methods">.
-->
接続がこのレコードに一致する場合に使用する認証方式を指定します。
使用できる選択肢は以下にまとめていますが、詳しくは<xref linkend="auth-methods">を参照してください。

       <variablelist>
        <varlistentry>
         <term><literal>trust</></term>
         <listitem>
         <para>
<!--
          Allow the connection unconditionally. This method
          allows anyone that can connect to the
          <productname>PostgreSQL</productname> database server to login as
          any <productname>PostgreSQL</productname> user they wish,
          without the need for a password or any other authentication.  See <xref
          linkend="auth-trust"> for details.
-->
接続を無条件で許可します。
この方式は、<productname>PostgreSQL</productname>データベースサーバに接続できる全てのユーザが、任意の<productname>PostgreSQL</productname>ユーザとしてパスワードや他の認証なしでログインすることを許可します。  
詳細は<xref linkend="auth-trust">を参照してください。
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>reject</></term>
        <listitem>
         <para>
<!--
          Reject the connection unconditionally. This is useful for
          <quote>filtering out</> certain hosts from a group, for example a
          <literal>reject</> line could block a specific host from connecting,
          while a later line allows the remaining hosts in a specific
          network to connect.
-->
接続を無条件に拒否します。
特定のホストをあるグループから<quote>除外</>するために便利です。
例えば、1行の<literal>reject</>は特定のホストが接続することを拒否します。一方、
後ろの行では特定のネットワーク内の残りのホストが接続することを許可します。
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>md5</></term>
        <listitem>
         <para>
<!--
          Require the client to supply a double-MD5-hashed password for
          authentication.
          See <xref linkend="auth-password"> for details.
-->
クライアントに対して認証時に二重MD5ハッシュ化パスワードを要求します。 
詳細は<xref linkend="auth-password">を参照してください。
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>password</></term>
        <listitem>
         <para>
<!--
          Require the client to supply an unencrypted password for
          authentication.
          Since the password is sent in clear text over the
          network, this should not be used on untrusted networks.
          See <xref linkend="auth-password"> for details.
-->
クライアントに対して認証時に平文のパスワードを要求します。 
パスワードはネットワークを通じて普通のテキスト形式で送られますので、信頼されていないネットワークでは使用しないでください。 
詳細は<xref linkend="auth-password">を参照してください。
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>gss</></term>
        <listitem>
         <para>
<!--
          Use GSSAPI to authenticate the user. This is only
          available for TCP/IP connections. See <xref
          linkend="gssapi-auth"> for details.
-->
ユーザの認証にGSSAPIを使用します。
これはTCP/IP接続を使用するときのみ使用可能です。
詳細は<xref linkend="gssapi-auth">を参照してください。
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>sspi</></term>
        <listitem>
         <para>
<!--
          Use SSPI to authenticate the user. This is only
          available on Windows. See <xref
          linkend="sspi-auth"> for details.
-->
ユーザの認証にSSPIを使用します。
これはWindowsを使用するときのみ使用可能です。
詳細は<xref linkend="sspi-auth">を参照してください。
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>ident</></term>
        <listitem>
         <para>
<!--
          Obtain the operating system user name of the client
          by contacting the ident server on the client
          and check if it matches the requested database user name.
          Ident authentication can only be used on TCP/IP
          connections. When specified for local connections, peer
          authentication will be used instead.
          See <xref linkend="auth-ident"> for details.
-->
クライアントのオペレーティングシステムにおけるユーザ名をクライアント上のidentサーバに尋ねてユーザ名が要求されたデータベースユーザ名と一致するか検査します。
ident認証は、TCP/IP接続でのみ使用可能です。ローカル接続が指定されている場合は、peer認証が代わりに使用されます。
詳細は<xref linkend="auth-ident">を参照してください。
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>peer</></term>
        <listitem>
         <para>
<!--
          Obtain the client's operating system user name from the operating
          system and check if it matches the requested database user name.
          This is only available for local connections.
          See <xref linkend="auth-peer"> for details.
-->
クライアントのオペレーティングシステムにおけるユーザ名をオペレーティングシステムから取得し、ユーザ名が要求されたデータベースユーザ名と一致するか検査します。
これはローカル接続の時にのみ使用可能です。詳細は<xref linkend="auth-peer">を参照してください。
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>ldap</></term>
        <listitem>
         <para>
<!--
          Authenticate using an <acronym>LDAP</> server. See <xref
          linkend="auth-ldap"> for details.
-->
<acronym>LDAP</>サーバを使用して認証します。
詳細は<xref linkend="auth-ldap">を参照してください。
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>radius</></term>
        <listitem>
         <para>
<!--
          Authenticate using a RADIUS server. See <xref
          linkend="auth-radius"> for details.
-->
RADIUSサーバを使用して認証します。
詳細は<xref linkend="auth-radius">を参照してください。
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>cert</></term>
        <listitem>
         <para>
<!--
          Authenticate using SSL client certificates. See
          <xref linkend="auth-cert"> for details.
-->
SSLクライアント証明書を使用して認証します。
詳細は<xref linkend="auth-cert">を参照してください。
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>pam</></term>
        <listitem>
         <para>
<!--
          Authenticate using the Pluggable Authentication Modules
          (PAM) service provided by the operating system.  See <xref
          linkend="auth-pam"> for details.
-->
オペレーティングシステムによって提供されるPAM（Pluggable Authentication Modules）サービスを使用した認証です。  
詳細は<xref linkend="auth-pam">を参照してください。
         </para>
        </listitem>
       </varlistentry>
      </variablelist>

      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><replaceable>auth-options</replaceable></term>
     <listitem>
      <para>
<!--
       After the <replaceable>auth-method</> field, there can be field(s) of
       the form <replaceable>name</><literal>=</><replaceable>value</> that
       specify options for the authentication method. Details about which
       options are available for which authentication methods appear below.
-->
<replaceable>auth-method</>フィールドの後ろに、
認証方式のオプションを指定する、<replaceable>name</><literal>=</><replaceable>value</>の形式のフィールドが存在する可能性があります。
どのオプションがどの認証方式に使用できるのか、についての詳細は以下で説明します。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>

  <para>
<!--
   Files included by <literal>@</> constructs are read as lists of names,
   which can be separated by either whitespace or commas.  Comments are
   introduced by <literal>#</literal>, just as in
   <filename>pg_hba.conf</filename>, and nested <literal>@</> constructs are
   allowed.  Unless the file name following <literal>@</> is an absolute
   path, it is taken to be relative to the directory containing the
   referencing file.
-->
<literal>@</>式により含められるファイルは、空白文字あるいはカンマのどちらかで区切られた名前の列挙として読み込まれます。
コメントは、<filename>pg_hba.conf</filename>と同様に<literal>#</literal>から始まります。
また、<literal>@</>式を入れ子にすることもできます。
<literal>@</>の後のファイル名が絶対パスでない限り、参照元ファイルが存在するディレクトリから見た相対パスであるとみなされます。
  </para>

  <para>
<!--
   Since the <filename>pg_hba.conf</filename> records are examined
   sequentially for each connection attempt, the order of the records is
   significant. Typically, earlier records will have tight connection
   match parameters and weaker authentication methods, while later
   records will have looser match parameters and stronger authentication
   methods. For example, one might wish to use <literal>trust</>
   authentication for local TCP/IP connections but require a password for
   remote TCP/IP connections. In this case a record specifying
   <literal>trust</> authentication for connections from 127.0.0.1 would
   appear before a record specifying password authentication for a wider
   range of allowed client IP addresses.
-->
<filename>pg_hba.conf</filename>レコードは接続が試みられる度に順番に検査されますので、レコードの順序はとても大切です。 
典型的には、始めの方のレコードには厳しい接続照合パラメータと緩い認証方式があるのに対し、終わりの方のレコードにはより緩い照合パラメータとより厳しい認証方式があります。 
例えば、ローカルTCP接続では<literal>trust</>認証方式、リモートTCP接続に対してはパスワードを要求したいとします。 
この場合、広範囲にわたって許可されるクライアントのIPアドレスに対するパスワード認証を指定するレコードの前に127.0.0.1からの接続に対する<literal>trust</>認証指定のレコードが置かれなければなりません。
  </para>

  <para>
<!--
   The <filename>pg_hba.conf</filename> file is read on start-up and when
   the main server process receives a
   <systemitem>SIGHUP</systemitem><indexterm><primary>SIGHUP</primary></indexterm>
   signal. If you edit the file on an
   active system, you will need to signal the postmaster
   (using <literal>pg_ctl reload</> or <literal>kill -HUP</>) to make it
   re-read the file.
-->
<filename>pg_hba.conf</filename>ファイルは起動時と、主サーバプロセスが<systemitem>SIGHUP</systemitem>信号を受け取った時に読み込まれます。<indexterm><primary>SIGHUP</primary></indexterm>
稼働中のシステムでファイルを編集した場合は、（<literal>pg_ctl reload</>あるいは<literal>kill -HUP</>を使用して）postmasterにファイルをもう一度読み込むように信号を出さなければなりません。
  </para>

  <tip>
   <para>
<!--
    To connect to a particular database, a user must not only pass the
    <filename>pg_hba.conf</filename> checks, but must have the
    <literal>CONNECT</> privilege for the database.  If you wish to
    restrict which users can connect to which databases, it's usually
    easier to control this by granting/revoking <literal>CONNECT</> privilege
    than to put the rules in <filename>pg_hba.conf</filename> entries.
-->
特定のデータベースに接続するためには、ユーザは<filename>pg_hba.conf</filename>による検査を通過しなければならない他、そのデータベースに対する<literal>CONNECT</>権限を持たなければなりません。
どのユーザがどのデータベースに接続できるかを制限したければ、通常、<filename>pg_hba.conf</filename>項目に規則を追加するよりも、<literal>CONNECT</>権限の付与・削除を行う方が簡単です。
   </para>
  </tip>

  <para>
<!--
   Some examples of <filename>pg_hba.conf</filename> entries are shown in
   <xref linkend="example-pg-hba.conf">. See the next section for details on the
   different authentication methods.
-->
<filename>pg_hba.conf</filename>ファイルの例をいくつか<xref linkend="example-pg-hba.conf">に示します。 
各種認証方式の詳細についてはその後で説明します。
  </para>

   <example id="example-pg-hba.conf">
<!--
    <title>Example <filename>pg_hba.conf</filename> Entries</title>
-->
    <title><filename>pg_hba.conf</filename>の項目の例</title>
<programlisting>
<!--
# Allow any user on the local system to connect to any database with
# any database user name using Unix-domain sockets (the default for local
# connections).
-->
# ローカルシステム上の全てのユーザが、任意のデータベースに
# 任意のデータベースユーザ名でUnixドメインソケットを使用して接続することを許可
# （ローカル接続ではデフォルト）。
#
# TYPE  DATABASE        USER            ADDRESS                 METHOD
local   all             all                                     trust

<!--
# The same using local loopback TCP/IP connections.
-->
# 上記と同じことをローカルループバックのTCP/IP接続を使って行なう。
#
# TYPE  DATABASE        USER            ADDRESS                 METHOD
host    all             all             127.0.0.1/32            trust

<!--
# The same as the previous line, but using a separate netmask column
-->
# 上記と同じだが、独立したネットマスク列を使用する
#
# TYPE  DATABASE        USER            IP-ADDRESS      IP-MASK             METHOD
host    all             all             127.0.0.1       255.255.255.255     trust

<!--
# The same over IPv6.
-->
# IPv6で上記と同じことを行なう。
#
# TYPE  DATABASE        USER            ADDRESS                 METHOD
host    all             all             ::1/128                 trust

<!--
# The same using a host name (would typically cover both IPv4 and IPv6).
-->
# ホスト名を使用して上記と同じことを行なう（通常はIPv4とIPv6の両方をカバーします）。
#
# TYPE  DATABASE        USER            ADDRESS                 METHOD
host    all             all             localhost               trust

<!--
# Allow any user from any host with IP address 192.168.93.x to connect
# to database "postgres" as the same user name that ident reports for
# the connection (typically the operating system user name).
-->
# IPアドレス192.168.93.xを持つ全てのホストの全てのユーザが、
# identがその接続について報告するのと同じユーザ名（典型的にはオペレーティングシステムのユーザ名）で
# データベース「postgres」へ接続することを許可。
#
# TYPE  DATABASE        USER            ADDRESS                 METHOD
host    postgres        all             192.168.93.0/24         ident

<!--
# Allow any user from host 192.168.12.10 to connect to database
# "postgres" if the user's password is correctly supplied.
-->
# ユーザのパスワードが正しく入力された場合、
# ホスト192.168.12.10からのどのようなユーザでもデータベース「postgres」へ接続することを許可。
#
# TYPE  DATABASE        USER            ADDRESS                 METHOD
host    postgres        all             192.168.12.10/32        md5

<!--
# Allow any user from hosts in the example.com domain to connect to
# any database if the user's password is correctly supplied.
-->
# ユーザのパスワードが正しく指定された場合は、
# example.comドメイン内のホストからの、どのユーザからのデータベース接続も許可する。
#
# TYPE  DATABASE        USER            ADDRESS                 METHOD
host    all             all             .example.com            md5

<!--
# In the absence of preceding "host" lines, these two lines will
# reject all connections from 192.168.54.1 (since that entry will be
# matched first), but allow GSSAPI connections from anywhere else
# on the Internet.  The zero mask causes no bits of the host IP
# address to be considered, so it matches any host.
-->
# 先行する「host」行がなければ、これら2行によって192.168.54.1からの接続
# の試みを全て拒否（この項目が最初に照合されるため）。
# ただし、インターネット上の他の全ての場所からのGSSAPI接続は許可。
# ゼロマスクは、ホストIPアドレスのビットが考慮されずに
# どのホストでも照合できることになる。
#
# TYPE  DATABASE        USER            ADDRESS                 METHOD
host    all             all             192.168.54.1/32         reject
host    all             all             0.0.0.0/0               gss

<!--
# Allow users from 192.168.x.x hosts to connect to any database, if
# they pass the ident check.  If, for example, ident says the user is
# "bryanh" and he requests to connect as PostgreSQL user "guest1", the
# connection is allowed if there is an entry in pg_ident.conf for map
# "omicron" that says "bryanh" is allowed to connect as "guest1".
-->
# 192.168.x.xホストからのユーザが、ident検査に通る場合、
# どのデータベースにでも接続を許可。もし、例えば、identが「bryanh」と認定し
# 「bryanh」がPostgreSQLのユーザ「guest1」として
# 接続要求を出す場合、「bryanh」は「guest1」として接続が許可されるという
# マップ「omicron」に対する記載事項がpg_ident.confにあれば接続を許可。
#
# TYPE  DATABASE        USER            ADDRESS                 METHOD
host    all             all             192.168.0.0/16          ident map=omicron

<!--
# If these are the only three lines for local connections, they will
# allow local users to connect only to their own databases (databases
# with the same name as their database user name) except for administrators
# and members of role "support", who can connect to all databases.  The file
# $PGDATA/admins contains a list of names of administrators.  Passwords
# are required in all cases.
-->
# ローカル接続に対して、以下のたった3行しか記載がない場合、ローカルユーザは 
# 自分のデータベース（データベースユーザ名と同じ名前のデータベース）にのみ接続許可。
# ただし管理者とロール「support」のメンバは全てのデータベースに接続可能。
# $PGDATA/adminsファイルは管理者のリストを含む。  
# 全ての場合にパスワードが必要。
#
# TYPE  DATABASE        USER            ADDRESS                 METHOD
local   sameuser        all                                     md5
local   all             @admins                                 md5
local   all             +support                                md5

<!--
# The last two lines above can be combined into a single line:
-->
# 上記の最後の2行は1つの行にまとめることが可能。
local   all             @admins,+support                        md5

<!--
# The database column can also use lists and file names:
-->
# データベースの列にはリストやファイル名も使用できる。
local   db1,db2,@demodbs  all                                   md5
</programlisting>
   </example>
 </sect1>

 <sect1 id="auth-username-maps">
<!--
  <title>User Name Maps</title>
-->
  <title>ユーザ名マップ</title>

  <indexterm zone="auth-username-maps">
<!--
   <primary>User name maps</primary>
-->
   <primary>ユーザ名マップ</primary>
  </indexterm>

  <para>
<!--
   When using an external authentication system like Ident or GSSAPI,
   the name of the operating system user that initiated the connection
   might not be the same as the database user he needs to connect as.
   In this case, a user name map can be applied to map the operating system
   user name to a database user.  To use user name mapping, specify
   <literal>map</literal>=<replaceable>map-name</replaceable>
   in the options field in <filename>pg_hba.conf</filename>. This option is
   supported for all authentication methods that receive external user names.
   Since different mappings might be needed for different connections,
   the name of the map to be used is specified in the
   <replaceable>map-name</replaceable> parameter in <filename>pg_hba.conf</filename>
   to indicate which map to use for each individual connection.
-->
IdentやGSSAPIといった外部の認証システムを使用する場合は、接続を開始したオペレーティングシステムのユーザ名がデータベースユーザ名と同じであるとは限りません。
ユーザ名マップを使用するには、<filename>pg_hba.conf</filename>内で<literal>map</literal>=<replaceable>map-name</replaceable>オプションを指定してください。
このオプションは、外部ユーザ名を受け取るすべての認証方式をサポートしています。
異なる接続に対して、異なるマップが必要となる可能性があります。そのため、それぞれの接続に対して使用されるマップを指定するために、使用するマップの名称は
<filename>pg_hba.conf</filename>内の<replaceable>map-name</replaceable>パラメータで指定されます。
  </para>

  <para>
<!--
   User name maps are defined in the ident map file, which by default is named
   <filename>pg_ident.conf</><indexterm><primary>pg_ident.conf</primary></indexterm>
   and is stored in the
   cluster's data directory.  (It is possible to place the map file
   elsewhere, however; see the <xref linkend="guc-ident-file">
   configuration parameter.)
   The ident map file contains lines of the general form:
-->
ユーザ名マップはidentマップファイルに定義されています。デフォルトではファイル名は<filename>pg_ident.conf</><indexterm><primary>pg_ident.conf</primary></indexterm>で
クラスタのデータディレクトリに保存されています。（他の場所にも保存できますが、詳細は<xref linkend="guc-ident-file">設定パラメータを参照してください。）
identマップファイルは一般的な形式の行を含んでいます。
<synopsis>
<replaceable>map-name</> <replaceable>system-username</> <replaceable>database-username</>
</synopsis>
<!--
   Comments and whitespace are handled in the same way as in
   <filename>pg_hba.conf</>.  The
   <replaceable>map-name</> is an arbitrary name that will be used to
   refer to this mapping in <filename>pg_hba.conf</filename>. The other
   two fields specify an operating system user name and a matching
   database user name. The same <replaceable>map-name</> can be
   used repeatedly to specify multiple user-mappings within a single map.
-->
コメントと空白は<filename>pg_hba.conf</>と同様に扱われます。 <replaceable>map-name</>は
<filename>pg_hba.conf</filename>内で参照される任意の名称です。
他の2つのフィールドは、どのオペレーティングシステムユーザが、どのデータベースユーザに接続することを許可されているかを指定しています。
同じ<replaceable>map-name</>は、1つのマップ内でユーザをマップするために繰り返し使用されます。
  </para>
  <para>
<!--
   There is no restriction regarding how many database users a given
   operating system user can correspond to, nor vice versa.  Thus, entries
   in a map should be thought of as meaning <quote>this operating system
   user is allowed to connect as this database user</quote>, rather than
   implying that they are equivalent.  The connection will be allowed if
   there is any map entry that pairs the user name obtained from the
   external authentication system with the database user name that the
   user has requested to connect as.
-->
どれだけのデータベースユーザがオペレーティングシステムのユーザに対して一致しているか、またその逆に対しても制限はありません。
よってマップ内のエントリは、それらが等しいというよりもむしろ
<quote>このオペレーティングシステムのユーザはこのデータベースユーザとして接続する</quote>という意味になります。
もし外部の認証システムから得られたユーザ名と接続要求を行ったデータベースユーザ名が対となるエントリがマップ内にある場合は、接続は許可されます。
  </para>
  <para>
<!--
   If the <replaceable>system-username</> field starts with a slash (<literal>/</>),
   the remainder of the field is treated as a regular expression.
   (See <xref linkend="posix-syntax-details"> for details of
   <productname>PostgreSQL</>'s regular expression syntax.)  The regular
   expression can include a single capture, or parenthesized subexpression,
   which can then be referenced in the <replaceable>database-username</>
   field as <literal>\1</> (backslash-one).  This allows the mapping of
   multiple user names in a single line, which is particularly useful for
   simple syntax substitutions.  For example, these entries
-->
もし<replaceable>system-username</>フィールドがスラッシュ（<literal>/</>）で始まっている場合は、
このフィールドの残りは正規表現として扱われます。
（<productname>PostgreSQL</>の正規表現構文の詳細については<xref linkend="posix-syntax-details">を参照してください。）
正規表現は単一検索や括弧を使用した表現、<replaceable>database-username</>フィールドで<literal>\1</>（バックスラッシュ-1）で参照されるような表現を含みます。
これにより、1行で複数のユーザ名のマップが可能となり、簡単な構文で特に使いやすくなります。例を以下に示します。
<programlisting>
mymap   /^(.*)@mydomain\.com$      \1
mymap   /^(.*)@otherdomain\.com$   guest
</programlisting>
<!--
   will remove the domain part for users with system user names that end with
   <literal>@mydomain.com</>, and allow any user whose system name ends with
   <literal>@otherdomain.com</> to log in as <literal>guest</>.
-->
上記のエントリでは、<literal>@mydomain.com</>で終わるシステムユーザ名のドメイン部分を削除して、
<literal>@otherdomain.com</>で終わるシステムユーザ名が<literal>guest</>としてログインすることを許可します。
  </para>

  <tip>
   <para>
<!--
    Keep in mind that by default, a regular expression can match just part of
    a string.  It's usually wise to use <literal>^</> and <literal>$</>, as
    shown in the above example, to force the match to be to the entire
    system user name.
-->
デフォルトでは正規表現は、文字列の一部を一致させることに注意してください。
上記の例で示したように、システムユーザ名全体を強制的に一致させるために<literal>^</>や<literal>$</>を使用すると有用です。
   </para>
  </tip>

  <para>
<!--
   The <filename>pg_ident.conf</filename> file is read on start-up and
   when the main server process receives a
   <systemitem>SIGHUP</systemitem><indexterm><primary>SIGHUP</primary></indexterm>
   signal. If you edit the file on an
   active system, you will need to signal the postmaster
   (using <literal>pg_ctl reload</> or <literal>kill -HUP</>) to make it
   re-read the file.
-->
<filename>pg_ident.conf</filename>ファイルは起動時と、メインサーバのプロセスが
<systemitem>SIGHUP</systemitem><indexterm><primary>SIGHUP</primary></indexterm>を受信したときに読み込まれます。
起動しているシステムで編集した場合は、ファイルを再読み込みするために（<literal>pg_ctl reload</>または<literal>kill -HUP</>を使用して）
postmasterにシグナルを送信する必要があります。
  </para>

  <para>
<!--
   A <filename>pg_ident.conf</filename> file that could be used in
   conjunction with the <filename>pg_hba.conf</> file in <xref
   linkend="example-pg-hba.conf"> is shown in <xref
   linkend="example-pg-ident.conf">. In this example, anyone
   logged in to a machine on the 192.168 network that does not have the
   operating system user name <literal>bryanh</>, <literal>ann</>, or
   <literal>robert</> would not be granted access. Unix user
   <literal>robert</> would only be allowed access when he tries to
   connect as <productname>PostgreSQL</> user <literal>bob</>, not
   as <literal>robert</> or anyone else. <literal>ann</> would
   only be allowed to connect as <literal>ann</>. User
   <literal>bryanh</> would be allowed to connect as either
   <literal>bryanh</> or as <literal>guest1</>.
-->
<filename>pg_ident.conf</filename>ファイルは、<filename>pg_hba.conf</>ファイルと結合して使用されます。
<xref linkend="example-pg-ident.conf">に<xref linkend="example-pg-hba.conf">の例があります。
この例では、192.168のネットワーク内のマシンにログインしている、
オペレーティングシステムのユーザ名で<literal>bryanh</>、<literal>ann</>、<literal>robert</>以外の誰もが、アクセスを許可されていません。
Unixユーザ<literal>robert</>は<productname>PostgreSQL</>ユーザである<literal>bob</>として接続しようとした時のみ
アクセス可能で、 <literal>robert</>や他の名前ではアクセスできません。
<literal>ann</>は<literal>ann</>として接続した時のみ許可され、<literal>bryanh</>は<literal>bryanh</>自身もしくは<literal>guest1</>として
アクセスが可能となります。
  </para>

  <example id="example-pg-ident.conf">
<!--
   <title>An Example <filename>pg_ident.conf</> File</title>
-->
   <title><filename>pg_ident.conf</>ファイルの例</title>

<programlisting>
# MAPNAME       SYSTEM-USERNAME         PG-USERNAME

omicron         bryanh                  bryanh
omicron         ann                     ann
<!--
# bob has user name robert on these machines
-->
# bobはこれらのマシン内でrobertというユーザ名を持っています。
omicron         robert                  bob
<!--
# bryanh can also connect as guest1
-->
# bryanhはguest1としても接続可能です。
omicron         bryanh                  guest1
</programlisting>
  </example>
 </sect1>

 <sect1 id="auth-methods">
<!--
  <title>Authentication Methods</title>
-->
  <title>認証方式</title>
  <para>
<!--
   The following subsections describe the authentication methods in more detail.
-->
   以下の小節では、認証方式について詳細に説明します。
  </para>

  <sect2 id="auth-trust">
<!--
   <title>Trust Authentication</title>
-->
   <title>trust認証</title>

   <para>
<!--
    When <literal>trust</> authentication is specified,
    <productname>PostgreSQL</productname> assumes that anyone who can
    connect to the server is authorized to access the database with
    whatever database user name they specify (even superuser names).
    Of course, restrictions made in the <literal>database</> and
    <literal>user</> columns still apply.
    This method should only be used when there is adequate
    operating-system-level protection on connections to the server.
-->
<literal>trust</>認証が指定されると<productname>PostgreSQL</productname>は、サーバに接続できる全ての人に対して
（データベーススーパーユーザさえも）その人が指定する任意のデータベースユーザ名としてのアクセス権限が付与されていると想定します。
当然ながら<literal>database</>と<literal>user</>列にある制限は適用されます。
この方式はサーバに接続する際に適切なオペレーティングシステムレベルの保護が掛けられている場合にのみ使用すべきです。
   </para>

   <para>
<!--
    <literal>trust</> authentication is appropriate and very
    convenient for local connections on a single-user workstation.  It
    is usually <emphasis>not</> appropriate by itself on a multiuser
    machine.  However, you might be able to use <literal>trust</> even
    on a multiuser machine, if you restrict access to the server's
    Unix-domain socket file using file-system permissions.  To do this, set the
    <varname>unix_socket_permissions</varname> (and possibly
    <varname>unix_socket_group</varname>) configuration parameters as
    described in <xref linkend="runtime-config-connection">.  Or you
    could set the <varname>unix_socket_directories</varname>
    configuration parameter to place the socket file in a suitably
    restricted directory.
-->
<literal>trust</>認証はユーザが1人のみのワークステーション上でローカル接続を行う場合は適切であると同時に非常に便利です。
複数ユーザが存在するマシン上では一般的に適切では<emphasis>ありません</>。 
とは言っても、ファイルシステムの許可属性を使ってサーバのUnixドメインソケットファイルへのアクセスを制限すれば<literal>trust</>認証を複数ユーザのマシン上で使用することも可能です。
その方法は、<xref linkend="runtime-config-connection">に記載されているように<varname>unix_socket_permissions</varname>（および<varname>unix_socket_group</varname>パラメータの可能性もあります）パラメータを設定します。
もしくは、<varname>unix_socket_directories</varname>設定パラメータでソケットファイルをそれに相応しく制限されているディレクトリにします。
   </para>

   <para>
<!--
    Setting file-system permissions only helps for Unix-socket connections.
    Local TCP/IP connections are not restricted by file-system permissions.
    Therefore, if you want to use file-system permissions for local security,
    remove the <literal>host ... 127.0.0.1 ...</> line from
    <filename>pg_hba.conf</>, or change it to a
    non-<literal>trust</> authentication method.
-->
Unixソケット接続を行うただ1つの方法は、ファイルシステムの許可を設定することです。
ローカルのTCP/IP接続は、ファイルシステムにより制限はされていません。
よってローカルでファイルシステムの許可を使用したい場合は<filename>pg_hba.conf</>から
<literal>host ... 127.0.0.1 ...</>の行を削除するか、<literal>trust</>認証とは異なる方法に変更する必要があります。
   </para>

   <para>
<!--
    <literal>trust</> authentication is only suitable for TCP/IP connections
    if you trust every user on every machine that is allowed to connect
    to the server by the <filename>pg_hba.conf</> lines that specify
    <literal>trust</>.  It is seldom reasonable to use <literal>trust</>
    for any TCP/IP connections other than those from <systemitem>localhost</> (127.0.0.1).
-->
TCP/IP接続における<literal>trust</>認証は、<literal>trust</>を指定する<filename>pg_hba.conf</>の行によってサーバに接続を許可される全てのマシン上の全てのユーザを信用（trust）できる場合にのみ相応しいものです。
<systemitem>ローカルホスト</>（127.0.0.1）以外からのTCP/IP接続に<literal>trust</>認証を用いる理由はほとんど見当たりません。
   </para>

  </sect2>

  <sect2 id="auth-password">
<!--
   <title>Password Authentication</title>
-->
   <title>パスワード認証</title>

   <indexterm>
    <primary>MD5</>
   </indexterm>
   <indexterm>
<!--
    <primary>password</primary>
    <secondary>authentication</secondary>
-->
    <primary>パスワード</primary>
    <secondary>認証</secondary>
   </indexterm>

   <para>
<!--
    The password-based authentication methods are <literal>md5</>
    and <literal>password</>. These methods operate
    similarly except for the way that the password is sent across the
    connection, namely MD5-hashed and clear-text respectively.
-->
パスワードをベースにした認証方式には <literal>md5</>および<literal>password</>があります。 
これらの方式はパスワードが接続間でどのように送信されるか（すなわち、それぞれMD5-hashed、平文）を別にすれば似たような動作をします。
   </para>

   <para>
<!--
    If you are at all concerned about password
    <quote>sniffing</> attacks then <literal>md5</> is preferred.
    Plain <literal>password</> should always be avoided if possible.
    However, <literal>md5</> cannot be used with the <xref
    linkend="guc-db-user-namespace"> feature.  If the connection is
    protected by SSL encryption then <literal>password</> can be used
    safely (though SSL certificate authentication might be a better
    choice if one is depending on using SSL).
-->
もしパスワード<quote>盗聴</>攻撃に最大の関心があれば<literal>md5</>を使うのがよいでしょう。 
可能ならば、平文の<literal>password</>の使用は常に避けなければなりません。
しかし<literal>md5</>は<xref linkend="guc-db-user-namespace">機能といっしょに使用することはできません。
接続がSSL暗号化により保護されているのであれば、<literal>password</>を安全に使用することができます。
（ただしSSLの使用に依存するという点では、SSL証明書認証を使用した方が良いかもしれません。）
   </para>

   <para>
<!--
    <productname>PostgreSQL</productname> database passwords are
    separate from operating system user passwords. The password for
    each database user is stored in the <literal>pg_authid</> system
    catalog. Passwords can be managed with the SQL commands
    <xref linkend="sql-createuser"> and
    <xref linkend="sql-alterrole">,
    e.g., <userinput>CREATE USER foo WITH PASSWORD 'secret'</userinput>.
    If no password has been set up for a user, the stored password
    is null and password authentication will always fail for that user.
-->
<productname>PostgreSQL</productname>データベースパスワードはオペレーティングシステムのユーザパスワードとも別のものです。 
各データベースユーザのパスワードは<literal>pg_authid</>システムカタログテーブルの中に格納されます。 
<userinput>CREATE USER foo WITH PASSWORD 'secret';</userinput>のように、パスワードはSQLコマンド<xref linkend="sql-createuser">と<xref linkend="sql-alterrole">を使って管理できます。 
もしユーザに対してパスワードが設定されない場合、格納されるパスワードはNULLとなり、そのユーザのパスワード認証は常に失敗します。
   </para>

  </sect2>

  <sect2 id="gssapi-auth">
<!--
   <title>GSSAPI Authentication</title>
-->
   <title>GSSAPI認証</title>

   <indexterm zone="gssapi-auth">
    <primary>GSSAPI</primary>
   </indexterm>

   <para>
<!--
    <productname>GSSAPI</productname> is an industry-standard protocol
    for secure authentication defined in RFC 2743.
    <productname>PostgreSQL</productname> supports
    <productname>GSSAPI</productname> with <productname>Kerberos</productname>
    authentication according to RFC 1964. <productname>GSSAPI</productname>
    provides automatic authentication (single sign-on) for systems
    that support it. The authentication itself is secure, but the
    data sent over the database connection will be sent unencrypted unless
    <acronym>SSL</acronym> is used.
-->
<productname>GSSAPI</productname>は、RFC 2743で定義されている安全な認証のための業界標準のプロトコルです。
<productname>PostgreSQL</productname>は、RFC 1964により<productname>Kerberos</productname>認証での<productname>GSSAPI</productname>をサポートします。
<productname>GSSAPI</productname>は、<productname>GSSAPI</productname>をサポートしているシステムに対して自動認証（シングルサインオン）を提供します。
認証自体は安全ですが、データベース接続を通じて送信されるデータは、<acronym>SSL</acronym>が使用されていない場合は平文となります。
   </para>

   <para>
<!--
    GSSAPI support has to be enabled when <productname>PostgreSQL</> is built;
    see <xref linkend="installation"> for more information.
-->
GSSAPIサポートは、<productname>PostgreSQL</>を構築する時に有効にしなければなりません。詳細は、<xref linkend="installation">を参照してください。
   </para>

   <para>
<!--
    When <productname>GSSAPI</productname> uses
    <productname>Kerberos</productname>, it uses a standard principal
    in the format
    <literal><replaceable>servicename</>/<replaceable>hostname</>@<replaceable>realm</></literal>.
    The PostgreSQL server will accept any principal that is included in the keytab used by
    the server, but care needs to be taken to specify the correct principal details when
    making the connection from the client using the <literal>krbsrvname</> connection parameter. (See
    also <xref linkend="libpq-paramkeywords">.) The installation default can be
    changed from the default <literal>postgres</literal> at build time using
    <literal>./configure &#045;-with-krb-srvnam=</><replaceable>whatever</>.
    In most environments,
    this parameter never needs to be changed.
    Some Kerberos implementations might require a different service name,
    such as Microsoft Active Directory which requires the service name
    to be in upper case (<literal>POSTGRES</literal>).
-->
<productname>GSSAPI</productname>が<productname>Kerberos</productname>を使用しているとき、<productname>GSSAPI</productname>は、<literal><replaceable>servicename</>/<replaceable>hostname</>@<replaceable>realm</></literal>という書式の標準のプリンシパルを使用します。
[訳注：プリンシパルとは大雑把に2つのものを指します。1つはサービスを受けるクライアントで、もう1つはサービスを提供するサーバアプリケーションです。どちらも、認証に関してはKerberosのKDCから見るとクライアントになります]
PostgreSQLサーバはサーバにより使われるkeytabに含まれるいかなるプリンシパルも受け付けますが、<literal>krbsrvname</>接続パラメータを使ってクライアントから接続する場合には、プリンシパルの詳細を正確に指定することに注意を払う必要があります。
(<xref linkend="libpq-paramkeywords">も参照してください。)
ビルド時に<literal>./configure --with-krb-srvnam=whatever</>を使用することで、インストール時のデフォルトはデフォルトの<literal>postgres</literal>から変更が可能です。
多くの環境では、このパラメータは変更する必要はないでしょう。
いくつかのKerberosの実装では、異なるサービス名が必要になります。Microsoftアクティブディレクトリではサービス名は（<literal>POSTGRES</literal>）のように大文字にする必要があります。
   </para>
   <para>
<!--
    <replaceable>hostname</> is the fully qualified host name of the
    server machine. The service principal's realm is the preferred realm
    of the server machine.
-->
<replaceable>hostname</>はサーバマシンの完全修飾されたホスト名です。 
サービスプリンシパルのrealmはサーバマシンが提起したrealmです。
   </para>

   <para>
<!--
    Client principals must have their <productname>PostgreSQL</> database user
    name as their first component, for example
    <literal>pgusername@realm</>.  Alternatively, you can use a user name
    mapping to map from the first component of the principal name to the
    database user name.  By default, the realm of the client is
    not checked by <productname>PostgreSQL</>. If you have cross-realm
    authentication enabled and need to verify the realm, use the
    <literal>krb_realm</> parameter, or enable <literal>include_realm</>
    and use user name mapping to check the realm.
-->
クライアントのプリンシパルは第一の構成要素として<productname>PostgreSQL</>のデータベースユーザ名を所有しなければなりません。
例えば、<replaceable>pguser name/otherstuff@realm</>です。  
もう1つの方法として、プリンシパル名の第一の構成要素からデータベースユーザ名にマップするユーザ名マッピングを使用することもできます。
デフォルトではクライアントのrealmは<productname>PostgreSQL</>で検査されません。
相互のrealm認証が使用可能になっていてrealmを確認する必要がある場合は、<literal>krb_realm</>パラメータを使用するか
<literal>include_realm</>を使用可能にしてrealmを検査するためにユーザ名を使用してください。 
   </para>

   <para>
<!--
    Make sure that your server keytab file is readable (and preferably
    only readable) by the <productname>PostgreSQL</productname> server
    account.  (See also <xref linkend="postgres-user">.) The location
    of the key file is specified by the <xref
    linkend="guc-krb-server-keyfile"> configuration
    parameter. The default is
    <filename>/usr/local/pgsql/etc/krb5.keytab</> (or whatever
    directory was specified as <varname>sysconfdir</> at build time).
    For security reasons, it is recommended to use a separate keytab
    just for the <productname>PostgreSQL</productname> server rather
    than opening up permissions on the system keytab file.
-->
サーバ鍵ファイルが<productname>PostgreSQL</productname>サーバアカウントによって読み込み可能（そしてできれば読み込み専用）であることを確認してください。
（<xref linkend="postgres-user">を参照してください。）
鍵ファイルの保存場所は<xref linkend="guc-krb-server-keyfile">設定パラメータで指定されます
デフォルトは、<filename>/usr/local/pgsql/etc/krb5.keytab</>（もしくはビルド時に<varname>sysconfdir</>で指定されたディレクトリ）です。
セキュリティ上の理由から、システムkeytabファイルで許可するよりも、<productname>PostgreSQL</productname>サーバ用に別のkeytabファイルを使うことをお薦めします。
   </para>
   <para>
<!--
    The keytab file is generated by the Kerberos software; see the
    Kerberos documentation for details. The following example is
   for MIT-compatible Kerberos 5 implementations:
-->
keytabファイルはKerberosのソフトウェアによって作成されます。詳細はKerberosのドキュメントを参照してください。
MIT互換のKerberos5実装の例を以下に示します。
<screen>
<prompt>kadmin% </><userinput>ank -randkey postgres/server.my.domain.org</>
<prompt>kadmin% </><userinput>ktadd -k krb5.keytab postgres/server.my.domain.org</>
</screen>
   </para>

   <para>
<!--
    When connecting to the database make sure you have a ticket for a
    principal matching the requested database user name. For example, for
    database user name <literal>fred</>, principal
    <literal>fred@EXAMPLE.COM</> would be able to connect. To also allow
    principal <literal>fred/users.example.com@EXAMPLE.COM</>, use a user name
    map, as described in <xref linkend="auth-username-maps">.
-->
データベースに接続しようとしている時要求されるデータベースユーザ名に一致するプリンシパルのチケットを所有しているか確認してください。 
例えば、データベースユーザ名<literal>fred</>に対し、<literal>fred@EXAMPLE.COM</>のプリンシパルは接続できるでしょう。
<literal>fred/users.example.com@EXAMPLE.COM</>のプリンシパルも許可するためには<xref linkend="auth-username-maps">内に記述されているユーザ名マップを使用して下さい。
   </para>

   <para>
<!--
    The following configuration options are supported for <productname>GSSAPI</productname>:
-->
次の設定オプションは<productname>GSSAPI</productname>のためにサポートされています。
    <variablelist>
     <varlistentry>
      <term><literal>include_realm</literal></term>
      <listitem>
       <para>
<!--
        If set to 1, the realm name from the authenticated user
        principal is included in the system user name that's passed through
        user name mapping (<xref linkend="auth-username-maps">). This is
        useful for handling users from multiple realms.
-->
1に設定されている場合は、認証されたユーザプリンシパルからのrealm名が、ユーザ名マッピング（<xref linkend="auth-username-maps">）で渡されるシステムユーザ名の中に含まれています。
これは複数realmからのユーザを扱う場合に便利です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>map</literal></term>
      <listitem>
       <para>
<!--
        Allows for mapping between system and database user names. See
        <xref linkend="auth-username-maps"> for details. For a Kerberos
        principal <literal>username/hostbased@EXAMPLE.COM</literal>, the
        user name used for mapping is <literal>username/hostbased</literal>
        if <literal>include_realm</literal> is disabled, and
        <literal>username/hostbased@EXAMPLE.COM</literal> if
        <literal>include_realm</literal> is enabled.
-->
システムとデータベースの間のマッピングを許可します。詳細は<xref linkend="auth-username-maps">を参照してください。
Kerberosプリンシパル<literal>username/hostbased@EXAMPLE.COM</literal>に対しては、もし<literal>include_realm</literal>が無効になっている場合はマッピングに対して使用されるユーザ名は<literal>username/hostbased</literal>、<literal>include_realm</literal>が有効になっている場合は<literal>username/hostbased@EXAMPLE.COM</literal>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>krb_realm</literal></term>
      <listitem>
       <para>
<!--
        Sets the realm to match user principal names against. If this parameter
        is set, only users of that realm will be accepted.  If it is not set,
        users of any realm can connect, subject to whatever user name mapping
        is done.
-->
realmをユーザプリンシパル名に一致するように設定します。
もしこのパラメータが設定されている場合はそのrealmのユーザのみが受け付けられます。
もしこれが設定されていない場合は、どのようなrealmのユーザも接続可能で、ユーザ名マッピングが設定されていれば、どれでも影響を受けます。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>
  </sect2>

  <sect2 id="sspi-auth">
<!--
   <title>SSPI Authentication</title>
-->
   <title>SSPI認証</title>

   <indexterm zone="sspi-auth">
    <primary>SSPI</primary>
   </indexterm>

   <para>
<!--
    <productname>SSPI</productname> is a <productname>Windows</productname>
    technology for secure authentication with single sign-on.
    <productname>PostgreSQL</productname> will use SSPI in
    <literal>negotiate</literal> mode, which will use
    <productname>Kerberos</productname> when possible and automatically
    fall back to <productname>NTLM</productname> in other cases.
    <productname>SSPI</productname> authentication only works when both
    server and client are running <productname>Windows</productname>,
    or, on non-Windows platforms, when <productname>GSSAPI</productname>
    is available.
-->
<productname>SSPI</productname>は、シングルサインオンで安全な認証を行うための<productname>Windows</productname>の技術です。
<productname>PostgreSQL</productname>は、<literal>negotiate</literal>モードにおいてSSPIを使用します。
これは、可能な場合は<productname>Kerberos</productname>を使用し、他の場合については自動的に<productname>NTLM</productname>を使用することを意味しています。
<productname>SSPI</productname>認証は、サーバ、クライアントが共に<productname>Windows</productname>上もしくは<productname>GSSAPI</productname>が利用可能な場合はWindowsではないプラットフォームで稼動しているときにのみ動作します。
   </para>

   <para>
<!--
    When using <productname>Kerberos</productname> authentication,
    <productname>SSPI</productname> works the same way
    <productname>GSSAPI</productname> does; see <xref linkend="gssapi-auth">
    for details.
-->
<productname>Kerberos</productname>認証を使用しているとき、
<productname>SSPI</productname>は、<productname>GSSAPI</productname>と同じように動作します。
詳細は<xref linkend="gssapi-auth">を参照してください。
   </para>

   <para>
<!--
    The following configuration options are supported for <productname>SSPI</productname>:
-->
次の設定オプションは<productname>SSPI</productname>のためにサポートされています。
    <variablelist>

     <varlistentry>
      <term><literal>include_realm</literal></term>
      <listitem>
       <para>
<!--
        If set to 1, the realm name from the authenticated user
        principal is included in the system user name that's passed through
        user name mapping (<xref linkend="auth-username-maps">). This is
        useful for handling users from multiple realms.
-->
1に設定されている場合は、認証されたユーザプリンシパルからのrealm名が、ユーザ名マッピング（<xref linkend="auth-username-maps">）で渡されるシステムユーザ名の中に含まれています。
これは複数realmからのユーザを扱う場合に便利です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>map</literal></term>
      <listitem>
       <para>
<!--
        Allows for mapping between system and database user names. See
        <xref linkend="auth-username-maps"> for details.
-->
システムとデータベースユーザ名の間のマッピングを許可します。
詳細は<xref linkend="auth-username-maps">を参照してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><literal>krb_realm</literal></term>
      <listitem>
       <para>
<!--
        Sets the realm to match user principal names against. If this parameter
        is set, only users of that realm will be accepted.  If it is not set,
        users of any realm can connect, subject to whatever user name mapping
        is done.
-->
realmをユーザプリンシパル名に一致するように設定します。もしこのパラメータが設定されている場合は
realmのユーザのみが受け付けられます。もしこれが設定されていない場合は、
どのようなrealmのユーザも接続可能で、ユーザ名マッピングが設定されていれば、どれでも影響を受けます。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>
  </sect2>

  <sect2 id="auth-ident">
<!--
   <title>Ident Authentication</title>
-->
<title>Ident認証</title>

   <indexterm>
    <primary>ident</primary>
   </indexterm>

   <para>
<!--
    The ident authentication method works by obtaining the client's
    operating system user name from an ident server and using it as
    the allowed database user name (with an optional user name mapping).
    This is only supported on TCP/IP connections.
-->
ident認証方式は、クライアントのオペレーティングシステムのユーザ名をidentサーバから入手し、それを（オプションのユーザ名マップとともに）許可されているデータベースのユーザ名として使用します。  
これはTCP/IP接続のみサポートされます。
   </para>

   <note>
    <para>
<!--
     When ident is specified for a local (non-TCP/IP) connection,
     peer authentication (see <xref linkend="auth-peer">) will be
     used instead.
-->
identが（TCP/IPではない）ローカル接続で指定されている場合、
ピア認証（<xref linkend="auth-peer">を参照してください）が代わりに使用されます。
    </para>
   </note>

   <para>
<!--
    The following configuration options are supported for <productname>ident</productname>:
-->
次の設定オプションは<productname>ident</productname>のためにサポートされています。
    <variablelist>
     <varlistentry>
      <term><literal>map</literal></term>
      <listitem>
       <para>
<!--
        Allows for mapping between system and database user names. See
        <xref linkend="auth-username-maps"> for details.
-->
システムとデータベースユーザ名の間のマッピングを許可します。
詳細は<xref linkend="auth-username-maps">を参照してください。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>

   <para>
<!--
    The <quote>Identification Protocol</quote> is described in
    RFC 1413. Virtually every Unix-like
    operating system ships with an ident server that listens on TCP
    port 113 by default. The basic functionality of an ident server
    is to answer questions like <quote>What user initiated the
    connection that goes out of your port <replaceable>X</replaceable>
    and connects to my port <replaceable>Y</replaceable>?</quote>.
    Since <productname>PostgreSQL</> knows both <replaceable>X</> and
    <replaceable>Y</> when a physical connection is established, it
    can interrogate the ident server on the host of the connecting
    client and can theoretically determine the operating system user
    for any given connection.
-->
<quote>身元特定（Identification）プロトコル</quote>についてはRFC 1413で説明されています。 
事実上全てのUnix系のオペレーティングシステムの配布には、デフォルトでTCPポート113を監視するidentサーバが付属しています。 
identサーバの基本的な機能は<quote>どのユーザがポート<replaceable>X</replaceable>からの接続を開始し、自分のポート<replaceable>Y</replaceable>への接続を初期化したのか？</quote>というような質問に答えることです。 
<productname>PostgreSQL</>は物理的な接続が確立された時に<replaceable>X</>と<replaceable>Y</>の両方を認識するので、接続するクライアントのホスト上のidentサーバに応答指令信号を送ることができ、理論的には与えられたどの接続にもオペレーティングシステムユーザを決定できます。
   </para>

   <para>
<!--
    The drawback of this procedure is that it depends on the integrity
    of the client: if the client machine is untrusted or compromised,
    an attacker could run just about any program on port 113 and
    return any user name he chooses. This authentication method is
    therefore only appropriate for closed networks where each client
    machine is under tight control and where the database and system
    administrators operate in close contact. In other words, you must
    trust the machine running the ident server.
    Heed the warning:
-->
この手続きの欠点は、クライアントの正直さに頼るところが大きいということです。 
もしクライアントマシンが信用されない、もしくは危険に晒されている場合、攻撃者はポート113上でほぼどんなプログラムでも実行することができ、どのユーザ名でも好きに選んで返すことができます。 
したがってこの認証方式は、各々のクライアントマシンが厳格な管理下にあり、データベースとシステム管理者が密接に連絡を取り合って動作している、外界から閉ざされたネットワークにのみ適していると言えます。 
言い換えると、identサーバが稼働しているマシンを信用しなければなりません。 
次の警告に注意してください。
    <blockquote>
     <attribution>RFC 1413</attribution>
     <para>
<!--
      The Identification Protocol is not intended as an authorization
      or access control protocol.
-->
      身元特定プロトコルは、認証、あるいはアクセス管理プロトコルには意図されていません。
     </para>
    </blockquote>
   </para>

   <para>
<!--
    Some ident servers have a nonstandard option that causes the returned
    user name to be encrypted, using a key that only the originating
    machine's administrator knows.  This option <emphasis>must not</> be
    used when using the ident server with <productname>PostgreSQL</>,
    since <productname>PostgreSQL</> does not have any way to decrypt the
    returned string to determine the actual user name.
-->
いくつかの身元特定サーバは、ユーザ名を（マシンの管理者のみが知っているキーで）暗号化して返すような非標準のオプションを持っています。
このオプションは、身元特定サーバと<productname>PostgreSQL</>とを一緒に使用する場合には、使用しては<emphasis>いけません</>。
理由は<productname>PostgreSQL</>は、返された文字列を復号化して本当のユーザを決定するための手段を持っていないためです。
   </para>
  </sect2>

  <sect2 id="auth-peer">
<!--
   <title>Peer Authentication</title>
-->
   <title>Peer認証</title>

   <indexterm>
    <primary>peer</primary>
   </indexterm>

   <para>
<!--
    The peer authentication method works by obtaining the client's
    operating system user name from the kernel and using it as the
    allowed database user name (with optional user name mapping). This
    method is only supported on local connections.
-->
peer認証方式はカーネルからクライアント上のオペレーティングシステムのユーザ名を取得し、
それをデータベースユーザ名（オプションのユーザ名マップとともに）として使用することにより動作します。この方法はローカル接続でのみ使用可能です。
   </para>

   <para>
<!--
    The following configuration options are supported for <productname>peer</productname>:
-->
次の設定オプションは<productname>peer</productname>のためにサポートされています。
    <variablelist>
     <varlistentry>
      <term><literal>map</literal></term>
      <listitem>
       <para>
<!--
        Allows for mapping between system and database user names. See
        <xref linkend="auth-username-maps"> for details.
-->
システムとデータベースのユーザ名のマッピングを許可します。詳細は<xref linkend="auth-username-maps">を参照してください。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>

   <para>
<!--
    Peer authentication is only available on operating systems providing
    the <function>getpeereid()</> function, the <symbol>SO_PEERCRED</symbol>
    socket parameter, or similar mechanisms.  Currently that includes
    <systemitem class="osname">Linux</>,
    most flavors of <systemitem class="osname">BSD</> including
    <systemitem class="osname">OS X</>,
    and <systemitem class="osname">Solaris</systemitem>.
-->
Peer認証はオペレーティングシステムが、<function>getpeereid()</>関数、<symbol>SO_PEERCRED</symbol>のソケットパラメータ、もしくは同じような仕組みを提供しているときにのみ使用可能です。現状では、<systemitem class="osname">Linux</>、<systemitem class="osname">OS X</>を含む<systemitem class="osname">BSD</>系、そして<systemitem class="osname">Solaris</systemitem>に含まれています。
   </para>

  </sect2>

  <sect2 id="auth-ldap">
<!--
   <title>LDAP Authentication</title>
-->
   <title>LDAP認証</title>

   <indexterm zone="auth-ldap">
    <primary>LDAP</primary>
   </indexterm>

   <para>
<!--
    This authentication method operates similarly to
    <literal>password</literal> except that it uses LDAP
    as the password verification method. LDAP is used only to validate
    the user name/password pairs. Therefore the user must already
    exist in the database before LDAP can be used for
    authentication.
-->
この認証方式は<literal>password</literal>と似ていますが、パスワード確認にLDAPを使用する点が異なります。
LDAPはユーザの名前とパスワードの組み合わせの検証のみに使用されます。
そのため、LDAPを使用して認証を行うようにする前に、ユーザはデータベースに存在しなければなりません。
   </para>

   <para>
<!--
    LDAP authentication can operate in two modes. In the first mode,
    which we will call the simple bind mode,
    the server will bind to the distinguished name constructed as
    <replaceable>prefix</> <replaceable>username</> <replaceable>suffix</>.
    Typically, the <replaceable>prefix</> parameter is used to specify
    <literal>cn=</>, or <replaceable>DOMAIN</><literal>\</> in an Active
    Directory environment.  <replaceable>suffix</> is used to specify the
    remaining part of the DN in a non-Active Directory environment.
-->
LDAP認証は2つのモードで動作します。1つ目のモードでは、それは単なるバインド・モードを呼び出すものですが、
サーバは<replaceable>prefix</> <replaceable>username</> <replaceable>suffix</>として区別された名前にバインドします。
一般的に、<replaceable>prefix</>パラメータはActive Directory環境での<literal>cn=</>や<replaceable>DOMAIN</><literal>\</>を特定するために使用されます。
<replaceable>suffix</>は、Active Directory環境ではない場合でのDNの残りの部分を特定するために使用されます。
   </para>

   <para>
<!--
    In the second mode, which we will call the search+bind mode,
    the server first binds to the LDAP directory with
    a fixed user name and password, specified with <replaceable>ldapbinddn</>
    and <replaceable>ldapbindpasswd</>, and performs a search for the user trying
    to log in to the database. If no user and password is configured, an
    anonymous bind will be attempted to the directory. The search will be
    performed over the subtree at <replaceable>ldapbasedn</>, and will try to
    do an exact match of the attribute specified in
    <replaceable>ldapsearchattribute</>.
    Once the user has been found in
    this search, the server disconnects and re-binds to the directory as
    this user, using the password specified by the client, to verify that the
    login is correct. This mode is the same as that used by LDAP authentication
    schemes in other software, such as Apache mod_authnz_ldap and pam_ldap.
    This method allows for significantly more flexibility
    in where the user objects are located in the directory, but will cause
    two separate connections to the LDAP server to be made.
-->
2つ目のモードでは、それはsearch/bindモードを呼び出すもので、サーバは最初に<replaceable>ldapbinddn</>と<replaceable>ldapbindpasswd</>で指定された、
固定されたユーザ名とパスワードを使用してLDAPディレクトリにバインドします。
それからデータベースにログインしようとしているユーザを検索します。
もしユーザとパスワードが指定されていなかった場合は、ディレクトリに対して匿名でバインドします。
検索は<replaceable>ldapbasedn</>のサブツリーまで行われ、<replaceable>ldapsearchattribute</>で指定された属性に正確に一致するかどうかまで行われます。
この検索において、一度ユーザが見つかるとサーバは切断して、クライアントで指定されたパスワードを使用してこのユーザとして再度ディレクトリにバインドします。これはそのログインが正しいかどうかを検証するためです。
このモードはApache mod_authnz_ldap および pam_ldapのように他のソフトウェアと同じように、LDAP認証の仕組みで使用されるものと同じです。
この方法は、ユーザオブジェクトがディレクトリに配置されている場合に、かなりの柔軟性があります。
しかし、LDAPサーバへの2つの分離した接続が作成されます。
   </para>

   <para>
<!--
    The following configuration options are used in both modes:
-->
次の設定オプションは両方のモードで使用されます。
    <variablelist>
     <varlistentry>
      <term><literal>ldapserver</literal></term>
      <listitem>
       <para>
<!--
        Names or IP addresses of LDAP servers to connect to. Multiple
        servers may be specified, separated by spaces.
-->
接続するLDAPサーバの名称もしくはIPアドレスの名称。空白で区切ることで複数のサーバを指定できます。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>ldapport</literal></term>
      <listitem>
       <para>
<!--
        Port number on LDAP server to connect to. If no port is specified,
        the LDAP library's default port setting will be used.
-->
LDAPサーバに接続するためのポート番号。もしポートが指定されていない場合は
LDAPライブラリ内のデフォルトポート設定が使用されます。
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>ldaptls</literal></term>
      <listitem>
       <para>
<!--
        Set to 1 to make the connection between PostgreSQL and the
        LDAP server use TLS encryption. Note that this only encrypts
        the traffic to the LDAP server &mdash; the connection to the client
        will still be unencrypted unless SSL is used.
-->
1に設定すると、PostgreSQLとLDAPサーバ間の接続にTLSによる暗号化を使用します。
これはLDAPサーバへのトラフィックのみを暗号化することに注意してください。&mdash;
クライアントへの接続はSSLを使用しない限り暗号化されません。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>

<!--
    The following options are used in simple bind mode only:
-->
以下のオプションは単純バインド・モードのみで使用されます。
    <variablelist>
     <varlistentry>
      <term><literal>ldapprefix</literal></term>
      <listitem>
       <para>
<!--
        String to prepend to the user name when forming the DN to bind as,
        when doing simple bind authentication.
-->
単純なバインド認証を行う場合のDNを生成する際にユーザ名の前に追加する文字列
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>ldapsuffix</literal></term>
      <listitem>
       <para>
<!--
        String to append to the user name when forming the DN to bind as,
        when doing simple bind authentication.
-->
単純なバインド認証を行う場合のDNを生成する際にユーザ名の後に追加する文字列
       </para>
      </listitem>
     </varlistentry>
    </variablelist>

<!--
    The following options are used in search+bind mode only:
-->
以下のオプションはsearch/bindモードのみで使用されます。
    <variablelist>
     <varlistentry>
      <term><literal>ldapbasedn</literal></term>
      <listitem>
       <para>
<!--
        Root DN to begin the search for the user in, when doing search+bind
        authentication.
-->
検索とバインドの認証を行う場合のユーザ名がログインするための検索を始めるためのルートDN
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>ldapbinddn</literal></term>
      <listitem>
       <para>
<!--
        DN of user to bind to the directory with to perform the search when
        doing search+bind authentication.
-->
検索とバインドの認証を行う場合のディレクトリと検索をバインドするためのユーザのDN
       </para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><literal>ldapbindpasswd</literal></term>
      <listitem>
       <para>
<!--
        Password for user to bind to the directory with to perform the search
        when doing search+bind authentication.
-->
検索とバインドの認証を行う場合のディレクトリと検索をバインドするためのユーザのパスワード
       </para>
      </listitem>
      </varlistentry>
      <varlistentry>
       <term><literal>ldapsearchattribute</literal></term>
       <listitem>
        <para>
<!--
         Attribute to match against the user name in the search when doing
         search+bind authentication.  If no attribute is specified, the
         <literal>uid</> attribute will be used.
-->
検索とバインドの認証を行う場合の検索時のユーザ名に対して一致させる属性。
属性が指定されない場合、属性<literal>uid</>が使用されます。
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><literal>ldapurl</literal></term>
       <listitem>
        <para>
<!--
         An RFC 4516 LDAP URL.  This is an alternative way to write some of the
         other LDAP options in a more compact and standard form.  The format is
-->
RFC 4516 LDAP URL。これはその他いくつかのLDAPオプションをより簡潔、かつ一般的な形式で記述する別の方法です。
フォーマットは以下のようになっています。
<synopsis>
ldap://<replaceable>host</replaceable>[:<replaceable>port</replaceable>]/<replaceable>basedn</replaceable>[?[<replaceable>attribute</replaceable>][?[<replaceable>scope</replaceable>]]]
</synopsis>
<!--
         <replaceable>scope</replaceable> must be one
         of <literal>base</literal>, <literal>one</literal>, <literal>sub</literal>,
         typically the latter.  Only one attribute is used, and some other
         components of standard LDAP URLs such as filters and extensions are
         not supported.
-->
<replaceable>scope</replaceable>は<literal>base</literal>、<literal>one</literal>,、<literal>sub</literal>のいずれかでなくてはならず、一般的には最後のものです。
        </para>

        <para>
<!--
         For non-anonymous binds, <literal>ldapbinddn</literal>
         and <literal>ldapbindpasswd</literal> must be specified as separate
         options.
-->
非匿名バインド（non-anonymous bind）に対し、<literal>ldapbinddn</literal>および<literal>ldapbindpasswd</literal>は個別のオプションとして指定されなければなりません。
        </para>

        <para>
<!--
         To use encrypted LDAP connections, the <literal>ldaptls</literal>
         option has to be used in addition to <literal>ldapurl</literal>.
         The <literal>ldaps</literal> URL scheme (direct SSL connection) is not
         supported.
-->
暗号化されたLDAP接続を使用するには、<literal>ldapurl</literal>に加え<literal>ldaptls</literal>オプションを使用しなければなりません。<literal>ldaps</literal> URLの仕組み（直接SSL接続）はサポートされていません。
        </para>

        <para>
<!--
         LDAP URLs are currently only supported with OpenLDAP, not on Windows.
-->
現在の所、LDAP URLはWindows上ではなく、OpenLDAPのみでサポートされています。
        </para>
       </listitem>
      </varlistentry>
    </variablelist>
   </para>

   <para>
<!--
    It is an error to mix configuration options for simple bind with options
    for search+bind.
-->
seartch/bindオプションと単純バインドに対するオプションの設定を混在させるのはエラーです。
   </para>

   <para>
<!--
    Here is an example for a simple-bind LDAP configuration:
-->
以下に単純バインドLDAP設定の例を示します。
<programlisting>
host ... ldap ldapserver=ldap.example.net ldapprefix="cn=" ldapsuffix=", dc=example, dc=net"
</programlisting>
<!--
    When a connection to the database server as database
    user <literal>someuser</literal> is requested, PostgreSQL will attempt to
    bind to the LDAP server using the DN <literal>cn=someuser, dc=example,
    dc=net</literal> and the password provided by the client.  If that connection
    succeeds, the database access is granted.
-->
データベースのユーザ、<literal>someuser</literal>からデータベースサーバに接続を要求された場合、PostgreSQLはDN <literal>cn=someuser, dc=example, dc=net</literal>およびクライアントから提供されたパスワードを用いてLDAPサーバにバインドを試みます。
その接続が成功すればデータベースへのアクセスが認められます。
   </para>

   <para>
<!--
    Here is an example for a search+bind configuration:
-->
以下はsearch/bind設定の例です。
<programlisting>
host ... ldap ldapserver=ldap.example.net ldapbasedn="dc=example, dc=net" ldapsearchattribute=uid
</programlisting>
<!--
    When a connection to the database server as database
    user <literal>someuser</literal> is requested, PostgreSQL will attempt to
    bind anonymously (since <literal>ldapbinddn</literal> was not specified) to
    the LDAP server, perform a search for <literal>(uid=someuser)</literal>
    under the specified base DN.  If an entry is found, it will then attempt to
    bind using that found information and the password supplied by the client.
    If that second connection succeeds, the database access is granted.
-->
データベースユーザ<literal>someuser</literal>としてデータベースに接続するとき、PostgreSQLは（<literal>ldapbinddn</literal>が指定されていないので）匿名的にバインドを試み、指定されたベースDNの基で<literal>(uid=someuser)</literal>の検索を行います。あるエントリが見つかると、見つかった情報とクライアントから与えられたパスワードを用いて、その結果バインドを試みます。その二番目の接続が成功するとデータベースアクセスが認められます。
   </para>

   <para>
<!--
    Here is the same search+bind configuration written as a URL:
-->
URLとして記述した同じsearch/bind設定の例です。
<programlisting>
host ... ldap lapurl="ldap://ldap.example.net/dc=example,dc=net?uid?sub"
</programlisting>
<!--
    Some other software that supports authentication against LDAP uses the
    same URL format, so it will be easier to share the configuration.
-->
LDAPに対し認証をサポートする幾つかの他のソフトウェアは同じURLフォーマットを使用します。
従って、設定をより簡易に共有することができます。
   </para>

   <tip>
    <para>
<!--
     Since LDAP often uses commas and spaces to separate the different
     parts of a DN, it is often necessary to use double-quoted parameter
     values when configuring LDAP options, as shown in the examples.
-->
LDAPはDNの異なる構成要素を区別するため往々にしてコンマとスペースを使用します。
例で示されたように、LDAPオプションを設定する場合、二重引用符で括られたパラメータ値を使用することが必須となることがしばしば必須となります。
    </para>
   </tip>

  </sect2>

  <sect2 id="auth-radius">
<!--
   <title>RADIUS Authentication</title>
-->
   <title>RADIUS認証</title>

   <indexterm zone="auth-radius">
    <primary>RADIUS</primary>
   </indexterm>

   <para>
<!--
    This authentication method operates similarly to
    <literal>password</literal> except that it uses RADIUS
    as the password verification method. RADIUS is used only to validate
    the user name/password pairs. Therefore the user must already
    exist in the database before RADIUS can be used for
    authentication.
-->
この認証方法は、RADIUSをパスワード検証として使用するという点を除いて<literal>password</literal>と似た動作をします。
RADIUSはユーザ名/パスワードの組のみを検証するために使用されます。
よってユーザはRADIUSが認証に使用される以前にデータベースにすでに存在していなければいけません。
   </para>

   <para>
<!--
    When using RADIUS authentication, an Access Request message will be sent
    to the configured RADIUS server. This request will be of type
    <literal>Authenticate Only</literal>, and include parameters for
    <literal>user name</>, <literal>password</> (encrypted) and
    <literal>NAS Identifier</>. The request will be encrypted using
    a secret shared with the server. The RADIUS server will respond to
    this server with either <literal>Access Accept</> or
    <literal>Access Reject</>. There is no support for RADIUS accounting.
-->
RADIUS認証を使用する場合に、設定されたRADIUSサーバにアクセスリクエストメッセージが送信されます。
このリクエストは<literal>Authenticate Only</literal>の形式になり、<literal>ユーザ名</>, （暗号化された）<literal>パスワード</>、<literal>NAS識別子</>を含んでいます。
リクエストはサーバと共有している秘密を用いて暗号化されます。
RADIUSサーバは、このサーバに対して<literal>Access Accept</>もしくは<literal>Access Reject</>を返します。
RADIUSアカウントのサポートはありません。
   </para>

   <para>
<!--
    The following configuration options are supported for RADIUS:
-->
RADIUSのために次の設定オプションがサポートされています。
     <variablelist>
      <varlistentry>
       <term><literal>radiusserver</literal></term>
       <listitem>
        <para>
<!--
         The name or IP address of the RADIUS server to connect to.
         This parameter is required.
-->
接続するRADIUSサーバの名称もしくはIPアドレス。このパラメータは必要です。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><literal>radiussecret</literal></term>
       <listitem>
        <para>
<!--
         The shared secret used when talking securely to the RADIUS
         server. This must have exactly the same value on the PostgreSQL
         and RADIUS servers. It is recommended that this be a string of
         at least 16 characters. This parameter is required.
-->
RADIUSサーバとのやり取りに使用される共有の秘密。これはPostgreSQLとRADIUSサーバにおいて
厳密に同じ値にする必要があります。少なくとも16文字以上の文字列が推奨されます。このパラメータは必要です。
         <note>
         <para>
<!--
          The encryption vector used will only be cryptographically
          strong if <productname>PostgreSQL</> is built with support for
          <productname>OpenSSL</>. In other cases, the transmission to the
          RADIUS server should only be considered obfuscated, not secured, and
          external security measures should be applied if necessary.
-->
使用されている暗号化ベクターは<productname>PostgreSQL</>が<productname>OpenSSL</>をサポートするよう構築している場合にのみ暗号論的に強力です。
他の場合にはRADIUSサーバへの伝送は難読化されているだけで、安全ではなく必要な場合は外部のセキュリティ方法を適用すべきです。
         </para>
         </note>
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><literal>radiusport</literal></term>
       <listitem>
        <para>
<!--
         The port number on the RADIUS server to connect to. If no port
         is specified, the default port <literal>1812</> will be used.
-->
接続するRADIUSサーバのポート番号。もしポート番号が指定されていない場合は、デフォルトポートである<literal>1812</>が使用されます。
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term><literal>radiusidentifier</literal></term>
       <listitem>
        <para>
<!--
         The string used as <literal>NAS Identifier</> in the RADIUS
         requests. This parameter can be used as a second parameter
         identifying for example which database user the user is attempting
         to authenticate as, which can be used for policy matching on
         the RADIUS server. If no identifier is specified, the default
         <literal>postgresql</> will be used.
-->
RADIUSリクエスト内で<literal>NAS Identifier</>として使用されている文字列。
ユーザがどのデータベースユーザに対して認証しようとしているか、RADIUSサーバにおいてポリシーを一致させるために何が使用されるか、
を識別するために、このパラメータは2番目のパラメータとして使用されます。
もし識別子が指定されていない場合は、デフォルトの<literal>postgresql</>が使用されます。
        </para>
       </listitem>
      </varlistentry>

     </variablelist>
   </para>
  </sect2>

  <sect2 id="auth-cert">
<!--
   <title>Certificate Authentication</title>
-->
   <title>証明書認証</title>

   <indexterm zone="auth-cert">
    <primary>Certificate</primary>
   </indexterm>

   <para>
<!--
    This authentication method uses SSL client certificates to perform
    authentication. It is therefore only available for SSL connections.
    When using this authentication method, the server will require that
    the client provide a valid certificate. No password prompt will be sent
    to the client. The <literal>cn</literal> (Common Name) attribute of the
    certificate
    will be compared to the requested database user name, and if they match
    the login will be allowed.  User name mapping can be used to allow
    <literal>cn</literal> to be different from the database user name.
-->
この認証方法は、認証のためにSSLクライアント証明書を使用します。
よってこの方法は、SSL接続を使用します。
この認証方法を使用する際は、サーバはクライアントが有効な証明書を提供することを要求します。
パスワードのプロンプトはクライアントに送信されません。
証明書の<literal>cn</literal>（Common Name）属性は、要求されたデータベースユーザ名と比較されます。
もしそれらが一致した場合はログインが許可されます。ユーザ名マッピングは、<literal>cn</literal>がデータベースユーザ名と異なるものであることを許可するために使用されます。
   </para>

   <para>
<!--
    The following configuration options are supported for SSL certificate
    authentication:
-->
次の設定オプションはSSL証明書認証のためにサポートされています。
    <variablelist>
     <varlistentry>
      <term><literal>map</literal></term>
      <listitem>
       <para>
<!--
        Allows for mapping between system and database user names. See
        <xref linkend="auth-username-maps"> for details.
-->
システムとデータベースユーザ名の間のマッピングを許可します。
詳細は<xref linkend="auth-username-maps">を参照してください。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>
  </sect2>

  <sect2 id="auth-pam">
<!--
   <title>PAM Authentication</title>
-->
   <title>PAM認証</title>

   <indexterm zone="auth-pam">
    <primary>PAM</primary>
   </indexterm>

   <para>
<!--
    This authentication method operates similarly to
    <literal>password</literal> except that it uses PAM (Pluggable
    Authentication Modules) as the authentication mechanism. The
    default PAM service name is <literal>postgresql</literal>.
    PAM is used only to validate user name/password pairs.
    Therefore the user must already exist in the database before PAM
    can be used for authentication.  For more information about
    PAM, please read the <ulink url="http://www.kernel.org/pub/linux/libs/pam/">
    <productname>Linux-PAM</> Page</ulink>.
-->
この認証方式は認証機構としてPAM（Pluggable Authentication Modules）を使用することを除いて<firstterm>password</firstterm>のように動作します。 
デフォルトのPAMサービス名は<literal>postgresql</literal>です。 
PAMはユーザ名/パスワードの組を承認するためだけに使用されます。
PAMについての詳細は<ulink url="http://www.kernel.org/pub/linux/libs/pam/"><productname>Linux-PAM</>ページ</ulink>を読んでください。
   </para>

   <para>
<!--
    The following configuration options are supported for PAM:
-->
次の設定オプションはPAMのためにサポートされています。
    <variablelist>
     <varlistentry>
      <term><literal>pamservice</literal></term>
      <listitem>
       <para>
<!--
        PAM service name.
-->
PAMサービス名。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>

   <note>
    <para>
<!--
     If PAM is set up to read <filename>/etc/shadow</>, authentication
     will fail because the PostgreSQL server is started by a non-root
     user.  However, this is not an issue when PAM is configured to use
     LDAP or other authentication methods.
-->
PAMが<filename>/etc/shadow</>を読み取るように設定されている場合は、PostgreSQLがルートユーザで起動されていないため、認証は失敗するでしょう。
しかしPAMがLDAPや他の認証方法を使用するように設定されている場合は、これは問題ではありません。
    </para>
   </note>
  </sect2>
 </sect1>

  <sect1 id="client-authentication-problems">
<!--
   <title>Authentication Problems</title>
-->
   <title>認証における問題点</title>

   <para>
<!--
    Authentication failures and related problems generally
    manifest themselves through error messages like the following:
-->
本来の認証失敗とそれに関連した問題は、一般的に以下のようなエラーメッセージを通して明示されます。
   </para>

   <para>
<programlisting>
FATAL:  no pg_hba.conf entry for host "123.123.123.123", user "andym", database "testdb"
</programlisting>
<!--
    This is what you are most likely to get if you succeed in contacting
    the server, but it does not want to talk to you. As the message
    suggests, the server refused the connection request because it found
    no matching entry in its <filename>pg_hba.conf</filename>
    configuration file.
-->
たいがい、サーバとの接触に成功はしたものの、サーバが通信を拒否した場合です。 
メッセージが指摘するようにサーバは接続要求を拒否しました。 なぜなら<filename>pg_hba.conf</filename>設定ファイルに一致する項目を見つけることができなかったからです。
   </para>

   <para>
<programlisting>
FATAL:  password authentication failed for user "andym"
</programlisting>
<!--
    Messages like this indicate that you contacted the server, and it is
    willing to talk to you, but not until you pass the authorization
    method specified in the <filename>pg_hba.conf</filename> file. Check
    the password you are providing, or check your Kerberos or ident
    software if the complaint mentions one of those authentication
    types.
-->
この種のメッセージは、サーバと接触し、サーバも通信することを許可したが、<filename>pg_hba.conf</filename>ファイルの中で指定された認証方式に合格していないことを表します。 
入力したパスワードを確認するか、もしエラーがKerberos、ident認証型のいずれかを指摘している場合はKerberosあるいはidentソフトウェアを確認してください。
   </para>

   <para>
<programlisting>
FATAL:  user "andym" does not exist
</programlisting>
<!--
    The indicated database user name was not found.
-->
与えられたデータベースユーザ名は見つかりませんでした。
   </para>

   <para>
<programlisting>
FATAL:  database "testdb" does not exist
</programlisting>
<!--
    The database you are trying to connect to does not exist. Note that
    if you do not specify a database name, it defaults to the database
    user name, which might or might not be the right thing.
-->
接続しようとしているデータベースは存在しません。 
データベース名を指定しなければ、それが望むと望まざるとにかかわらず、データベースユーザ名がデフォルトとなることに注意してください。
   </para>

   <tip>
   <para>
<!--
    The server log might contain more information about an
    authentication failure than is reported to the client. If you are
    confused about the reason for a failure, check the server log.
-->
クライアントに報告される以上により多くの情報がサーバログに残ります。 
失敗した原因についてよくわからなければサーバのログを見てください。
   </para>
   </tip>
  </sect1>

 </chapter>
