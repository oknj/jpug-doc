<!-- doc/src/sgml/bgworker.sgml -->

<chapter id="bgworker">
<!--
 <title>Background Worker Processes</title>
-->
 <title>バックグラウンドワーカープロセス</title>

 <indexterm zone="bgworker">
<!--
  <primary>Background workers</primary>
-->
  <primary>バックグラウンドワーカー</primary>
 </indexterm>

 <para>
<!--
  PostgreSQL can be extended to run user-supplied code in separate processes.
  Such processes are started, stopped and monitored by <command>postgres</command>,
  which permits them to have a lifetime closely linked to the server's status.
  These processes have the option to attach to <productname>PostgreSQL</>'s
  shared memory area and to connect to databases internally; they can also run
  multiple transactions serially, just like a regular client-connected server
  process.  Also, by linking to <application>libpq</> they can connect to the
  server and behave like a regular client application.
-->
PostgreSQLはユーザ提供のコードを別のプロセスとして実行できるように拡張することができます。
このプロセスは<command>postgres</command>によって起動、終了、監視され、サーバの状態に密接にリンクしています。
これらのプロセスは<productname>PostgreSQL</>の共有メモリ領域にアタッチしたり、データベースの内部に接続するオプションを持ちます。これらはまた、通常のクライアントに接続された実際のサーバプロセスのように複数のトランザクションを連続して実行することができます。また、アプリケーションは<application>libpq</>とリンクすることにより通常のクライアントアプリケーションのようにサーバに接続して動作することができます。
 </para>

 <warning>
  <para>
<!--
   There are considerable robustness and security risks in using background
   worker processes because, being written in the <literal>C</> language,
   they have unrestricted access to data.  Administrators wishing to enable
   modules that include background worker process should exercise extreme
   caution.  Only carefully audited modules should be permitted to run
   background worker processes.
-->
バックグラウンドワーカーを使うにあたっては、堅牢性とセキュリティリスクを考慮しなくてはなりません。なぜならば、<literal>C</>言語で書かれており、データへのアクセスが制限されていないためです。バックグラウンドワーカープロセスを有効にしたいと思っている管理者は厳重に注意して実践すべきです。注意深く検査されたモジュールだけが、バックグラウンドワーカープロセスの実行を許されるべきです。
  </para>
 </warning>

 <para>
<!--
  Background workers can be initialized at the time that
  <productname>PostgreSQL</> is started by including the module name in
  <varname>shared_preload_libraries</>.  A module wishing to run a background
  worker can register it by calling
  <function>RegisterBackgroundWorker(<type>BackgroundWorker *worker</type>)</function>
  from its <function>_PG_init()</>.  Background workers can also be started
  after the system is up and running by calling the function
  <function>RegisterDynamicBackgroundWorker(<type>BackgroundWorker
  *worker, BackgroundWorkerHandle **handle</type>)</function>.  Unlike
  <function>RegisterBackgroundWorker</>, which can only be called from within
  the postmaster, <function>RegisterDynamicBackgroundWorker</function> must be
  called from a regular backend.
-->
バックグラウンドワーカーは<productname>PostgreSQL</>スタート時にモジュールを<varname>shared_preload_libraries</>に記すことによって実行できます。バックグラウンドワーカーとして実行したいモジュールは<function>RegisterBackgroundWorker(<type>BackgroundWorker *worker</type>)</function>を<function>_PG_init()</>から呼び出して登録する必要があります。バックグラウンドワーカーはシステム起動後も<function>RegisterDynamicBackgroundWorker(<type>BackgroundWorker *worker, BackgroundWorkerHandle **handle</type>)</function>を呼び出すことによって実行することができます。<function>RegisterBackgroundWorker</>とは異なり、postmasterからのみ呼び出すことができます。<function>RegisterDynamicBackgroundWorker</function>は通常のバックエンドから呼び出す必要があります。
 </para>

 <para>
<!--
  The structure <structname>BackgroundWorker</structname> is defined thus:
-->
その構造、<structname>BackgroundWorker</structname>は以下のように定義されます。
<programlisting>
typedef void (*bgworker_main_type)(Datum main_arg);
typedef struct BackgroundWorker
{
    char        bgw_name[BGW_MAXLEN];
    int         bgw_flags;
    BgWorkerStartTime bgw_start_time;
<!--
    int         bgw_restart_time;       /* in seconds, or BGW_NEVER_RESTART */
-->
    int         bgw_restart_time;       /* 秒単位、もしくは、BGW_NEVER_RESTART */
    bgworker_main_type bgw_main;
<!--
    char        bgw_library_name[BGW_MAXLEN];   /* only if bgw_main is NULL */
    char        bgw_function_name[BGW_MAXLEN];  /* only if bgw_main is NULL */
-->
    char        bgw_library_name[BGW_MAXLEN];   /* bgw_mainがNULLの場合のみ */
    char        bgw_function_name[BGW_MAXLEN];  /* bgw_mainがNULLの場合のみ */
    Datum       bgw_main_arg;
    int         bgw_notify_pid;
} BackgroundWorker;
</programlisting>
  </para>

  <para>
<!--
   <structfield>bgw_name</> is a string to be used in log messages, process
   listings and similar contexts.
-->
<structfield>bgw_name</>は、ログメッセージ、プロセス一覧等で使用される文字列です。
  </para>

  <para>
<!--
   <structfield>bgw_flags</> is a bitwise-or'd bit mask indicating the
   capabilities that the module wants.  Possible values are
   <literal>BGWORKER_SHMEM_ACCESS</literal> (requesting shared memory access)
   and <literal>BGWORKER_BACKEND_DATABASE_CONNECTION</literal> (requesting the
   ability to establish a database connection, through which it can later run
   transactions and queries). A background worker using
   <literal>BGWORKER_BACKEND_DATABASE_CONNECTION</literal> to connect to
   a database must also attach shared memory using
   <literal>BGWORKER_SHMEM_ACCESS</literal>, or worker start-up will fail.
-->
<structfield>bgw_flags</>は、モジュールが要求する機能をOR演算したビットマスクです。可能な値は<literal>BGWORKER_SHMEM_ACCESS</literal> (共有メモリへのアクセスを要求)と<literal>BGWORKER_BACKEND_DATABASE_CONNECTION</literal>(データベース接続を確立し、その後トランザクションやクエリの実行可能)です。データベースに接続するために<literal>BGWORKER_BACKEND_DATABASE_CONNECTION</literal>を使っているバックグラウンドワーカーもまた、<literal>BGWORKER_SHMEM_ACCESS</literal>を使って共有メモリに接続しなければなりません、さもないとワーカーの起動に失敗します。
  </para>

  <para>
<!--
   <structfield>bgw_start_time</structfield> is the server state during which
   <command>postgres</> should start the process; it can be one of
   <literal>BgWorkerStart_PostmasterStart</> (start as soon as
   <command>postgres</> itself has finished its own initialization; processes
   requesting this are not eligible for database connections),
   <literal>BgWorkerStart_ConsistentState</> (start as soon as a consistent state
   has been reached in a hot standby, allowing processes to connect to
   databases and run read-only queries), and
   <literal>BgWorkerStart_RecoveryFinished</> (start as soon as the system has
   entered normal read-write state).  Note the last two values are equivalent
   in a server that's not a hot standby.  Note that this setting only indicates
   when the processes are to be started; they do not stop when a different state
   is reached.
-->
<structfield>bgw_start_time</structfield>は、<command>postgres</>がプロセスを起動するべきタイミングを指定します。そのタイミングは、<literal>BgWorkerStart_PostmasterStart</> (<command>postgres</>自身が初期化を終えるとすぐに起動します。これを要求するプロセスはデータベース接続に望ましいものではありません。)、<literal>BgWorkerStart_ConsistentState</> (ホットスタンバイで一貫性のある状態に到達すると、つまりデータベースに接続して参照のみのクエリを許可する状態になると起動します。)、<literal>BgWorkerStart_RecoveryFinished</> (システムが参照/更新クエリを実行すると起動します。)のうちの一つです。この設定はいつプロセスが起動されるかを示すだけであることに注意してください。これらのプロセスは、違う状態になったときに停止するわけではありません。
  </para>

  <para>
<!--
   <structfield>bgw_restart_time</structfield> is the interval, in seconds, that
   <command>postgres</command> should wait before restarting the process, in
   case it crashes.  It can be any positive value,
   or <literal>BGW_NEVER_RESTART</literal>, indicating not to restart the
   process in case of a crash.
-->
<structfield>bgw_restart_time</structfield>は、プロセスがクラッシュした場合に<command>postgres</command>がそのプロセスを再起動するために待つべき間隔を秒単位で指定します。これは任意の正の値、またはクラッシュしても再起動しない場合は<literal>BGW_NEVER_RESTART</literal>を指定します。
  </para>

  <para>
<!--
   <structfield>bgw_main</structfield> is a pointer to the function to run when
   the process is started.  This function must take a single argument of type
   <type>Datum</> and return <type>void</>.
   <structfield>bgw_main_arg</structfield> will be passed to it as its only
   argument.  Note that the global variable <literal>MyBgworkerEntry</literal>
   points to a copy of the <structname>BackgroundWorker</structname> structure
   passed at registration time. <structfield>bgw_main</structfield> may be
   NULL; in that case, <structfield>bgw_library_name</structfield> and
   <structfield>bgw_function_name</structfield> will be used to determine
   the entry point.  This is useful for background workers launched after
   postmaster startup, where the postmaster does not have the requisite
   library loaded.
-->
<structfield>bgw_main</structfield>は、プロセスが起動されたときに実行される関数へのポインタです。この関数は<type>Datum</>型の引数を一つとり、<type>void</>を返さなければなりません。
<structfield>bgw_main_arg</structfield>は、唯一の引数として渡されます。グローバル変数である<literal>MyBgworkerEntry</literal>は、登録時に渡される<structname>BackgroundWorker</structname>構造体のコピーを指すことに注意してください。<structfield>bgw_main</structfield>はNULLであってもよく、その場合は<structfield>bgw_library_name</structfield>と<structfield>bgw_function_name</structfield>がエントリーポイントを決定するために使用されます。これはpostmater起動時にはpostmasterが必要なライブラリがロードされていないときにバックグラウンドワーカーを後で立ち上げるときに有用です。
  </para>

  <para>
<!--
   <structfield>bgw_library_name</structfield> is the name of a library in
   which the initial entry point for the background worker should be sought.
   It is ignored unless <structfield>bgw_main</structfield> is NULL.
   But if <structfield>bgw_main</structfield> is NULL, then the named library
   will be dynamically loaded by the worker process and
   <structfield>bgw_function_name</structfield> will be used to identify
   the function to be called.
-->
<structfield>bgw_library_name</structfield>はバックグラウンドワーカーの初期エントリーポイントのためのライブラリ名です。<structfield>bgw_main</structfield>がNULLでない限りそれは無視されます。<structfield>bgw_main</structfield>がNULLの場合、ワーカープロセスにより動的にロードされるライブラリ名です。<structfield>bgw_function_name</structfield>は呼び出される関数名を識別するために使用されます。
  </para>

  <para>
<!--
   <structfield>bgw_function_name</structfield> is the name of a function in
   a dynamically loaded library which should be used as the initial entry point
   for a new background worker.  It is ignored unless
   <structfield>bgw_main</structfield> is NULL.
-->
<structfield>bgw_function_name</structfield>は新しいバックグラウンドワーカーから動的にロードされるときに初期エントリーポイントの関数名です。それは<structfield>bgw_main</structfield>がNULLのとき無視されます。
  </para>

  <para>
<!--
   <structfield>bgw_notify_pid</structfield> is the PID of a PostgreSQL
   backend process to which the postmaster should send <literal>SIGUSR1</>
   when the process is started or exits.  It should be 0 for workers registered
   at postmaster startup time, or when the backend registering the worker does
   not wish to wait for the worker to start up.  Otherwise, it should be
   initialized to <literal>MyProcPid</>.
-->
<structfield>bgw_notify_pid</structfield>はプロセスの開始時と終了時にpostmasterにSIGUSR1を送信するPostgreSQLバックエンドプロセスのPIDです。それはpostmasterの起動時間、またはワーカーが起動するのを待ちたくない場合に0である必要があります。それ以外の場合は、<literal>MyProcPid</>で初期化すべきです。
  </para>

<!--
  <para>Once running, the process can connect to a database by calling
   <function>BackgroundWorkerInitializeConnection(<parameter>char *dbname</parameter>, <parameter>char *username</parameter>)</function>.
   This allows the process to run transactions and queries using the
   <literal>SPI</literal> interface.  If <varname>dbname</> is NULL,
   the session is not connected to any particular database, but shared catalogs
   can be accessed.  If <varname>username</> is NULL, the process will run as
   the superuser created during <command>initdb</>.
   BackgroundWorkerInitializeConnection can only be called once per background
   process, it is not possible to switch databases.
  </para>
-->
  <para>
ひとたび実行すると、このプロセスは<function>BackgroundWorkerInitializeConnection(<parameter>char *dbname</parameter>, <parameter>char *username</parameter>)</function>を呼び出すことによって、データベースに接続できます。
これはプロセスに<literal>SPI</literal>を使用してのトランザクションとクエリの実行を許します。もし、<varname>dbname</> がNULLであった場合、そのセッションは特定のデータベースに接続しません。しかし、共有カタログにはアクセスできます。もし、<varname>username</>がNULLの場合、そのプロセスは<command>initdb</>時に作成されたスーパーユーザーとして実行されます。
BackgroundWorkerInitializeConnectionは、バックグラウンドワーカーごとに一度のみ呼ぶことができ、これはデータベースを切り替えることができません。
  </para>

  <para>
<!--
   Signals are initially blocked when control reaches the
   <structfield>bgw_main</> function, and must be unblocked by it; this is to
   allow the process to customize its signal handlers, if necessary.
   Signals can be unblocked in the new process by calling
   <function>BackgroundWorkerUnblockSignals</> and blocked by calling
   <function>BackgroundWorkerBlockSignals</>.
-->
制御が<structfield>bgw_main</>関数に達したとき、シグナルはまずブロックされます。このブロックは解除されなければなりません。このことは、必要があれば、プロセスにそのシグナルハンドラをカスタマイズできることを意味します。シグナルは新しいプロセスで<function>BackgroundWorkerUnblockSignals</>を呼び出すことにより、解除でき、<function>BackgroundWorkerBlockSignals</>を呼び出すことでブロックできます。
  </para>

  <para>
<!--
   If <structfield>bgw_restart_time</structfield> for a background worker is
   configured as <literal>BGW_NEVER_RESTART</>, or if it exits with an exit
   code of 0 or is terminated by <function>TerminateBackgroundWorker</>,
   it will be automatically unregistered by the postmaster on exit.
   Otherwise, it will be restarted after the time period configured via
   <structfield>bgw_restart_time</>, or immediately if the postmaster
   reinitializes the cluster due to a backend failure.  Backends which need
   to suspend execution only temporarily should use an interruptible sleep
   rather than exiting; this can be achieved by calling
   <function>WaitLatch()</function>. Make sure the
   <literal>WL_POSTMASTER_DEATH</> flag is set when calling that function, and
   verify the return code for a prompt exit in the emergency case that
   <command>postgres</> itself has terminated.
-->
 バックグラウンドワーカーは<structfield>bgw_restart_time</structfield>が<literal>BGW_NEVER_RESTART</>に設定されている場合、又は<function>TerminateBackgroundWorker</>によって0で終了した場合、postmasterに自動的に登録が解除されて終了します。
 それ以外の場合、<structfield>bgw_restart_time</>で設定された時間の後に再起動します。又は、バックエンドの障害のために posmasterが最初期化された場合はすぐに再起動します。
バックグラウンドワーカーが何もすることがないときは、割り込み可能な休止状態にすることを考慮しないといけません。これは<function>WaitLatch()</function>を呼び出すことによって可能になります。
この関数を呼んだときに、<literal>WL_POSTMASTER_DEATH</>フラグが設定され、<command>postgres</>自身が終了する緊急事態には、リターンコードを確認するようにしてください。
  </para>

  <para>
<!--
   When a background worker is registered using the
   <function>RegisterDynamicBackgroundWorker</function> function, it is
   possible for the backend performing the registration to obtain information
   regarding the status of the worker.  Backends wishing to do this should
   pass the address of a <type>BackgroundWorkerHandle *</type> as the second
   argument to <function>RegisterDynamicBackgroundWorker</function>.  If the
   worker is successfully registered, this pointer will be initialized with an
   opaque handle that can subsequently be passed to
   <function>GetBackgroundWorkerPid(<parameter>BackgroundWorkerHandle *</parameter>, <parameter>pid_t *</parameter>)</function> or
   <function>TerminateBackgroundWorker(<parameter>BackgroundWorkerHandle *</parameter>)</function>.
   <function>GetBackgroundWorkerPid</> can be used to poll the status of the
   worker: a return value of <literal>BGWH_NOT_YET_STARTED</> indicates that
   the worker has not yet been started by the postmaster;
   <literal>BGWH_STOPPED</literal> indicates that it has been started but is
   no longer running; and <literal>BGWH_STARTED</literal> indicates that it is
   currently running.  In this last case, the PID will also be returned via the
   second argument.
   <function>TerminateBackgroundWorker</> causes the postmaster to send
   <literal>SIGTERM</> to the worker if it is running, and to unregister it
   as soon as it is not.
-->
バックグラウンドワーカーを<function>RegisterDynamicBackgroundWorker</function>関数により登録している場合、登録を実行するバックエンドはワーカーの状態に関する情報を取得することが可能です。取得したい場合は<function>RegisterDynamicBackgroundWorker</function>に<type>BackgroundWorkerHandle *</type>のアドレスを渡す必要があります。もし登録に成功した場合、<function>GetBackgroundWorkerPid(<parameter>BackgroundWorkerHandle *</parameter>, <parameter>pid_t *</parameter>)</function>、または<function>TerminateBackgroundWorker(<parameter>BackgroundWorkerHandle *</parameter>)</function>のポインタは初期化されます。
 <function>GetBackgroundWorkerPid</>はワーカーの状態を監視することができます。以下の返り値が得られます。 <literal>BGWH_NOT_YET_STARTED</> ワーカーはまだpostmasterにより開始されていない。<literal>BGWH_STOPPED</literal>開始されたが、もはや実行されていない。 <literal>BGWH_STARTED</literal>実行中です。この最後のケースでは、PIDは、第二の引数を介して返されます。
<function>TerminateBackgroundWorker</>はワーカーが実行していた場合postmasterがワーカーに<literal>SIGTERM</>を送信し、まもなく登録を解除します。
  </para>

  <para>
<!--
   In some cases, a process which registers a background worker may wish to
   wait for the worker to start up.  This can be accomplished by initializing
   <structfield>bgw_notify_pid</structfield> to <literal>MyProcPid</> and
   then passing the <type>BackgroundWorkerHandle *</type> obtained at
   registration time to
   <function>WaitForBackgroundWorkerStartup(<parameter>BackgroundWorkerHandle
   *handle</parameter>, <parameter>pid_t *</parameter>)</function> function.
   This function will block until the postmaster has attempted to start the
   background worker, or until the postmaster dies.  If the background runner
   is running, the return value will <literal>BGWH_STARTED</>, and
   the PID will be written to the provided address.  Otherwise, the return
   value will be <literal>BGWH_STOPPED</literal> or
   <literal>BGWH_POSTMASTER_DIED</literal>.
-->
 場合によっては、バックグラウンドワーカーを登録する処理は、ワーカーが起動するのを待つことをお勧めします。これは<structfield>bgw_notify_pid</structfield>から<literal>MyProcPid</>で初期化し登録時に得られた<type>BackgroundWorkerHandle *</type>を使用して<function>WaitForBackgroundWorkerStartup(<parameter>BackgroundWorkerHandle *handle</parameter>, <parameter>pid_t *</parameter>)</function>関数を呼び出すことで実現します。
 postmasterがバックグラウンドワーカーを開始しようと試みたか、postmasterが死ぬまで、この関数はブロックします。バックグラウンドランナーが実行されている場合、戻り値は<literal>BGWH_STARTED</>、およびPIDが提供されたアドレスに書き込まれます。そうでない場合、戻り値は<literal>BGWH_STOPPED</literal>または<literal>BGWH_POSTMASTER_DIED</literal>になります。
  </para>

  <para>
<!--
   The <filename>worker_spi</> contrib module contains a working example,
   which demonstrates some useful techniques.
-->
バックグラウンドワーカーの例として、contribに<filename>worker_spi</>というモジュールがあります。これはいくつかの有用な技術を示しています。
  </para>

  <para>
<!--
   The maximum number of registered background workers is limited by
   <xref linkend="guc-max-worker-processes">.
-->
登録できるバックグラウンドワーカーの数は<xref linkend="guc-max-worker-processes">によって制限されています。
  </para>
</chapter>
