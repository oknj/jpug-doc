<!-- doc/src/sgml/catalogs.sgml -->
<!--
 Documentation of the system catalogs, directed toward PostgreSQL developers
 -->

<chapter id="catalogs">
<!--
 <title>System Catalogs</title>
-->
 <title>システムカタログ</title>

  <para>
<!--
   The system catalogs are the place where a relational database
   management system stores schema metadata, such as information about
   tables and columns, and internal bookkeeping information.
   <productname>PostgreSQL</productname>'s system catalogs are regular
   tables.  You can drop and recreate the tables, add columns, insert
   and update values, and severely mess up your system that way.
   Normally, one should not change the system catalogs by hand, there
   are always SQL commands to do that.  (For example, <command>CREATE
   DATABASE</command> inserts a row into the
   <structname>pg_database</structname> catalog &mdash; and actually
   creates the database on disk.)  There are some exceptions for
   particularly esoteric operations, such as adding index access methods.
-->
システムカタログとは、リレーショナルデータベース管理システムがテーブルや列の情報などのスキーマメタデータと内部的な情報を格納する場所です。
<productname>PostgreSQL</productname>のシステムカタログは通常のテーブルです。
テーブルを削除したり再作成したり、列の追加および値の挿入や更新をすることは可能ですが、これらの操作でデータベースシステムを台なしにしてしまう可能性もあります。
通常手作業でシステムカタログを変更してはいけません。
その代わりとしてSQLコマンドを使用します
（例えば<command>CREATE DATABASE</command>により<structname>pg_database</structname>カタログに1行挿入し、ディスク上にデータベースを実際に作成します）。
しかしインデックスアクセスメソッドを追加するような特に難易度の高い操作の時などの例外があります。

  </para>

 <sect1 id="catalogs-overview">
<!--
  <title>Overview</title>
-->
  <title>概要</title>

  <para>
<!--
   <xref linkend="catalog-table"> lists the system catalogs.
   More detailed documentation of each catalog follows below.
-->
<xref linkend="catalog-table">にシステムカタログを列挙します。
以降システムカタログについてより詳細を説明します。
  </para>

  <para>
<!--
   Most system catalogs are copied from the template database during
   database creation and are thereafter database-specific. A few
   catalogs are physically shared across all databases in a cluster;
   these are noted in the descriptions of the individual catalogs.
-->
ほとんどのシステムカタログはデータベースを作成する時にテンプレートデータベースからコピーされデータベースに固有のものとなります。
ごく一部のカタログがデータベースクラスタ内の全てのデータベースにわたって物理的に共有されます。
これらについては、それぞれのカタログで説明します。
  </para>

  <table id="catalog-table">
<!--
   <title>System Catalogs</title>
-->
   <title>システムカタログ</title>

   <tgroup cols="2">
    <thead>
     <row>
<!--
      <entry>Catalog Name</entry>
      <entry>Purpose</entry>
-->
      <entry>カタログ名</entry>
      <entry>用途</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><link linkend="catalog-pg-aggregate"><structname>pg_aggregate</structname></link></entry>
<!--
      <entry>aggregate functions</entry>
-->
      <entry>集約関数</entry>
     </row>

     <row>
      <entry><link linkend="catalog-pg-am"><structname>pg_am</structname></link></entry>
<!--
      <entry>index access methods</entry>
-->
      <entry>インデックスアクセスメソッド</entry>
     </row>

     <row>
      <entry><link linkend="catalog-pg-amop"><structname>pg_amop</structname></link></entry>
<!--
      <entry>access method operators</entry>
-->
      <entry>アクセスメソッド演算子</entry>
     </row>

     <row>
      <entry><link linkend="catalog-pg-amproc"><structname>pg_amproc</structname></link></entry>
<!--
      <entry>access method support procedures</entry>
-->
      <entry>アクセスメソッドサポートプロシージャ</entry>
     </row>

     <row>
      <entry><link linkend="catalog-pg-attrdef"><structname>pg_attrdef</structname></link></entry>
<!--
      <entry>column default values</entry>
-->
      <entry>列デフォルト値</entry>
     </row>

     <row>
      <entry><link linkend="catalog-pg-attribute"><structname>pg_attribute</structname></link></entry>
<!--
      <entry>table columns (<quote>attributes</quote>)</entry>
-->
      <entry>テーブル列（<quote>属性</quote>）</entry>
     </row>

     <row>
      <entry><link linkend="catalog-pg-authid"><structname>pg_authid</structname></link></entry>
<!--
      <entry>authorization identifiers (roles)</entry>
-->
      <entry>認証識別子（ロール）</entry>
     </row>

     <row>
      <entry><link linkend="catalog-pg-auth-members"><structname>pg_auth_members</structname></link></entry>
<!--
      <entry>authorization identifier membership relationships</entry>
-->
      <entry>認証識別子メンバーシップ関係</entry>
     </row>

     <row>
      <entry><link linkend="catalog-pg-cast"><structname>pg_cast</structname></link></entry>
<!--
      <entry>casts (data type conversions)</entry>
-->
      <entry>キャスト（データ型変換）</entry>
     </row>

     <row>
      <entry><link linkend="catalog-pg-class"><structname>pg_class</structname></link></entry>
<!--
      <entry>tables, indexes, sequences, views (<quote>relations</quote>)</entry>
-->
      <entry>テーブル、インデックス、シーケンス、ビュー（<quote>リレーション</quote>）</entry>
     </row>

     <row>
      <entry><link linkend="catalog-pg-collation"><structname>pg_collation</structname></link></entry>
<!--
      <entry>collations (locale information)</entry>
-->
      <entry>照合順序（ロケール情報）</entry>
     </row>

     <row>
      <entry><link linkend="catalog-pg-constraint"><structname>pg_constraint</structname></link></entry>
<!--
      <entry>check constraints, unique constraints, primary key constraints, foreign key constraints</entry>
-->
      <entry>検査制約、一意性制約、プライマリキー制約、外部キー制約</entry>
     </row>

     <row>
      <entry><link linkend="catalog-pg-conversion"><structname>pg_conversion</structname></link></entry>
<!--
      <entry>encoding conversion information</entry>
-->
      <entry>エンコード方式変換情報</entry>
     </row>

     <row>
      <entry><link linkend="catalog-pg-database"><structname>pg_database</structname></link></entry>
<!--
      <entry>databases within this database cluster</entry>
-->
      <entry>このデータベースクラスタにあるデータベース</entry>
     </row>

     <row>
      <entry><link linkend="catalog-pg-db-role-setting"><structname>pg_db_role_setting</structname></link></entry>
<!--
      <entry>per-role and per-database settings</entry>
-->
      <entry>ロール毎およびデータベース毎の設定</entry>
     </row>

     <row>
      <entry><link linkend="catalog-pg-default-acl"><structname>pg_default_acl</structname></link></entry>
<!--
      <entry>default privileges for object types</entry>
-->
      <entry>オブジェクト種類のデフォルト権限</entry>
     </row>

     <row>
      <entry><link linkend="catalog-pg-depend"><structname>pg_depend</structname></link></entry>
<!--
      <entry>dependencies between database objects</entry>
-->
      <entry>データベースオブジェクト間の依存関係</entry>
     </row>

     <row>
      <entry><link linkend="catalog-pg-description"><structname>pg_description</structname></link></entry>
<!--
      <entry>descriptions or comments on database objects</entry>
-->
      <entry>データベースオブジェクトの説明やコメント</entry>
     </row>

     <row>
      <entry><link linkend="catalog-pg-enum"><structname>pg_enum</structname></link></entry>
<!--
      <entry>enum label and value definitions</entry>
-->
      <entry>列挙型のラベルや値の定義</entry>
     </row>

     <row>
      <entry><link linkend="catalog-pg-event-trigger"><structname>pg_event_trigger</structname></link></entry>
<!--
      <entry>event triggers</entry>
-->
      <entry>イベントトリガ</entry>
     </row>

     <row>
      <entry><link linkend="catalog-pg-extension"><structname>pg_extension</structname></link></entry>
<!--
      <entry>installed extensions</entry>
-->
      <entry>インストールされた拡張</entry>
     </row>

     <row>
      <entry><link linkend="catalog-pg-foreign-data-wrapper"><structname>pg_foreign_data_wrapper</structname></link></entry>
<!--
      <entry>foreign-data wrapper definitions</entry>
-->
      <entry>外部データラッパの定義</entry>
     </row>

     <row>
      <entry><link linkend="catalog-pg-foreign-server"><structname>pg_foreign_server</structname></link></entry>
<!--
      <entry>foreign server definitions</entry>
-->
      <entry>外部サーバの定義</entry>
     </row>

     <row>
      <entry><link linkend="catalog-pg-foreign-table"><structname>pg_foreign_table</structname></link></entry>
<!--
      <entry>additional foreign table information</entry>
-->
      <entry>追加の外部テーブル情報</entry>
     </row>

     <row>
      <entry><link linkend="catalog-pg-index"><structname>pg_index</structname></link></entry>
<!--
      <entry>additional index information</entry>
-->
      <entry>追加インデックス情報</entry>
     </row>

     <row>
      <entry><link linkend="catalog-pg-inherits"><structname>pg_inherits</structname></link></entry>
<!--
      <entry>table inheritance hierarchy</entry>
-->
      <entry>テーブル継承階層</entry>
     </row>

     <row>
      <entry><link linkend="catalog-pg-language"><structname>pg_language</structname></link></entry>
<!--
      <entry>languages for writing functions</entry>
-->
      <entry>関数記述言語</entry>
     </row>

     <row>
      <entry><link linkend="catalog-pg-largeobject"><structname>pg_largeobject</structname></link></entry>
<!--
      <entry>data pages for large objects</entry>
-->
      <entry>ラージオブジェクト用のデータページ</entry>
     </row>

     <row>
      <entry><link linkend="catalog-pg-largeobject-metadata"><structname>pg_largeobject_metadata</structname></link></entry>
<!--
      <entry>metadata for large objects</entry>
-->
      <entry>ラージオブジェクトのメタデータ</entry>
     </row>

     <row>
      <entry><link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link></entry>
<!--
      <entry>schemas</entry>
-->
      <entry>スキーマ</entry>
     </row>

     <row>
      <entry><link linkend="catalog-pg-opclass"><structname>pg_opclass</structname></link></entry>
<!--
      <entry>access method operator classes</entry>
-->
      <entry>アクセスメソッド演算子クラス</entry>
     </row>

     <row>
      <entry><link linkend="catalog-pg-operator"><structname>pg_operator</structname></link></entry>
<!--
      <entry>operators</entry>
-->
      <entry>演算子</entry>
     </row>

     <row>
      <entry><link linkend="catalog-pg-opfamily"><structname>pg_opfamily</structname></link></entry>
<!--
      <entry>access method operator families</entry>
-->
      <entry>アクセスメソッド演算子族</entry>
     </row>

     <row>
      <entry><link linkend="catalog-pg-pltemplate"><structname>pg_pltemplate</structname></link></entry>
<!--
      <entry>template data for procedural languages</entry>
-->
      <entry>手続き言語のためのテンプレートデータ</entry>
     </row>

     <row>
      <entry><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link></entry>
<!--
      <entry>functions and procedures</entry>
-->
      <entry>関数とプロシージャ</entry>
     </row>

     <row>
      <entry><link linkend="catalog-pg-range"><structname>pg_range</structname></link></entry>
<!--
      <entry>information about range types</entry>
-->
      <entry>範囲型の情報</entry>
     </row>

     <row>
      <entry><link linkend="catalog-pg-rewrite"><structname>pg_rewrite</structname></link></entry>
<!--
      <entry>query rewrite rules</entry>
-->
      <entry>問い合わせ書き換えルール</entry>
     </row>

     <row>

      <entry><link linkend="catalog-pg-replication-slots"><structname>pg_replication_slots</structname></link></entry>
<!--
      <entry>replication slot information</entry>
-->
      <entry>レプリケーションスロットの情報</entry>
     </row>

     <row>
      <entry><link linkend="catalog-pg-seclabel"><structname>pg_seclabel</structname></link></entry>
<!--
      <entry>security labels on database objects</entry>
-->
      <entry>データベースオブジェクト上のセキュリティラベル</entry>
     </row>

     <row>
      <entry><link linkend="catalog-pg-shdepend"><structname>pg_shdepend</structname></link></entry>
<!--
      <entry>dependencies on shared objects</entry>
-->
     <entry>共有オブジェクトの依存関係</entry>
     </row>

     <row>
      <entry><link linkend="catalog-pg-shdescription"><structname>pg_shdescription</structname></link></entry>
<!--
      <entry>comments on shared objects</entry>
-->
      <entry>共有オブジェクトに対するコメント</entry>
     </row>

     <row>
      <entry><link linkend="catalog-pg-shseclabel"><structname>pg_shseclabel</structname></link></entry>
<!--
      <entry>security labels on shared database objects</entry>
-->
      <entry>共有データベースオブジェクトのセキュリティラベル</entry>
     </row>

     <row>
      <entry><link linkend="catalog-pg-statistic"><structname>pg_statistic</structname></link></entry>
<!--
      <entry>planner statistics</entry>
-->
      <entry>プランナ統計情報</entry>
     </row>

     <row>
      <entry><link linkend="catalog-pg-tablespace"><structname>pg_tablespace</structname></link></entry>
<!--
      <entry>tablespaces within this database cluster</entry>
-->
      <entry>データベースクラスタ内のテーブル空間</entry>
     </row>

     <row>
      <entry><link linkend="catalog-pg-trigger"><structname>pg_trigger</structname></link></entry>
<!--
      <entry>triggers</entry>
-->
      <entry>トリガ</entry>
     </row>

     <row>
      <entry><link linkend="catalog-pg-ts-config"><structname>pg_ts_config</structname></link></entry>
<!--
      <entry>text search configurations</entry>
-->
      <entry>全文検索設定</entry>
     </row>

     <row>
      <entry><link linkend="catalog-pg-ts-config-map"><structname>pg_ts_config_map</structname></link></entry>
<!--
      <entry>text search configurations' token mappings</entry>
-->
      <entry>全文検索設定のトークン写像</entry>
     </row>

     <row>
      <entry><link linkend="catalog-pg-ts-dict"><structname>pg_ts_dict</structname></link></entry>
<!--
      <entry>text search dictionaries</entry>
-->
      <entry>全文検索辞書</entry>
     </row>

     <row>
      <entry><link linkend="catalog-pg-ts-parser"><structname>pg_ts_parser</structname></link></entry>
<!--
      <entry>text search parsers</entry>
-->
      <entry>全文検索パーサ</entry>
     </row>

     <row>
      <entry><link linkend="catalog-pg-ts-template"><structname>pg_ts_template</structname></link></entry>
<!--
      <entry>text search templates</entry>
-->
      <entry>全文検索テンプレート</entry>
     </row>

     <row>
      <entry><link linkend="catalog-pg-type"><structname>pg_type</structname></link></entry>
<!--
      <entry>data types</entry>
-->
      <entry>データ型</entry>
     </row>

     <row>
      <entry><link linkend="catalog-pg-user-mapping"><structname>pg_user_mapping</structname></link></entry>
<!--
      <entry>mappings of users to foreign servers</entry>
-->
      <entry>外部サーバへのユーザのマッピング</entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect1>


 <sect1 id="catalog-pg-aggregate">
  <title><structname>pg_aggregate</structname></title>

  <indexterm zone="catalog-pg-aggregate">
   <primary>pg_aggregate</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_aggregate</structname> stores information about
   aggregate functions.  An aggregate function is a function that
   operates on a set of values (typically one column from each row
   that matches a query condition) and returns a single value computed
   from all these values.  Typical aggregate functions are
   <function>sum</function>, <function>count</function>, and
   <function>max</function>.  Each entry in
   <structname>pg_aggregate</structname> is an extension of an entry
   in <structname>pg_proc</structname>.  The <structname>pg_proc</structname>
   entry carries the aggregate's name, input and output data types, and
   other information that is similar to ordinary functions.
-->
<structname>pg_aggregate</structname>カタログには集約関数の情報が格納されています。
集約関数とは、値の集合（多くの場合は問い合わせ条件に該当する各行の1つの列）にある操作を行い、それらすべての値の演算の結果得られる単一の値を返します。
集約関数の代表的なものは<function>sum</function>、<function>count</function>そして<function>max</function>です。
<structname>pg_aggregate</structname>内の各項目は、<structname>pg_proc</structname>内の項目の拡張です。
<structname>pg_proc</structname>の項目には、集約の名前、入出力データ型および通常の関数と類似したその他の情報が含まれます。
  </para>

  <table>
<!--
   <title><structname>pg_aggregate</> Columns</title>
-->
   <title><structname>pg_aggregate</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><structfield>aggfnoid</structfield></entry>
      <entry><type>regproc</type></entry>
      <entry><literal><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.oid</literal></entry>
<!--
      <entry><structname>pg_proc</structname> OID of the aggregate function</entry>
-->
      <entry>集約関数の<structname>pg_proc</structname> OID</entry>
     </row>

     <row>
      <entry><structfield>aggkind</structfield></entry>
      <entry><type>char</type></entry>
      <entry></entry>
<!--
      <entry>Aggregate kind:
       <literal>n</literal> for <quote>normal</> aggregates,
       <literal>o</literal> for <quote>ordered-set</> aggregates, or
       <literal>h</literal> for <quote>hypothetical-set</> aggregates
      </entry>
-->
      <entry>集約関数の種類:
       <literal>n</literal> <quote>通常の</>集約関数、
       <literal>o</literal> <quote>順序集合の</>集約関数、
       <literal>h</literal> <quote>仮想集合の</>集約関数
      </entry>
     </row>
     <row>
      <entry><structfield>aggnumdirectargs</structfield></entry>
      <entry><type>int2</type></entry>
      <entry></entry>
<!--
      <entry>Number of direct (non-aggregated) arguments of an ordered-set or
       hypothetical-set aggregate, counting a variadic array as one argument.
       If equal to <structfield>pronargs</>, the aggregate must be variadic
       and the variadic array describes the aggregated arguments as well as
       the final direct arguments.
       Always zero for normal aggregates.</entry>
-->
      <entry>
順序集合や仮想集合の集約関数では、（集約されていない）複数の引数は、可変長配列として1個の引数と見なします。
引数が数が<structfield>pronargs</>と同じ場合、最終的な直接引数同様、集約された引数として、集約関数の引数は、可変または可変長配列で記述しなければなりません。
通常の集約関数は引数を取りません。</entry>
     </row>

     <row>
      <entry><structfield>aggtransfn</structfield></entry>
      <entry><type>regproc</type></entry>
      <entry><literal><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.oid</literal></entry>
<!--
      <entry>Transition function</entry>
-->
      <entry>遷移関数</entry>
     </row>
     <row>
      <entry><structfield>aggfinalfn</structfield></entry>
      <entry><type>regproc</type></entry>
      <entry><literal><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.oid</literal></entry>
<!--
      <entry>Final function (zero if none)</entry>
-->
      <entry>最終関数（ない時はゼロ）</entry>
     </row>

     <row>
      <entry><structfield>aggmtransfn</structfield></entry>
      <entry><type>regproc</type></entry>
      <entry><literal><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.oid</literal></entry>
<!--
      <entry>Forward transition function for moving-aggregate mode (zero if none)</entry>
-->
      <entry>移動集約モードの順方向遷移関数（ない時はゼロ）</entry>
     </row>
     <row>
      <entry><structfield>aggminvtransfn</structfield></entry>
      <entry><type>regproc</type></entry>
      <entry><literal><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.oid</literal></entry>
<!--
      <entry>Inverse transition function for moving-aggregate mode (zero if none)</entry>
-->
      <entry>移動集約モードの逆遷移関数（ない時はゼロ)</entry>
     </row>
     <row>
      <entry><structfield>aggmfinalfn</structfield></entry>
      <entry><type>regproc</type></entry>
      <entry><literal><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.oid</literal></entry>
<!--
      <entry>Final function for moving-aggregate mode (zero if none)</entry>
-->
      <entry>移動集約モードの最終関数（ない時はゼロ)</entry>
     </row>
     <row>
      <entry><structfield>aggfinalextra</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
<!--
      <entry>True to pass extra dummy arguments to <structfield>aggfinalfn</structfield></entry>
-->
      <entry><structfield>aggfinalfn</structfield>に追加の仮引数を渡す場合はTrue</entry>
     </row>
     <row>
      <entry><structfield>aggmfinalextra</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
<!--
      <entry>True to pass extra dummy arguments to <structfield>aggmfinalfn</structfield></entry>
-->
      <entry><structfield>aggfinalfn</structfield>に追加の仮引数を渡す場合はTrue</entry>
     </row>

     <row>
      <entry><structfield>aggsortop</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-operator"><structname>pg_operator</structname></link>.oid</literal></entry>
<!--
      <entry>Associated sort operator (zero if none)</entry>
-->
      <entry>関連するソート演算子（ない時はゼロ）</entry>
     </row>
     <row>
      <entry><structfield>aggtranstype</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-type"><structname>pg_type</structname></link>.oid</literal></entry>
<!--
      <entry>Data type of the aggregate function's internal transition (state) data</entry>
-->
      <entry>集約関数の内部遷移（状態）データのデータ型</entry>
     </row>

     <row>
      <entry><structfield>aggtransspace</structfield></entry>
      <entry><type>int4</type></entry>
      <entry></entry>
<!--
      <entry>Approximate average size (in bytes) of the transition state
       data, or zero to use a default estimate</entry>
-->
      <entry>遷移状態データの推定平均サイズ（バイト）、またはデフォルトの推定値であるゼロ</entry>
     </row>
     <row>
      <entry><structfield>aggmtranstype</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-type"><structname>pg_type</structname></link>.oid</literal></entry>
<!--
      <entry>Data type of the aggregate function's internal transition (state)
       data for moving-aggregate mode (zero if none)</entry>
-->
      <entry>移動集約モードの、集約関数の内部遷移（状態）データのデータ型（ない時はゼロ）</entry>
     </row>
     <row>
      <entry><structfield>aggmtransspace</structfield></entry>
      <entry><type>int4</type></entry>
      <entry></entry>
<!--
      <entry>Approximate average size (in bytes) of the transition state data
       for moving-aggregate mode, or zero to use a default estimate</entry>
-->
      <entry>移動集約モードの、遷移状態データの推定平均サイズ（バイト）、またはデフォルトの推定値であるゼロ</entry>
     </row>

     <row>
      <entry><structfield>agginitval</structfield></entry>
      <entry><type>text</type></entry>
      <entry></entry>
      <entry>
<!--
       The initial value of the transition state.  This is a text
       field containing the initial value in its external string
       representation.  If this field is null, the transition state
       value starts out null.
-->
遷移状態の初期値。
外部文字列表現での初期値を含んだテキストフィールド。
フィールドがNULL値の場合、推移状態はNULL値で始まります。
      </entry>
     </row>

     <row>
      <entry><structfield>aggminitval</structfield></entry>
      <entry><type>text</type></entry>
      <entry></entry>
      <entry>
<!--
       The initial value of the transition state for moving-aggregate mode.
       This is a text field containing the initial value in its external
       string representation.  If this field is null, the transition state
       value starts out null.
-->
移動集約モードの、遷移状態の初期値。外部に文字列表記された初期値を含むテキストフィールド。
このフィールドがnullの場合、遷移状態の値はnullから始まります。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
  <para>
<!--
   New aggregate functions are registered with the <xref
   linkend="sql-createaggregate">
   command.  See <xref linkend="xaggr"> for more information about
   writing aggregate functions and the meaning of the transition
   functions, etc.
-->
新しい集約関数は<xref linkend="sql-createaggregate">コマンドで登録されます。
集約関数の書き方や遷移関数の説明などの詳細は<xref linkend="xaggr">を参照してください。
  </para>

 </sect1>


 <sect1 id="catalog-pg-am">
  <title><structname>pg_am</structname></title>

  <indexterm zone="catalog-pg-am">
   <primary>pg_am</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_am</structname> stores information about index
   access methods.  There is one row for each index access method supported by
   the system.  The contents of this catalog are discussed in detail in
   <xref linkend="indexam">.
-->
<structname>pg_am</structname>カタログにはインデックスアクセスメソッドの情報が格納されます。
システムがサポートするインデックスアクセスメソッド毎に1つの行が存在します。
このカタログの内容については<xref linkend="indexam">で詳しく説明します。
  </para>

  <table>
<!--
   <title><structname>pg_am</> Columns</title>
-->
   <title><structname>pg_am</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>
    <tbody>

     <row>
      <entry><structfield>oid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry></entry>
<!--
      <entry>Row identifier (hidden attribute; must be explicitly selected)</entry>
-->
      <entry>行識別子（隠し属性です。明示的に選択しなければなりません）</entry>
     </row>

     <row>
      <entry><structfield>amname</structfield></entry>
      <entry><type>name</type></entry>
      <entry></entry>
<!--
      <entry>Name of the access method</entry>
-->
      <entry>アクセスメソッド名</entry>
     </row>

     <row>
      <entry><structfield>amstrategies</structfield></entry>
      <entry><type>int2</type></entry>
      <entry></entry>
<!--
      <entry>Number of operator strategies for this access method,
       or zero if access method does not have a fixed set of operator
       strategies</entry>
-->
      <entry>このアクセスメソッド用の演算子戦略番号。
もしアクセスメソッドが固定された演算子戦略群を持たない場合はゼロ</entry>
     </row>

     <row>
      <entry><structfield>amsupport</structfield></entry>
      <entry><type>int2</type></entry>
      <entry></entry>
<!--
      <entry>Number of support routines for this access method</entry>
-->
      <entry>このアクセスメソッド用のサポートルーチンの数</entry>
     </row>

     <row>
      <entry><structfield>amcanorder</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
<!--
      <entry>Does the access method support ordered scans sorted by the
       indexed column's value?</entry>
-->
      <entry>アクセスメソッドは、インデックス列の値によってソートされた順序付けスキャンをサポートしているか？</entry>
     </row>

     <row>
      <entry><structfield>amcanorderbyop</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
<!--
      <entry>Does the access method support ordered scans sorted by the result
       of an operator on the indexed column?</entry>
-->
      <entry>アクセスメソッドは、インデックス列に対する演算子の結果によってソートされた順序付けスキャンをサポートしているか？</entry>
     </row>

     <row>
      <entry><structfield>amcanbackward</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
<!--
      <entry>Does the access method support backward scanning?</entry>
-->
      <entry>アクセスメソッドは後方スキャンをサポートしているか？</entry>
     </row>

     <row>
      <entry><structfield>amcanunique</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
<!--
      <entry>Does the access method support unique indexes?</entry>
-->
      <entry>アクセスメソッドが一意インデックスをサポートするかどうか？</entry>
     </row>

     <row>
      <entry><structfield>amcanmulticol</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
<!--
      <entry>Does the access method support multicolumn indexes?</entry>
-->
      <entry>アクセスメソッドが複数列インデックスをサポートするかどうか？</entry>
     </row>

     <row>
      <entry><structfield>amoptionalkey</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
<!--
      <entry>Does the access method support a scan without any constraint
       for the first index column?</entry>
-->
      <entry>アクセスメソッドが最初のインデックス列に対して制約無しのスキャンをサポートするかどうか？</entry>
     </row>

     <row>
      <entry><structfield>amsearcharray</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
<!--
      <entry>Does the access method support <literal>ScalarArrayOpExpr</> searches?</entry>
-->
      <entry>アクセスメソッドは<literal>ScalarArrayOpExpr</>検索をサポートするかどうか？</entry>
     </row>

     <row>
      <entry><structfield>amsearchnulls</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
<!--
      <entry>Does the access method support <literal>IS NULL</>/<literal>NOT NULL</> searches?</entry>
-->
      <entry>アクセスメソッドは<literal>IS NULL</>/<literal>NOT NULL</>検索をサポートしているか？</entry>
     </row>

     <row>
      <entry><structfield>amstorage</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
<!--
      <entry>Can index storage data type differ from column data type?</entry>
-->
      <entry>インデックス格納データの型を列のデータ型から変更できるか？</entry>
     </row>

     <row>
      <entry><structfield>amclusterable</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
<!--
      <entry>Can an index of this type be clustered on?</entry>
-->
      <entry>この型のインデックスはクラスタ可能か？</entry>
     </row>

     <row>
      <entry><structfield>ampredlocks</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
<!--
      <entry>Does an index of this type manage fine-grained predicate locks?</entry>
-->
      <entry>この種類のインデックスが細粒度の述部ロックを管理するか?</entry>
     </row>

     <row>
      <entry><structfield>amkeytype</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-type"><structname>pg_type</structname></link>.oid</literal></entry>
<!--
      <entry>Type of data stored in index, or zero if not a fixed type</entry>
-->
      <entry>インデックス内に保存されたデータ型、もしくは固定型ではない場合はゼロ</entry>
     </row>

     <row>
      <entry><structfield>aminsert</structfield></entry>
      <entry><type>regproc</type></entry>
      <entry><literal><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.oid</literal></entry>
<!--
      <entry><quote>Insert this tuple</quote> function</entry>
-->
      <entry><quote>このタプルを挿入する</quote>関数</entry>
     </row>

     <row>
      <entry><structfield>ambeginscan</structfield></entry>
      <entry><type>regproc</type></entry>
      <entry><literal><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.oid</literal></entry>
<!--
      <entry><quote>Prepare for index scan</quote> function</entry>
-->
      <entry><quote>インデックススキャンを準備する</quote>関数</entry>
     </row>

     <row>
      <entry><structfield>amgettuple</structfield></entry>
      <entry><type>regproc</type></entry>
      <entry><literal><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.oid</literal></entry>
<!--
      <entry><quote>Next valid tuple</quote> function, or zero if none</entry>
-->
      <entry><quote>次に有効なタプル</quote>関数。存在しない場合はゼロ</entry>
     </row>

     <row>
      <entry><structfield>amgetbitmap</structfield></entry>
      <entry><type>regproc</type></entry>
      <entry><literal><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.oid</literal></entry>
<!--
      <entry><quote>Fetch all valid tuples</quote> function, or zero if none</entry>
-->
      <entry><quote>有効なタプルをすべて取り出す</quote>関数。存在しない場合はゼロ</entry>
     </row>

     <row>
      <entry><structfield>amrescan</structfield></entry>
      <entry><type>regproc</type></entry>
      <entry><literal><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.oid</literal></entry>
<!--
      <entry><quote>(Re)start index scan</quote> function</entry>
-->
      <entry><quote>インデックススキャンを（再）開始する</quote>関数</entry>
     </row>

     <row>
      <entry><structfield>amendscan</structfield></entry>
      <entry><type>regproc</type></entry>
      <entry><literal><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.oid</literal></entry>
<!--
      <entry><quote>Clean up after index scan</quote> function</entry>
-->
      <entry><quote>インデックススキャン後の整理</quote>関数</entry>
     </row>

     <row>
      <entry><structfield>ammarkpos</structfield></entry>
      <entry><type>regproc</type></entry>
      <entry><literal><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.oid</literal></entry>
<!--
      <entry><quote>Mark current scan position</quote> function</entry>
-->
      <entry><quote>現在のスキャン位置を記録する</quote>関数</entry>
     </row>

     <row>
      <entry><structfield>amrestrpos</structfield></entry>
      <entry><type>regproc</type></entry>
      <entry><literal><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.oid</literal></entry>
<!--
      <entry><quote>Restore marked scan position</quote> function</entry>
-->
      <entry><quote>記録したスキャン位置に復元する</quote>関数</entry>
     </row>

     <row>
      <entry><structfield>ambuild</structfield></entry>
      <entry><type>regproc</type></entry>
      <entry><literal><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.oid</literal></entry>
<!--
      <entry><quote>Build new index</quote> function</entry>
-->
      <entry><quote>新規インデックスを構築する</quote>関数</entry>
     </row>

     <row>
      <entry><structfield>ambuildempty</structfield></entry>
      <entry><type>regproc</type></entry>
      <entry><literal><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.oid</literal></entry>
<!--
      <entry><quote>Build empty index</quote> function</entry>
-->
      <entry><quote>空のインデックスを構築する</quote>関数</entry>
     </row>

     <row>
      <entry><structfield>ambulkdelete</structfield></entry>
      <entry><type>regproc</type></entry>
      <entry><literal><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.oid</literal></entry>
<!--
      <entry>Bulk-delete function</entry>
-->
      <entry>一括削除関数</entry>
     </row>

     <row>
      <entry><structfield>amvacuumcleanup</structfield></entry>
      <entry><type>regproc</type></entry>
      <entry><literal><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.oid</literal></entry>
<!--
      <entry>Post-<command>VACUUM</command> cleanup function</entry>
-->
      <entry><command>VACUUM</command>後の消去関数</entry>
     </row>

     <row>
      <entry><structfield>amcanreturn</structfield></entry>
      <entry><type>regproc</type></entry>
      <entry><literal><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.oid</literal></entry>
<!--
      <entry>Function to check whether index supports index-only scans,
       or zero if none</entry>
-->
      <entry>インデックスがインデックスオンリースキャンをサポートするかどうかを検査する関数。存在しなければゼロ</entry>
     </row>

     <row>
      <entry><structfield>amcostestimate</structfield></entry>
      <entry><type>regproc</type></entry>
      <entry><literal><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.oid</literal></entry>
<!--
      <entry>Function to estimate cost of an index scan</entry>
-->
      <entry>インデックススキャンのコスト推測関数</entry>
     </row>

     <row>
      <entry><structfield>amoptions</structfield></entry>
      <entry><type>regproc</type></entry>
      <entry><literal><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.oid</literal></entry>
<!--
      <entry>Function to parse and validate <structfield>reloptions</> for an index</entry>
-->
      <entry>インデックスの<structfield>reloptions</>を解析、検証する関数</entry>
     </row>

    </tbody>
   </tgroup>
  </table>

 </sect1>


 <sect1 id="catalog-pg-amop">
  <title><structname>pg_amop</structname></title>

  <indexterm zone="catalog-pg-amop">
   <primary>pg_amop</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_amop</structname> stores information about
   operators associated with access method operator families.  There is one
   row for each operator that is a member of an operator family.  A family
   member can be either a <firstterm>search</> operator or an
   <firstterm>ordering</> operator.  An operator
   can appear in more than one family, but cannot appear in more than one
   search position nor more than one ordering position within a family.
   (It is allowed, though unlikely, for an operator to be used for both
   search and ordering purposes.)
-->
<structname>pg_amop</structname>カタログにはアクセスメソッド演算子の集合に関連付けられた演算子の情報が格納されています。
演算子族のメンバである演算子毎に１つの行が存在します。
演算子族のメンバは<firstterm>検索</>演算子または<firstterm>順序付け</>演算子のいずれかになることができます。
演算子は1つ以上の演算子族に現れますが、演算子族の中では検索でも順序付けでも複数現れることはありません。
（ほとんどありませんが、ある演算子が検索目的と順序付け目的の両方で使用されることが許されます。）
  </para>

  <table>
<!--
   <title><structname>pg_amop</> Columns</title>
-->
   <title><structname>pg_amop</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>
    <tbody>

     <row>
      <entry><structfield>oid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry></entry>
<!--
      <entry>Row identifier (hidden attribute; must be explicitly selected)</entry>
-->
      <entry>行識別子（隠し属性です。明示的に選択しなければなりません）</entry>
     </row>

     <row>
      <entry><structfield>amopfamily</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-opfamily"><structname>pg_opfamily</structname></link>.oid</literal></entry>
<!--
      <entry>The operator family this entry is for</entry>
-->
      <entry>この項目用の演算子族</entry>
     </row>

     <row>
      <entry><structfield>amoplefttype</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-type"><structname>pg_type</structname></link>.oid</literal></entry>
<!--
      <entry>Left-hand input data type of operator</entry>
-->
      <entry>演算子の左辺側のデータ型</entry>
     </row>

     <row>
      <entry><structfield>amoprighttype</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-type"><structname>pg_type</structname></link>.oid</literal></entry>
<!--
      <entry>Right-hand input data type of operator</entry>
-->
      <entry>演算子の右辺側のデータ型</entry>
     </row>

     <row>
      <entry><structfield>amopstrategy</structfield></entry>
      <entry><type>int2</type></entry>
      <entry></entry>
<!--
      <entry>Operator strategy number</entry>
-->
      <entry>演算子の戦略番号</entry>
     </row>

     <row>
      <entry><structfield>amoppurpose</structfield></entry>
      <entry><type>char</type></entry>
      <entry></entry>
<!--
      <entry>Operator purpose, either <literal>s</> for search or
       <literal>o</> for ordering</entry>
-->
      <entry>演算子の目的。検索用ならば<literal>s</>、順序付け用であれば<literal>o</></entry>
     </row>

     <row>
      <entry><structfield>amopopr</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-operator"><structname>pg_operator</structname></link>.oid</literal></entry>
<!--
      <entry>OID of the operator</entry>
-->
      <entry>演算子のOID</entry>
     </row>

     <row>
      <entry><structfield>amopmethod</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-am"><structname>pg_am</structname></link>.oid</literal></entry>
<!--
      <entry>Index access method operator family is for</entry>
-->
      <entry>演算子族用のインデックスアクセスメソッド</entry>
     </row>

     <row>
      <entry><structfield>amopsortfamily</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-opfamily"><structname>pg_opfamily</structname></link>.oid</literal></entry>
<!--
      <entry>The B-tree operator family this entry sorts according to, if an
       ordering operator; zero if a search operator</entry>
-->
      <entry>
順序付け用の演算子の場合、この項目のソートが従うB-tree演算子族。検索用演算子であればゼロ
      </entry>
     </row>

    </tbody>
   </tgroup>
  </table>

  <para>
<!--
   A <quote>search</> operator entry indicates that an index of this operator
   family can be searched to find all rows satisfying
   <literal>WHERE</>
   <replaceable>indexed_column</>
   <replaceable>operator</>
   <replaceable>constant</>.
   Obviously, such an operator must return <type>boolean</type>, and its left-hand input
   type must match the index's column data type.
 -->
<quote>検索</>用演算子の項目は、この演算子族のインデックスを<literal>WHERE</> <replaceable>indexed_column</> <replaceable>operator</> <replaceable>constant</>を持たすすべての行を見つけるための検索に使用できることを示します。
いうまでもありませんが、こうした演算子は<type>論理型</type>を返さなければならず、また左辺の入力型はインデックス列のデータ型に一致しなければなりません。
  </para>

  <para>
<!--
   An <quote>ordering</> operator entry indicates that an index of this
   operator family can be scanned to return rows in the order represented by
   <literal>ORDER BY</>
   <replaceable>indexed_column</>
   <replaceable>operator</>
   <replaceable>constant</>.
   Such an operator could return any sortable data type, though again
   its left-hand input type must match the index's column data type.
   The exact semantics of the <literal>ORDER BY</> are specified by the
   <structfield>amopsortfamily</structfield> column, which must reference
   a B-tree operator family for the operator's result type.
-->
<quote>順序付け</>用演算子の項目は、この演算子族のインデックスを
<literal>ORDER BY</> <replaceable>indexed_column</> <replaceable>operator</> <replaceable>constant</>で表される順序で行を返すためのスキャンに使用することができることを示します。
こうした演算子の左辺の入力型はインデックス列のデータ型に一致しなければならないことは同じですが、任意のソート可能なデータ型を返すことができます。
<literal>ORDER BY</>の正確な意味は、この演算子の結果型用のB-tree演算子族を参照する必要がある<structfield>amopsortfamily</structfield>列により指定されます。
  </para>

  <note>
   <para>
<!--
    At present, it's assumed that the sort order for an ordering operator
    is the default for the referenced operator family, i.e., <literal>ASC NULLS
    LAST</>.  This might someday be relaxed by adding additional columns
    to specify sort options explicitly.
-->
現在、順序付け演算子のソート順は参照される演算子族のデフォルト、つまり<literal>ASC NULLS LAST</>であると仮定されています。
これは将来、ソートオプションを明示的に指定する追加列を加えることで緩和されるかもしれません。
   </para>
  </note>

<!--
  <para>
   An entry's <structfield>amopmethod</> must match the
   <structname>opfmethod</> of its containing operator family (including
   <structfield>amopmethod</> here is an intentional denormalization of the
   catalog structure for performance reasons).  Also,
   <structfield>amoplefttype</> and <structfield>amoprighttype</> must match
   the <structfield>oprleft</> and <structfield>oprright</> fields of the
   referenced <structname>pg_operator</> entry.
  </para>
-->
  <para>
項目の<structfield>amopmethod</>は、項目を含む演算子族の<structname>opfmethod</>に一致しなくてはいけません。
（ここでの<structfield>amopmethod</>は、性能上の理由からカタログ構造を意図的に非正規化したものも含みます。）
また、<structfield>amoplefttype</>と<structfield>amoprighttype</>は、参照されている<structname>pg_operator</>項目の<structfield>oprleft</>と<structfield>oprright</>に一致しなくてはいけません。
  </para>

 </sect1>


 <sect1 id="catalog-pg-amproc">
  <title><structname>pg_amproc</structname></title>

  <indexterm zone="catalog-pg-amproc">
   <primary>pg_amproc</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_amproc</structname> stores information about
   support procedures associated with access method operator families.  There
   is one row for each support procedure belonging to an operator family.
-->
<structname>pg_amproc</structname>カタログには、アクセスメソッド演算子族に関連付けられたサポートプロシージャの情報が格納されます。
演算子族に含まれるサポートプロシージャ毎に１つの行が存在します。
  </para>

  <table>
<!--
   <title><structname>pg_amproc</structname> Columns</title>
-->
   <title><structname>pg_amproc</structname>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>
    <tbody>

     <row>
      <entry><structfield>oid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry></entry>
<!--
      <entry>Row identifier (hidden attribute; must be explicitly selected)</entry>
-->
      <entry>行識別子（隠し属性です。明示的に選択しなければなりません）</entry>
     </row>

     <row>
      <entry><structfield>amprocfamily</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-opfamily"><structname>pg_opfamily</structname></link>.oid</literal></entry>
<!--
      <entry>The operator family this entry is for</entry>
-->
      <entry>この項目用の演算子族</entry>
     </row>

     <row>
      <entry><structfield>amproclefttype</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-type"><structname>pg_type</structname></link>.oid</literal></entry>
<!--
      <entry>Left-hand input data type of associated operator</entry>
-->
      <entry>関連付けられた演算子の左辺のデータ型</entry>
     </row>

     <row>
      <entry><structfield>amprocrighttype</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-type"><structname>pg_type</structname></link>.oid</literal></entry>
<!--
      <entry>Right-hand input data type of associated operator</entry>
-->
      <entry>関連付けられた演算子の右辺データ型</entry>
     </row>

     <row>
      <entry><structfield>amprocnum</structfield></entry>
      <entry><type>int2</type></entry>
      <entry></entry>
<!--
      <entry>Support procedure number</entry>
-->
      <entry>サポートプロシージャ番号</entry>
     </row>

     <row>
      <entry><structfield>amproc</structfield></entry>
      <entry><type>regproc</type></entry>
      <entry><literal><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.oid</literal></entry>
<!--
      <entry>OID of the procedure</entry>
-->
      <entry>プロシージャのOID</entry>
     </row>

    </tbody>
   </tgroup>
  </table>

<!--
  <para>
   The usual interpretation of the
   <structfield>amproclefttype</> and <structfield>amprocrighttype</> fields
   is that they identify the left and right input types of the operator(s)
   that a particular support procedure supports.  For some access methods
   these match the input data type(s) of the support procedure itself, for
   others not.  There is a notion of <quote>default</> support procedures for
   an index, which are those with <structfield>amproclefttype</> and
   <structfield>amprocrighttype</> both equal to the index operator class's
   <structfield>opcintype</>.
  </para>
-->
  <para>
<structfield>amproclefttype</>と<structfield>amprocrighttype</>属性の通常の解釈は、それらが、特定のサポートプロシージャがサポートする演算子の左と右の入力型を識別することです。
いくつかのアクセスメソッドに対して、これらはサポートプロシージャ自身の入力データ型に一致することもあります。
また、そうでないものもあります。
インデックスに対して<quote>デフォルト</>サポートプロシージャの概念があります。
これは<structfield>amproclefttype</>と<structfield>amprocrighttype</>の両方が、インデックス演算クラスの<structfield>opcintype</>に等しい、という概念です。
  </para>

 </sect1>


 <sect1 id="catalog-pg-attrdef">
  <title><structname>pg_attrdef</structname></title>

  <indexterm zone="catalog-pg-attrdef">
   <primary>pg_attrdef</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_attrdef</structname> stores column default values.  The main information
   about columns is stored in <structname>pg_attribute</structname>
   (see below).  Only columns that explicitly specify a default value
   (when the table is created or the column is added) will have an
   entry here.
-->
<structname>pg_attrdef</structname>システムカタログは列のデフォルト値を格納します。
列の主要な情報は<structname>pg_attribute</structname>に格納されています（下記を参照）。
（テーブルが作成された時、もしくは列が追加された時に）デフォルト値を明示的に特定した列のみここに項目を持ちます。
  </para>

  <table>
<!--
   <title><structname>pg_attrdef</> Columns</title>
-->
   <title><structname>pg_attrdef</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>oid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry></entry>
<!--
      <entry>Row identifier (hidden attribute; must be explicitly selected)</entry>
-->
      <entry>行識別子（隠し属性です。明示的に選択しなければなりません）</entry>
     </row>

     <row>
      <entry><structfield>adrelid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-class"><structname>pg_class</structname></link>.oid</literal></entry>
<!--
      <entry>The table this column belongs to</entry>
-->
      <entry>この列が属するテーブル</entry>
     </row>

     <row>
      <entry><structfield>adnum</structfield></entry>
      <entry><type>int2</type></entry>
      <entry><literal><link linkend="catalog-pg-attribute"><structname>pg_attribute</structname></link>.attnum</literal></entry>
<!--
      <entry>The number of the column</entry>
-->
      <entry>列番号</entry>
     </row>

     <row>
      <entry><structfield>adbin</structfield></entry>
      <entry><type>pg_node_tree</type></entry>
      <entry></entry>
<!--
      <entry>The internal representation of the column default value</entry>
-->
      <entry>列のデフォルト値の内部表現</entry>
     </row>

     <row>
      <entry><structfield>adsrc</structfield></entry>
      <entry><type>text</type></entry>
      <entry></entry>
<!--
      <entry>A human-readable representation of the default value</entry>
-->
      <entry>人間が見てわかるデフォルト値の表現</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

   <para>
<!--
    The <structfield>adsrc</structfield> field is historical, and is best
    not used, because it does not track outside changes that might affect
    the representation of the default value.  Reverse-compiling the
    <structfield>adbin</structfield> field (with <function>pg_get_expr</> for
    example) is a better way to display the default value.
-->
<structfield>adsrc</structfield>フィールドは歴史的なもので使用しない方が良いでしょう。
この値は、デフォルト値の表現に影響を与える外部の変化を追跡しないからです。
デフォルト値を表示するには、（例えば<function>pg_get_expr</>を使った）<structfield>adbin</structfield>フィールドの逆コンパイルが、良い方法です。
   </para>

 </sect1>


 <sect1 id="catalog-pg-attribute">
  <title><structname>pg_attribute</structname></title>

  <indexterm zone="catalog-pg-attribute">
   <primary>pg_attribute</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_attribute</structname> stores information about
   table columns.  There will be exactly one
   <structname>pg_attribute</structname> row for every column in every
   table in the database.  (There will also be attribute entries for
   indexes, and indeed all objects that have <structname>pg_class</structname>
   entries.)
-->
<structname>pg_attribute</structname>カタログにはテーブルの列情報が格納されます。
データベース内のすべてのテーブルの各列に対し必ず１つの<structname>pg_attribute</structname>行があります。
（また、インデックスと<structname>pg_class</structname>に項目を持つすべてのオブジェクトに対しての属性記述があります。）
  </para>

  <para>
<!--
   The term attribute is equivalent to column and is used for
   historical reasons.
-->
属性という表現は列と同等の意味で、歴史的背景からそのように呼ばれています。
  </para>

  <table>
<!--
   <title><structname>pg_attribute</> Columns</title>
-->
   <title><structname>pg_attribute</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>attrelid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-class"><structname>pg_class</structname></link>.oid</literal></entry>
<!--
      <entry>The table this column belongs to</entry>
-->
      <entry>この列が属するテーブル</entry>
     </row>

     <row>
      <entry><structfield>attname</structfield></entry>
      <entry><type>name</type></entry>
      <entry></entry>
<!--
      <entry>The column name</entry>
-->
      <entry>列名</entry>
     </row>

     <row>
      <entry><structfield>atttypid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-type"><structname>pg_type</structname></link>.oid</literal></entry>
<!--
      <entry>The data type of this column</entry>
-->
      <entry>この列のデータ型</entry>
     </row>

     <row>
      <entry><structfield>attstattarget</structfield></entry>
      <entry><type>int4</type></entry>
      <entry></entry>
      <entry>
<!--
       <structfield>attstattarget</structfield> controls the level of detail
       of statistics accumulated for this column by
       <xref linkend="sql-analyze">.
       A zero value indicates that no statistics should be collected.
       A negative value says to use the system default statistics target.
       The exact meaning of positive values is data type-dependent.
       For scalar data types, <structfield>attstattarget</structfield>
       is both the target number of <quote>most common values</quote>
       to collect, and the target number of histogram bins to create.
-->
<structfield>attstattarget</structfield>は<xref linkend="sql-analyze">によるこの列に対する蓄積された統計情報をどの程度詳しく管理するかを規定します。
値がゼロの場合は統計情報を収集しません。 
負の値の場合は、システムのデフォルトの統計目標を使用すべきであるということです。
正の値が厳密に意味するところはデータ型に依存します。
スカラデータ型に対して<structfield>attstattarget</structfield>は収集する<quote>最も一般的な値</quote>の目標となる数であり、また作成する度数分布ビンの目標数でもあります。
      </entry>
     </row>

     <row>
      <entry><structfield>attlen</structfield></entry>
      <entry><type>int2</type></entry>
      <entry></entry>
      <entry>
<!--
       A copy of <literal>pg_type.typlen</literal> of this column's
       type
-->
       この列の型の<literal>pg_type.typlen</literal>のコピー
      </entry>
     </row>

     <row>
      <entry><structfield>attnum</structfield></entry>
      <entry><type>int2</type></entry>
      <entry></entry>
      <entry>
<!--
       The number of the column.  Ordinary columns are numbered from 1
       up.  System columns, such as <structfield>oid</structfield>,
       have (arbitrary) negative numbers.
-->
列番号。
通常、列は1から始まる番号付けがなされます。
<structfield>OID</structfield>のようなシステムによる列には（任意の）負の番号が付きます。
      </entry>
     </row>

     <row>
      <entry><structfield>attndims</structfield></entry>
      <entry><type>int4</type></entry>
      <entry></entry>
      <entry>
<!--
       Number of dimensions, if the column is an array type; otherwise 0.
       (Presently, the number of dimensions of an array is not enforced,
       so any nonzero value effectively means <quote>it's an array</>.)
-->
列が配列型の場合は次元数を表現し、そうでない時はゼロです。
（現在配列の次元数は強制されていませんのでゼロ以外のどのような値であっても<quote>これは配列である</>ということを意味します。）
      </entry>
     </row>

     <row>
      <entry><structfield>attcacheoff</structfield></entry>
      <entry><type>int4</type></entry>
      <entry></entry>
      <entry>
<!--
       Always -1 in storage, but when loaded into a row descriptor
       in memory this might be updated to cache the offset of the attribute
       within the row
-->
格納時は必ず-1となりますが、メモリ内の行記述子に読み込まれた場合は、行内での属性オフセットをキャッシュするために更新される可能性があります。
      </entry>
     </row>

     <row>
      <entry><structfield>atttypmod</structfield></entry>
      <entry><type>int4</type></entry>
      <entry></entry>
      <entry>
<!--
       <structfield>atttypmod</structfield> records type-specific data
       supplied at table creation time (for example, the maximum
       length of a <type>varchar</type> column).  It is passed to
       type-specific input functions and length coercion functions.
       The value will generally be -1 for types that do not need <structfield>atttypmod</>.
-->
<structfield>atttypmod</structfield>は、テーブル作成時に与えられた型固有のデータ（たとえば<type>varchar</type>列の最大長）を記録します。
これは型固有の入力関数や長さ強制関数に渡されます。
<structfield>atttypmod</>を必要としない型では、通常、この値は-1です。
      </entry>
     </row>

     <row>
      <entry><structfield>attbyval</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
      <entry>
<!--
       A copy of <literal>pg_type.typbyval</> of this column's type
-->
この列の型の<literal>pg_type.typbyval</>のコピー
      </entry>
     </row>

     <row>
      <entry><structfield>attstorage</structfield></entry>
      <entry><type>char</type></entry>
      <entry></entry>
      <entry>
<!--
       Normally a copy of <literal>pg_type.typstorage</> of this
       column's type.  For TOAST-able data types, this can be altered
       after column creation to control storage policy.
-->
通常、この列の型の<literal>pg_type.typstorage</>のコピー。
TOAST可能なデータ型では、格納ポリシーを制御するために列の作成後に変更することができます。
      </entry>
     </row>

     <row>
      <entry><structfield>attalign</structfield></entry>
      <entry><type>char</type></entry>
      <entry></entry>
      <entry>
<!--
       A copy of <literal>pg_type.typalign</> of this column's type
-->
この列の型の<literal>pg_type.typalign</>のコピー
      </entry>
     </row>

     <row>
      <entry><structfield>attnotnull</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
      <entry>
<!--
       This represents a not-null constraint.  It is possible to
       change this column to enable or disable the constraint.
-->
NOT NULL制約式。
この列を変更し制約を有効にしたり無効にしたりできます。
      </entry>
     </row>

     <row>
      <entry><structfield>atthasdef</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
      <entry>
<!--
       This column has a default value, in which case there will be a
       corresponding entry in the <structname>pg_attrdef</structname>
       catalog that actually defines the value.
-->
この列にはデフォルト値があります。
その場合、実際に値を定義する<structname>pg_attrdef</structname>カタログ内に対応する項目があります。
      </entry>
     </row>

     <row>
      <entry><structfield>attisdropped</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
      <entry>
<!--
       This column has been dropped and is no longer valid.  A dropped
       column is still physically present in the table, but is
       ignored by the parser and so cannot be accessed via SQL.
-->
この列は既に削除されていて有効ではありません。
削除された列は物理的にはまだテーブル上に存在していますが、パーサによって無視されるためSQLでアクセスすることができません。
      </entry>
     </row>

     <row>
      <entry><structfield>attislocal</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
      <entry>
<!--
       This column is defined locally in the relation.  Note that a column can
       be locally defined and inherited simultaneously.
-->
この列はリレーション内でローカルに定義されます。
列がローカルに定義されると同時に継承される場合もあることに注意してください。
      </entry>
     </row>

     <row>
      <entry><structfield>attinhcount</structfield></entry>
      <entry><type>int4</type></entry>
      <entry></entry>
      <entry>
<!--
       The number of direct ancestors this column has.  A column with a
       nonzero number of ancestors cannot be dropped nor renamed.
-->
この列が持つ直接の祖先の数です。
祖先を持っている列の削除や名前は変更はできません。
      </entry>
     </row>

     <row>
      <entry><structfield>attcollation</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-collation"><structname>pg_collation</structname></link>.oid</literal></entry>
      <entry>
<!--
       The defined collation of the column, or zero if the column is
       not of a collatable data type.
-->
列で定義された照合順序。列が照合順序の設定ができないデータ型の場合はゼロ
      </entry>
     </row>

     <row>
      <entry><structfield>attacl</structfield></entry>
      <entry><type>aclitem[]</type></entry>
      <entry></entry>
      <entry>
<!--
       Column-level access privileges, if any have been granted specifically
       on this column
-->
この列に特定して付与された場合における、列レベルのアクセス権限
      </entry>
     </row>

     <row>
      <entry><structfield>attoptions</structfield></entry>
      <entry><type>text[]</type></entry>
      <entry></entry>
      <entry>
<!--
       Attribute-level options, as <quote>keyword=value</> strings
-->
<quote>keyword=value</>文字列のような、属性レベルのオプション
      </entry>
     </row>
     <row>
      <entry><structfield>attfdwoptions</structfield></entry>
      <entry><type>text[]</type></entry>
      <entry></entry>
<!--
      <entry>
       Attribute-level foreign data wrapper options, as <quote>keyword=value</> strings
      </entry>
-->
      <entry>
       <quote>keyword=value</>文字列のような、外部データラッパオプションの属性レベル
      </entry>
     </row>

    </tbody>
   </tgroup>
  </table>

  <para>
<!--
   In a dropped column's <structname>pg_attribute</structname> entry,
   <structfield>atttypid</structfield> is reset to zero, but
   <structfield>attlen</structfield> and the other fields copied from
   <structname>pg_type</> are still valid.  This arrangement is needed
   to cope with the situation where the dropped column's data type was
   later dropped, and so there is no <structname>pg_type</> row anymore.
   <structfield>attlen</structfield> and the other fields can be used
   to interpret the contents of a row of the table.
-->
削除された列の<structname>pg_attribute</structname>項目では、<structfield>atttypid</structfield>はゼロにリセットされます。
しかし<structfield>attlen</structfield>と<structname>pg_type</>からコピーされた他のフィールドは、有効なままです。
この動作は、削除された列のデータ型が後になって削除されて、<structname>pg_type</>行が存在しないような状況の場合に必要となります。
<structfield>attlen</structfield>と他のフィールドは、テーブル内の行の内容を解釈するために使用されます。
  </para>
 </sect1>


 <sect1 id="catalog-pg-authid">
  <title><structname>pg_authid</structname></title>

  <indexterm zone="catalog-pg-authid">
   <primary>pg_authid</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_authid</structname> contains information about
   database authorization identifiers (roles).  A role subsumes the concepts
   of <quote>users</> and <quote>groups</>.  A user is essentially just a
   role with the <structfield>rolcanlogin</> flag set.  Any role (with or
   without <structfield>rolcanlogin</>) can have other roles as members; see
   <link linkend="catalog-pg-auth-members"><structname>pg_auth_members</structname></link>.
-->
<structname>pg_authid</structname>カタログはデータベース認証識別子（ロール）の情報を保持します。
ロールは<quote>ユーザ</>と<quote>グループ</>の概念を包括しています。
ユーザは本質的に<structfield>rolcanlogin</>フラグセットを持ったロールです。
どのようなロール（<structfield>rolcanlogin</>を持っている、持っていないに関わらず）も他のロールをメンバとして持っていても構いません。
<link linkend="catalog-pg-auth-members"><structname>pg_auth_members</structname></link>を参照してください。
  </para>

  <para>
<!--
   Since this catalog contains passwords, it must not be publicly readable.
   <link linkend="view-pg-roles"><structname>pg_roles</structname></link>
   is a publicly readable view on
   <structname>pg_authid</structname> that blanks out the password field.
-->
このカタログはパスワードを含んでいるため、第三者が内容を読むことができないようにしなければいけません。
<link linkend="view-pg-roles"><structname>pg_roles</structname></link>は、<structname>pg_authid</structname>のビューで、パスワードのフィールドは空白となっていますので内容を読み取ることができます。
  </para>

  <para>
<!--
   <xref linkend="user-manag"> contains detailed information about user and
   privilege management.
-->
<xref linkend="user-manag">でユーザと権限管理に関するより詳細について説明します。
  </para>

  <para>
<!--
   Because user identities are cluster-wide,
   <structname>pg_authid</structname>
   is shared across all databases of a cluster: there is only one
   copy of <structname>pg_authid</structname> per cluster, not
   one per database.
-->
ユーザの本人確認はクラスタ全体にわたる情報ですので、<structname>pg_authid</structname>はクラスタのすべてのデータベースで共有されます。
データベース毎ではなく、クラスタ毎にたった1つだけ<structname>pg_authid</structname>が存在します。
  </para>

  <table>
<!--
   <title><structname>pg_authid</> Columns</title>
-->
   <title><structname>pg_authid</>の列</title>

   <tgroup cols="3">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>oid</structfield></entry>
      <entry><type>oid</type></entry>
<!--
      <entry>Row identifier (hidden attribute; must be explicitly selected)</entry>
-->
      <entry>行識別子（隠し属性です。明示的に選択しなければなりません）</entry>
     </row>

     <row>
      <entry><structfield>rolname</structfield></entry>
      <entry><type>name</type></entry>
<!--
      <entry>Role name</entry>
-->
      <entry>ロール名</entry>
     </row>

     <row>
      <entry><structfield>rolsuper</structfield></entry>
      <entry><type>bool</type></entry>
<!--
      <entry>Role has superuser privileges</entry>
-->
      <entry>ロールはスーパーユーザの権限を持っています</entry>
     </row>

     <row>
      <entry><structfield>rolinherit</structfield></entry>
      <entry><type>bool</type></entry>
<!--
      <entry>Role automatically inherits privileges of roles it is a
       member of</entry>
-->
      <entry>ロールは自動的にメンバとして属するロールの権限を継承します</entry>
     </row>

     <row>
      <entry><structfield>rolcreaterole</structfield></entry>
      <entry><type>bool</type></entry>
<!--
      <entry>Role can create more roles</entry>
-->
      <entry>ロールはロールを作成することができます</entry>
     </row>

     <row>
      <entry><structfield>rolcreatedb</structfield></entry>
      <entry><type>bool</type></entry>
<!--
      <entry>Role can create databases</entry>
-->
      <entry>ロールはデータベースを作成することができます</entry>
     </row>

     <row>
      <entry><structfield>rolcatupdate</structfield></entry>
      <entry><type>bool</type></entry>
<!--
      <entry>
       Role can update system catalogs directly.  (Even a superuser cannot do
       this unless this column is true)
      </entry>
-->
      <entry>
ロールはシステムカタログを直接更新することができます（スーパーユーザであってもここが真でなければ更新不可）
     </entry>
     </row>

     <row>
      <entry><structfield>rolcanlogin</structfield></entry>
      <entry><type>bool</type></entry>
      <entry>
<!--
       Role can log in. That is, this role can be given as the initial
       session authorization identifier
-->
ロールはログインすることができます。つまりロールはセッションを始める認証の識別子となることができます
      </entry>
     </row>

     <row>
      <entry><structfield>rolreplication</structfield></entry>
      <entry><type>bool</type></entry>
      <entry>
<!--
       Role is a replication role. That is, this role can initiate streaming
       replication (see <xref linkend="streaming-replication">) and set/unset
       the system backup mode using <function>pg_start_backup</> and
       <function>pg_stop_backup</>
-->
ロールはレプリケーション用のロールです。
つまり、このロールはストリーミングレプリケーション（<xref linkend="streaming-replication">参照）を初期化すること、および、<function>pg_start_backup</>と<function>pg_stop_backup</>を使用してシステムのバックアップモードを設定/解除することができます。
      </entry>
     </row>

     <row>
      <entry><structfield>rolconnlimit</structfield></entry>
      <entry><type>int4</type></entry>
      <entry>
<!--
       For roles that can log in, this sets maximum number of concurrent
       connections this role can make.  -1 means no limit.
-->
ログイン可能なロールでは、これはロールが確立できる同時実行接続数を設定します。
-1は制限無しを意味します。
      </entry>
     </row>

     <row>
      <entry><structfield>rolpassword</structfield></entry>
      <entry><type>text</type></entry>
      <entry>
<!--
       Password (possibly encrypted); null if none.  If the password
       is encrypted, this column will begin with the string <literal>md5</>
       followed by a 32-character hexadecimal MD5 hash.  The MD5 hash
       will be of the user's password concatenated to their user name.
       For example, if user <literal>joe</> has password <literal>xyzzy</>,
       <productname>PostgreSQL</> will store the md5 hash of
       <literal>xyzzyjoe</>.  A password that does not follow that
       format is assumed to be unencrypted.
-->
（おそらく暗号化された）パスワード。無い場合はNULLです。
パスワードが暗号化された場合、この列には<literal>md5</>という文字列の後に32文字の16進数表記のMD5ハッシュが含まれます。
MD5ハッシュはユーザのパスワードとユーザ名を連結したものになります
例えばユーザ<literal>joe</>のパスワードが<literal>xyzzy</>の場合、<productname>PostgreSQL</>は<literal>xyzzyjoe</>をMD5でハッシュ化したものを格納します。
この書式に従わないパスワードは暗号化されていないとみなされます。
      </entry>
     </row>

     <row>
      <entry><structfield>rolvaliduntil</structfield></entry>
      <entry><type>timestamptz</type></entry>
<!--
      <entry>Password expiry time (only used for password authentication);
       null if no expiration</entry>
-->
<entry>パスワード有効期限（パスワード認証でのみ使用）。
NULLの場合には満了時間はありません。</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

 </sect1>


 <sect1 id="catalog-pg-auth-members">
  <title><structname>pg_auth_members</structname></title>

  <indexterm zone="catalog-pg-auth-members">
   <primary>pg_auth_members</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_auth_members</structname> shows the membership
   relations between roles.  Any non-circular set of relationships is allowed.
-->
<structname>pg_auth_members</structname>カタログはロール間のメンバシップ関係を示しています。
循環していなければ、どのような関係でも許可されています。
  </para>

  <para>
<!--
   Because user identities are cluster-wide,
   <structname>pg_auth_members</structname>
   is shared across all databases of a cluster: there is only one
   copy of <structname>pg_auth_members</structname> per cluster, not
   one per database.
-->
ユーザの同一性はクラスタ間で保たれる必要があるため、<structname>pg_auth_members</structname>はクラスタ間のすべてのデータベースで共有されています。
<structname>pg_auth_members</structname>のコピーはデータベースごとではなく、各クラスタにひとつだけ持っています。
  </para>

  <table>
<!--
   <title><structname>pg_auth_members</> Columns</title>
-->
   <title><structname>pg_auth_members</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>roleid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.oid</literal></entry>
<!--
      <entry>ID of a role that has a member</entry>
-->
      <entry>メンバを持っているロールのID</entry>
     </row>

     <row>
      <entry><structfield>member</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.oid</literal></entry>
<!--
      <entry>ID of a role that is a member of <structfield>roleid</></entry>
-->
      <entry><structfield>roleid</>のメンバであるロールのID</entry>
     </row>

     <row>
      <entry><structfield>grantor</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.oid</literal></entry>
<!--
      <entry>ID of the role that granted this membership</entry>
-->
      <entry>このメンバシップを与えたロールのID</entry>
     </row>

     <row>
      <entry><structfield>admin_option</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
<!--
      <entry>True if <structfield>member</> can grant membership in
       <structfield>roleid</> to others</entry>
-->
      <entry>もし<structfield>member</>が<structfield>roleid</>のメンバシップを他に与えることができる場合は真</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

 </sect1>


 <sect1 id="catalog-pg-cast">
  <title><structname>pg_cast</structname></title>

  <indexterm zone="catalog-pg-cast">
   <primary>pg_cast</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_cast</structname> stores data type conversion
   paths, both built-in and user-defined.
-->
<structname>pg_cast</structname>カタログにはデータ型変換パスが格納されます。
ここには、組み込みのパスとユーザ定義のパスが存在します。
  </para>

<!--
  <para>
   It should be noted that <structname>pg_cast</structname> does not represent
   every type conversion that the system knows how to perform; only those that
   cannot be deduced from some generic rule.  For example, casting between a
   domain and its base type is not explicitly represented in
   <structname>pg_cast</structname>.  Another important exception is that
   <quote>automatic I/O conversion casts</>, those performed using a data
   type's own I/O functions to convert to or from <type>text</> or other
   string types, are not explicitly represented in
   <structname>pg_cast</structname>.
  </para>
-->
  <para>
<structname>pg_cast</structname>は、システムがどのように動作するかわかっているような、あらゆる型変換を表しているわけではないということに注意してください。
いくつかの一般的な規則から推測できないような型変換についてのみ表しています。
例えば、ドメインとその基本の型は明示的に<structname>pg_cast</structname>内で表されていません。
他の重要な例外は<quote>自動I/O変換キャスト</>です。
これらのキャストは、<type>text</>型やほかの文字列型から変換したりされたりするのにデータ型自身のI/O関数を用いていますが、これらのキャストは明示的に<structname>pg_cast</structname>内において表されていません。
  </para>

  <table>
<!--
   <title><structname>pg_cast</> Columns</title>
-->
   <title><structname>pg_cast</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>oid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry></entry>
<!--
      <entry>Row identifier (hidden attribute; must be explicitly selected)</entry>
-->
      <entry>行識別子（隠し属性です。明示的に選択しなければなりません）</entry>
     </row>

     <row>
      <entry><structfield>castsource</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-type"><structname>pg_type</structname></link>.oid</literal></entry>
<!--
      <entry>OID of the source data type</entry>
-->
      <entry>変換元データ型のOID</entry>
     </row>

     <row>
      <entry><structfield>casttarget</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-type"><structname>pg_type</structname></link>.oid</literal></entry>
<!--
      <entry>OID of the target data type</entry>
-->
      <entry>対象データ型のOID</entry>
     </row>

     <row>
      <entry><structfield>castfunc</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.oid</literal></entry>
      <entry>
<!--
       The OID of the function to use to perform this cast.  Zero is
       stored if the cast method doesn't require a function.
-->
このキャストを実行するために使用する関数のOID。
キャストメソッドが関数を必要としない場合はゼロが格納されます。
      </entry>
     </row>

     <row>
      <entry><structfield>castcontext</structfield></entry>
      <entry><type>char</type></entry>
      <entry></entry>
      <entry>
<!--
       Indicates what contexts the cast can be invoked in.
       <literal>e</> means only as an explicit cast (using
       <literal>CAST</> or <literal>::</> syntax).
       <literal>a</> means implicitly in assignment
       to a target column, as well as explicitly.
       <literal>i</> means implicitly in expressions, as well as the
       other cases.
-->
キャストがどの文脈で呼び出し可能かを示します。
<literal>e</>は明示のキャストとしてのみ起動されることを意味します
（<literal>CAST</>、<literal>::</>構文を使用します）。
<literal>a</>は、対象となる列を明示的に特定するだけでなく暗黙的にも特定することを意味します。
<literal>i</>は他の場合と同様に演算式内で暗黙的であることを意味します。
      </entry>
     </row>

     <row>
      <entry><structfield>castmethod</structfield></entry>
      <entry><type>char</type></entry>
      <entry></entry>
      <entry>
<!--
       Indicates how the cast is performed.
       <literal>f</> means that the function specified in the <structfield>castfunc</> field is used.
       <literal>i</> means that the input/output functions are used.
       <literal>b</> means that the types are binary-coercible, thus no conversion is required.
-->
どのようにキャストが実行されるかを示します。
<literal>f</>は<structfield>castfunc</>フィールド内で示される関数が使用されていることを意味します。
<literal>i</>は入出力関数が使用されていることを示します。
<literal>b</>は型がバイナリを強制しているため、変換が必要ないことを意味します。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
<!--
   The cast functions listed in <structname>pg_cast</structname> must
   always take the cast source type as their first argument type, and
   return the cast destination type as their result type.  A cast
   function can have up to three arguments.  The second argument,
   if present, must be type <type>integer</>; it receives the type
   modifier associated with the destination type, or -1
   if there is none.  The third argument,
   if present, must be type <type>boolean</>; it receives <literal>true</>
   if the cast is an explicit cast, <literal>false</> otherwise.
-->
<structname>pg_cast</structname>内に挙げられているキャスト関数は、第1番目の引数の型として、キャスト元の型をいつも取らなければいけません。
また、キャスト関数は、結果の型としてキャスト先の型を返します。
キャスト関数は3つまで引数を持つことができます。
もし存在するなら、2番目の引数は<type>integer</>型でなくてはなりません。
この引数はキャスト先の型に関連付けられた型修飾子を受け取ります。
2番目の引数がない場合は、-1です。
3番目の引数は、もし存在する場合は、<type>boolean</>型でなくてはなりません。
この引数は、もしキャストが明示的なキャストであれば<literal>true</>を受け取り、そうでない場合は<literal>false</>を受け取ります。
  </para>

  <para>
<!--
   It is legitimate to create a <structname>pg_cast</structname> entry
   in which the source and target types are the same, if the associated
   function takes more than one argument.  Such entries represent
   <quote>length coercion functions</> that coerce values of the type
   to be legal for a particular type modifier value.
-->
もし関連のある関数が複数の引数を持つ場合、キャストの元と先で型が同じである<structname>pg_cast</structname>項目を作成することが妥当です。
このような項目は、<quote>length coercion functions</>を表現します。
<quote>length coercion functions</>は型の値を特定の型の修飾子の値に適するように修正します。
  </para>

  <para>
<!--
   When a <structname>pg_cast</structname> entry has different source and
   target types and a function that takes more than one argument, it
   represents converting from one type to another and applying a length
   coercion in a single step.  When no such entry is available, coercion
   to a type that uses a type modifier involves two steps, one to
   convert between data types and a second to apply the modifier.
-->
<structname>pg_cast</structname>項目が異なるキャスト元とキャスト先の型を持っていて、かつ関数が複数の引数を持つ時は、1つの型から別の型への変換し、かつ、1つの手順で長さの修正を適用することを意味します。
このような項目が利用できない時は、型修飾子を使用した型の修正は2つの手順が必要です。
1つはデータ型の間での変換で、2つ目は修飾子を適用することです。
  </para>
 </sect1>

 <sect1 id="catalog-pg-class">
  <title><structname>pg_class</structname></title>

  <indexterm zone="catalog-pg-class">
   <primary>pg_class</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_class</structname> catalogs tables and most
   everything else that has columns or is otherwise similar to a
   table.  This includes indexes (but see also
   <structname>pg_index</structname>), sequences, views, materialized
   views, composite types, and TOAST tables; see <structfield>relkind</>.
   Below, when we mean all of these
   kinds of objects we speak of <quote>relations</quote>.  Not all
   columns are meaningful for all relation types.
-->
<structname>pg_class</structname>カタログはテーブルと、その他に列を持つもの、あるいはテーブルに似た全てのものを目録にしています。
その中にはインデックス（<structname>pg_index</structname>も参照）、シーケンス、ビュー、マテリアライズドビュー、複合型およびTOASTテーブルが含まれます。
<structfield>relkind</>を参照してください。
これより以降、<quote>リレーション</quote>と記されている場合はこれらすべてのオブジェクトを意味しています。
すべての列が全てのリレーションの型に該当するとは限りません。
  </para>

  <table>
<!--
   <title><structname>pg_class</> Columns</title>
-->
   <title><structname>pg_class</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>oid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry></entry>
<!--
      <entry>Row identifier (hidden attribute; must be explicitly selected)</entry>
-->
      <entry>行識別子（隠し属性です。明示的に選択しなければなりません）</entry>
     </row>

     <row>
      <entry><structfield>relname</structfield></entry>
      <entry><type>name</type></entry>
      <entry></entry>
<!--
      <entry>Name of the table, index, view, etc.</entry>
-->
      <entry>テーブル、インデックス、ビューなどの名前</entry>
     </row>

     <row>
      <entry><structfield>relnamespace</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.oid</literal></entry>
      <entry>
<!--
       The OID of the namespace that contains this relation
-->
       このリレーションを持つ名前空間のOID
      </entry>
     </row>

     <row>
      <entry><structfield>reltype</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-type"><structname>pg_type</structname></link>.oid</literal></entry>
      <entry>
<!--
       The OID of the data type that corresponds to this table's row type,
       if any (zero for indexes, which have no <structname>pg_type</> entry)
-->
       もし何らかの（<structname>pg_type</>項目を持たないインデックスではゼロ）が存在した場合このテーブルの行の型に対応するデータ型のOID
      </entry>
     </row>

     <row>
      <entry><structfield>reloftype</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-type"><structname>pg_type</structname></link>.oid</literal></entry>
      <entry>
<!--
       For typed tables, the OID of the underlying composite type,
       zero for all other relations
-->
型付けされたテーブルでは背後にある複合型のOID。
その他のリレーションではゼロ。
      </entry>
     </row>

     <row>
      <entry><structfield>relowner</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.oid</literal></entry>
<!--
      <entry>Owner of the relation</entry>
-->
      <entry>リレーションの所有者</entry>
     </row>

     <row>
      <entry><structfield>relam</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-am"><structname>pg_am</structname></link>.oid</literal></entry>
<!--
      <entry>If this is an index, the access method used (B-tree, hash, etc.)</entry>
-->
      <entry>これがインデックスの場合は、それに使われている（B-tree、ハッシュなどの）アクセスメソッド</entry>
     </row>

     <row>
      <entry><structfield>relfilenode</structfield></entry>
      <entry><type>oid</type></entry>
      <entry></entry>
<!--
      <entry>Name of the on-disk file of this relation; zero means this
       is a <quote>mapped</> relation whose disk file name is determined
       by low-level state</entry>
-->
      <entry>このリレーションのディスク上のファイルの名前です。
ゼロはディスク上のファイル名が低レベルな状態で決定される<quote>マップ付けされた</>リレーションであることを意味します。</entry>
     </row>

     <row>
      <entry><structfield>reltablespace</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-tablespace"><structname>pg_tablespace</structname></link>.oid</literal></entry>
      <entry>
<!--
       The tablespace in which this relation is stored.  If zero,
       the database's default tablespace is implied.  (Not meaningful
       if the relation has no on-disk file.)
-->
このリレーションが保存されているテーブル空間。
もしゼロならば、このデータベースのデフォルトテーブル空間を意味します。
（リレーションがディスク上のファイルになくても、問題はありません。）
      </entry>
     </row>

     <row>
      <entry><structfield>relpages</structfield></entry>
      <entry><type>int4</type></entry>
      <entry></entry>
      <entry>
<!--
       Size of the on-disk representation of this table in pages (of size
       <symbol>BLCKSZ</symbol>).  This is only an estimate used by the
       planner.  It is updated by <command>VACUUM</command>,
       <command>ANALYZE</command>, and a few DDL commands such as
       <command>CREATE INDEX</command>.
-->
このテーブルのディスク上におけるページ単位（<symbol>BLCKSZ</symbol>）の表現サイズ。
これはプランナで使用される単なる推測値です。
<command>VACUUM</command>、<command>ANALYZE</command>および<command>CREATE INDEX</command>コマンドなどの一部のDDLコマンドで更新されます。
      </entry>
     </row>

     <row>
      <entry><structfield>reltuples</structfield></entry>
      <entry><type>float4</type></entry>
      <entry></entry>
      <entry>
<!--
       Number of rows in the table.  This is only an estimate used by the
       planner.  It is updated by <command>VACUUM</command>,
       <command>ANALYZE</command>, and a few DDL commands such as
       <command>CREATE INDEX</command>.
-->
テーブル内の行数。
これはプランナで使用される単なる推測値です。
<command>VACUUM</command>、<command>ANALYZE</command>、<command>CREATE INDEX</command>などの一部のDDLコマンドで更新されます。
      </entry>
     </row>

     <row>
      <entry><structfield>relallvisible</structfield></entry>
      <entry><type>int4</type></entry>
      <entry></entry>
<!--
      <entry>
       Number of pages that are marked all-visible in the table's
       visibility map.  This is only an estimate used by the
       planner.  It is updated by <command>VACUUM</command>,
       <command>ANALYZE</command>, and a few DDL commands such as
       <command>CREATE INDEX</command>.
      </entry>
-->
      <entry>
テーブル内の可視マップ内で全て可視とマークされているページ数。
これはプランナで使用される単なる見積です。
これは<command>VACUUM</command>、<command>ANALYZE</command>さらに<command>CREATE INDEX</command>といったいくつかのDDLコマンドで更新されます。
      </entry>
     </row>

     <row>
      <entry><structfield>reltoastrelid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-class"><structname>pg_class</structname></link>.oid</literal></entry>
      <entry>
<!--
       OID of the TOAST table associated with this table, 0 if none.  The
       TOAST table stores large attributes <quote>out of line</quote> in a
       secondary table.
-->
このテーブルに関連しているTOASTテーブルのOID。
何もない場合はゼロです。
TOASTテーブルは<quote>行に収まらない</quote>大きい属性を副テーブルに格納します。
      </entry>
     </row>

     <row>
      <entry><structfield>relhasindex</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
      <entry>
<!--
       True if this is a table and it has (or recently had) any indexes
-->
テーブルであり、かつ、インデックスを持つ（あるいはつい最近まで持っていた）時は真。
      </entry>
     </row>

     <row>
      <entry><structfield>relisshared</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
      <entry>
<!--
       True if this table is shared across all databases in the cluster.  Only
       certain system catalogs (such as <structname>pg_database</structname>)
       are shared.
-->
クラスタ内の全てのデータベースにわたってこのテーブルが共有されている場合は真。
（<structname>pg_database</structname>のような）ある特定のシステムカタログのみ共有されます。
      </entry>
     </row>

     <row>
      <entry><structfield>relpersistence</structfield></entry>
      <entry><type>char</type></entry>
      <entry></entry>
      <entry>
<!--
       <literal>p</> = permanent table, <literal>u</> = unlogged table,
       <literal>t</> = temporary table
-->
<literal>p</>は永続テーブル、<literal>u</>はログを取らないテーブル、<literal>t</>は一時テーブルを表します。
      </entry>
     </row>

     <row>
      <entry><structfield>relkind</structfield></entry>
      <entry><type>char</type></entry>
      <entry></entry>
      <entry>
<!--
       <literal>r</> = ordinary table, <literal>i</> = index,
       <literal>S</> = sequence, <literal>v</> = view,
       <literal>m</> = materialized view,
       <literal>c</> = composite type, <literal>t</> = TOAST table,
       <literal>f</> = foreign table
-->
<literal>r</>は通常のテーブル、<literal>i</>はインデックス、<literal>S</>はシーケンス、<literal>v</>はビュー、<literal>m</>はマテリアライズドビュー、　<literal>c</>は複合型、<literal>t</>はTOASTテーブル、<literal>f</>は外部テーブルを表します。
      </entry>
     </row>

     <row>
      <entry><structfield>relnatts</structfield></entry>
      <entry><type>int2</type></entry>
      <entry></entry>
      <entry>
<!--
       Number of user columns in the relation (system columns not
       counted).  There must be this many corresponding entries in
       <structname>pg_attribute</structname>.  See also
       <literal>pg_attribute.attnum</literal>.
-->
リレーションにあるユーザ列数（システム列は含みません）。
<structname>pg_attribute</structname>にこれに対応する数多くの項目があるはずです。
<literal>pg_attribute.attnum</literal>も参照してください。
      </entry>
     </row>

     <row>
      <entry><structfield>relchecks</structfield></entry>
      <entry><type>int2</type></entry>
      <entry></entry>
      <entry>
<!--
       Number of <literal>CHECK</> constraints on the table; see
       <link linkend="catalog-pg-constraint"><structname>pg_constraint</structname></link> catalog
-->
テーブル上の<literal>CHECK</>制約の数。
<link linkend="catalog-pg-constraint"><structname>pg_constraint</structname></link>カタログを参照してください。
      </entry>
     </row>

     <row>
      <entry><structfield>relhasoids</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
      <entry>
<!--
       True if we generate an OID for each row of the relation
-->
リレーションの行毎にOIDを生成する場合は真。
      </entry>
     </row>

     <row>
      <entry><structfield>relhaspkey</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
      <entry>
<!--
       True if the table has (or once had) a primary key
-->
テーブルにプライマリキーが含まれている（あるいは過去含まれていた）場合に真。
      </entry>
     </row>

     <row>
      <entry><structfield>relhasrules</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
      <entry>
<!--
       True if table has (or once had) rules; see
       <link linkend="catalog-pg-rewrite"><structname>pg_rewrite</structname></link> catalog
-->
もしテーブルにルールがある（あるいは以前あった）場合に真。
<link linkend="catalog-pg-rewrite"><structname>pg_rewrite</structname></link>カタログを参照してください。
      </entry>
     </row>

     <row>
      <entry><structfield>relhastriggers</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
      <entry>
<!--
       True if table has (or once had) triggers; see
       <link linkend="catalog-pg-trigger"><structname>pg_trigger</structname></link> catalog
-->
もしテーブルにトリガがある（あるいは以前あった）場合に真。
<link linkend="catalog-pg-trigger"><structname>pg_trigger</structname></link>カタログを参照してください。
      </entry>
    </row>

     <row>
      <entry><structfield>relhassubclass</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
<!--
      <entry>True if table has (or once had) any inheritance children</entry>
-->
      <entry>もしテーブルが子テーブルに継承されている（または以前に継承されていた）場合は真。</entry>
     </row>

     <row>
      <entry><structfield>relispopulated</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
<!--
      <entry>True if relation is populated (this is true for all
       relations other than some materialized views)</entry>
-->
      <entry>
リレーションにデータが投入されている場合に真（マテリアライズドビュー以外のすべてのリレーションでは真です。）
      </entry>
     </row>

     <row>
      <entry><structfield>relreplident</structfield></entry>
      <entry><type>char</type></entry>
      <entry></entry>
      <entry>
<!--
       Columns used to form <quote>replica identity</> for rows:
       <literal>d</> = default (primary key, if any),
       <literal>n</> = nothing,
       <literal>f</> = all columns
       <literal>i</> = index with <structfield>indisreplident</structfield> set, or default
-->
       行に<quote>replica identity</>フォームを使ったカラム。
       <literal>d</> デフォルト（もしあればプライマリキー）、
       <literal>n</> 無し、
       <literal>f</> 全カラム、
       <literal>i</> インデックスと <structfield>indisreplident</structfield>のセット、またはデフォルト

      </entry>
     </row>

     <row>
      <entry><structfield>relfrozenxid</structfield></entry>
      <entry><type>xid</type></entry>
      <entry></entry>
      <entry>
<!--
       All transaction IDs before this one have been replaced with a permanent
       (<quote>frozen</>) transaction ID in this table.  This is used to track
       whether the table needs to be vacuumed in order to prevent transaction
       ID wraparound or to allow <literal>pg_clog</> to be shrunk.  Zero
       (<symbol>InvalidTransactionId</symbol>) if the relation is not a table.
-->
この値より以前のトランザクションIDはすべて、このテーブルで永遠（<quote>凍結</>）トランザクションIDに置き換えられます。
これは、このテーブルに対して、トランザクションID周回を防ぎ、かつ、<literal>pg_clog</>を縮小させることを目的としたバキュームを行うかどうかを追跡するために使用されます。
リレーションがテーブルではない場合は0（<symbol>InvalidTransactionId</symbol>）です。
      </entry>
     </row>

     <row>
      <entry><structfield>relminmxid</structfield></entry>
      <entry><type>xid</type></entry>
      <entry></entry>
      <entry>
<!--
       All multitransaction IDs before this one have been replaced by a
       transaction ID in this table.  This is used to track
       whether the table needs to be vacuumed in order to prevent multitransaction ID
       ID wraparound or to allow <literal>pg_clog</> to be shrunk.  Zero
       (<symbol>InvalidTransactionId</symbol>) if the relation is not a table.
-->
このテーブル内のトランザクションIDによって置換される前のすべてのマルチトランザクションID。
これは、マルチトランザクションIDのID周回を防ぐ、または<literal>pg_clog</>を縮小させるために、テーブルをバキュームする必要があるかどうかを追跡するために使用されます。
リレーションがテーブルではない場合はゼロ（<symbol>InvalidTransactionId</symbol>）です。
      </entry>
     </row>

     <row>
      <entry><structfield>relacl</structfield></entry>
      <entry><type>aclitem[]</type></entry>
      <entry></entry>
      <entry>
<!--
       Access privileges; see
       <xref linkend="sql-grant"> and
       <xref linkend="sql-revoke">
       for details
-->
アクセス権限。
詳細は<xref linkend="sql-grant">と<xref linkend="sql-revoke">の説明を参照してください。
      </entry>
     </row>

     <row>
      <entry><structfield>reloptions</structfield></entry>
      <entry><type>text[]</type></entry>
      <entry></entry>
      <entry>
<!--
       Access-method-specific options, as <quote>keyword=value</> strings
-->
<quote>keyword=value</>文字列のような、アクセスメソッド特有のオプション。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
<!--
   Several of the Boolean flags in <structname>pg_class</> are maintained
   lazily: they are guaranteed to be true if that's the correct state, but
   may not be reset to false immediately when the condition is no longer
   true.  For example, <structfield>relhasindex</> is set by
   <command>CREATE INDEX</command>, but it is never cleared by
   <command>DROP INDEX</command>.  Instead, <command>VACUUM</command> clears
   <structfield>relhasindex</> if it finds the table has no indexes.  This
   arrangement avoids race conditions and improves concurrency.
-->
<structname>pg_class</>内の複数の論理型フラグは、ゆっくりと保守されます。
正しい状態にあるときに真であることが保証されていますが、その条件が真でなくなった時即座に偽に再設定されないかもしれません。
例えば<structfield>relhasindex</>は<command>CREATE INDEX</command>で設定されますが、<command>DROP INDEX</command>では決して初期化されません。
代わりに<command>VACUUM</command>がそのテーブルにインデックスがないことを判定した場合に<structfield>relhasindex</>を初期化します。
この調整により競合状態を防止し、同時実行性が向上します。
  </para>
 </sect1>

 <sect1 id="catalog-pg-collation">
  <title><structname>pg_collation</structname></title>

  <indexterm zone="catalog-pg-collation">
   <primary>pg_collation</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_collation</structname> describes the
   available collations, which are essentially mappings from an SQL
   name to operating system locale categories.
   See <xref linkend="collation"> for more information.
-->
<structname>pg_collation</structname>カタログは利用可能、SQL名とオペレーティングシステムのロケールカテゴリとの基本的な対応付けを行う照合順序を記述します。
詳細は <xref linkend="collation">を参照してください。
  </para>

  <table>
<!--
   <title><structname>pg_collation</> Columns</title>
-->
   <title><structname>pg_collation</> の列</title>
   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>oid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry></entry>
<!--
      <entry>Row identifier (hidden attribute; must be explicitly selected)</entry>
-->
      <entry>行識別子（隠し属性です。明示的に選択しなければなりません）</entry>
     </row>

     <row>
      <entry><structfield>collname</structfield></entry>
      <entry><type>name</type></entry>
      <entry></entry>
<!--
      <entry>Collation name (unique per namespace and encoding)</entry>
-->
      <entry>照合順序の名前（名前空間およびエンコード方式で一意）</entry>
     </row>

     <row>
      <entry><structfield>collnamespace</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.oid</literal></entry>
      <entry>
<!--
       The OID of the namespace that contains this collation
-->
この照合順序を含む名前空間のOID 
      </entry>
     </row>

     <row>
      <entry><structfield>collowner</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.oid</literal></entry>
<!--
      <entry>Owner of the collation</entry>
-->
      <entry>照合順序の所有者</entry>
     </row>

     <row>
      <entry><structfield>collencoding</structfield></entry>
      <entry><type>int4</type></entry>
      <entry></entry>
<!--
      <entry>Encoding in which the collation is applicable, or -1 if it
       works for any encoding</entry>
-->
      <entry>この照合順序を適用することができるエンコード方式。任意のエンコード方式で動作する場合は-1</entry>
     </row>

     <row>
      <entry><structfield>collcollate</structfield></entry>
      <entry><type>name</type></entry>
      <entry></entry>
<!--
      <entry><symbol>LC_COLLATE</> for this collation object</entry>
-->
      <entry>この照合順序オブジェクト用の<symbol>LC_COLLATE</></entry>
     </row>

     <row>
      <entry><structfield>collctype</structfield></entry>
      <entry><type>name</type></entry>
      <entry></entry>
<!--
      <entry><symbol>LC_CTYPE</> for this collation object</entry>
-->
      <entry>この照合順序オブジェクト用の<symbol>LC_CTYPE</></entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
<!--
   Note that the unique key on this catalog is (<structfield>collname</>,
   <structfield>collencoding</>, <structfield>collnamespace</>) not just
   (<structfield>collname</>, <structfield>collnamespace</>).
   <productname>PostgreSQL</productname> generally ignores all
   collations that do not have <structfield>collencoding</> equal to
   either the current database's encoding or -1, and creation of new entries
   with the same name as an entry with <structfield>collencoding</> = -1
   is forbidden.  Therefore it is sufficient to use a qualified SQL name
   (<replaceable>schema</>.<replaceable>name</>) to identify a collation,
   even though this is not unique according to the catalog definition.
   The reason for defining the catalog this way is that
   <application>initdb</> fills it in at cluster initialization time with
   entries for all locales available on the system, so it must be able to
   hold entries for all encodings that might ever be used in the cluster.
-->
このカタログの一意キーは(<structfield>collname</>, <structfield>collnamespace</>)だけではなく
(<structfield>collname</>,<structfield>collencoding</>, <structfield>collnamespace</>)です。
<productname>PostgreSQL</productname>は通常、<structfield>collencoding</>が現在のデータベースのエンコード方式または-1と一致しない照合順序をすべて無視します。
また、<structfield>collencoding</> = -1を持つ項目と名前が一致する新しい項目の作成は許されません。
したがって照合順序を識別するためには、カタログの定義に従った一意ではない場合であっても、
限定されたSQL名称(<replaceable>schema</>.<replaceable>name</>)を使用することで十分です。
このようにカタログを定義した理由は、クラスタの初期化時に<application>initdb</> がシステムで利用可能なすべてのロケール用の項目でこのカタログにデータを投入するためです。
その為、今後そのクラスタで使用される可能性があるすべてのエンコード方式のエントリーを保持できるようにしなければなりません。
  </para>

  <para>
<!--
   In the <literal>template0</> database, it could be useful to create
   collations whose encoding does not match the database encoding,
   since they could match the encodings of databases later cloned from
   <literal>template0</>.  This would currently have to be done manually.
-->
後で<literal>template0</>から複製されるデータベースのエンコード方式と一致するかもしれないので、
<literal>template0</>データベースのデータベースのエンコード方式と一致しないものの照合順を作成することが有用になるかもしれません。 
現在これは手作業で行う必要があります。 
  </para>
 </sect1>

 <sect1 id="catalog-pg-constraint">
  <title><structname>pg_constraint</structname></title>

  <indexterm zone="catalog-pg-constraint">
   <primary>pg_constraint</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_constraint</structname> stores check, primary
   key, unique, foreign key, and exclusion constraints on tables.
   (Column constraints are not treated specially.  Every column constraint is
   equivalent to some table constraint.)
   Not-null constraints are represented in the <structname>pg_attribute</>
   catalog, not here.
-->
<structname>pg_constraint</structname>カタログはテーブル上の検査制約、プライマリキー制約、一意性制約、外部キー制約、排他制約を格納します
（列制約は特別扱いされていません。
全ての列制約は何らかのテーブル制約と同等です。）
非NULL制約はここではなく、<structname>pg_attribute</>カタログで示されます。 
  </para>

  <para>
<!--
   User-defined constraint triggers (created with <command>CREATE CONSTRAINT
   TRIGGER</>) also give rise to an entry in this table.
-->
(<command>CREATE CONSTRAINT TRIGGER</>で作成される)ユーザ定義の制約トリガもこのテーブルの項目の元になります。
  </para>

  <para>
<!--
   Check constraints on domains are stored here, too.
-->
   ドメイン上の検査制約もここに格納されます。
  </para>

  <table>
<!--
   <title><structname>pg_constraint</> Columns</title>
-->
   <title><structname>pg_constraint</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>oid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry></entry>
<!--
      <entry>Row identifier (hidden attribute; must be explicitly selected)</entry>
-->
      <entry>行識別子（隠し属性です。明示的に選択しなければなりません）</entry>
     </row>

     <row>
      <entry><structfield>conname</structfield></entry>
      <entry><type>name</type></entry>
      <entry></entry>
<!--
      <entry>Constraint name (not necessarily unique!)</entry>
-->
      <entry>制約名（一意である必要はありません）。</entry>
     </row>

     <row>
      <entry><structfield>connamespace</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.oid</literal></entry>
      <entry>
<!--
       The OID of the namespace that contains this constraint
-->
       この制約を含む名前空間のOID。
      </entry>
     </row>

     <row>
      <entry><structfield>contype</structfield></entry>
      <entry><type>char</type></entry>
      <entry></entry>
      <entry>
<!--
        <literal>c</> = check constraint,
        <literal>f</> = foreign key constraint,
        <literal>p</> = primary key constraint,
        <literal>u</> = unique constraint,
        <literal>t</> = constraint trigger,
        <literal>x</> = exclusion constraint
-->
        <literal>c</> = 検査制約、
        <literal>f</> = 外部キー制約、
        <literal>p</> = プライマリキー制約、
        <literal>u</> = 一意性制約、
        <literal>t</> = 制約トリガ,
        <literal>x</> = 排他制約
      </entry>
     </row>

     <row>
      <entry><structfield>condeferrable</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
<!--
      <entry>Is the constraint deferrable?</entry>
-->
      <entry>制約は遅延可能かどうか?</entry>
     </row>

     <row>
      <entry><structfield>condeferred</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
<!--
      <entry>Is the constraint deferred by default?</entry>
-->
      <entry>制約はデフォルトで遅延可能かどうか?</entry>
     </row>

     <row>
      <entry><structfield>convalidated</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
<!--
      <entry>Has the constraint been validated?
       Currently, can only be false for foreign keys and CHECK constraints</entry>
-->
      <entry>制約が検証されているか？現時点では外部キーとチェック制約の場合のみ偽になる可能性があります。</entry>
     </row>

     <row>
      <entry><structfield>conrelid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-class"><structname>pg_class</structname></link>.oid</literal></entry>
<!--
      <entry>The table this constraint is on; 0 if not a table constraint</entry>
-->
      <entry>この制約が存在しているテーブルです。テーブル制約でなければ0です。</entry>
     </row>

     <row>
      <entry><structfield>contypid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-type"><structname>pg_type</structname></link>.oid</literal></entry>
<!--
      <entry>The domain this constraint is on; 0 if not a domain constraint</entry>
-->
      <entry>この制約が存在しているドメインです。ドメイン制約でなければ0です。</entry>
     </row>

     <row>
      <entry><structfield>conindid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-class"><structname>pg_class</structname></link>.oid</literal></entry>
<!--
      <entry>The index supporting this constraint, if it's a unique, primary
       key, foreign key, or exclusion constraint; else 0</entry>
-->
      <entry>
一意性制約、プライマリキー制約、外部キー制約、排他制約の場合、この制約をサポートするインデックス。
さもなくばゼロ。
      </entry>
     </row>

     <row>
      <entry><structfield>confrelid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-class"><structname>pg_class</structname></link>.oid</literal></entry>
<!--
      <entry>If a foreign key, the referenced table; else 0</entry>
-->
      <entry>外部キーであれば、参照されるテーブルです。そうでなければ0です。</entry>
     </row>

     <row>
      <entry><structfield>confupdtype</structfield></entry>
      <entry><type>char</type></entry>
      <entry></entry>
<!--
      <entry>Foreign key update action code:
            <literal>a</> = no action,
            <literal>r</> = restrict,
            <literal>c</> = cascade,
            <literal>n</> = set null,
            <literal>d</> = set default
          </entry>
-->
      <entry>外部キー更新アクションコード:
            <literal>a</> = no action,
            <literal>r</> = restrict,
            <literal>c</> = cascade,
            <literal>n</> = set null,
            <literal>d</> = set default
</entry>
     </row>

     <row>
      <entry><structfield>confdeltype</structfield></entry>
      <entry><type>char</type></entry>
      <entry></entry>
<!--
      <entry>Foreign key deletion action code:
            <literal>a</> = no action,
            <literal>r</> = restrict,
            <literal>c</> = cascade,
            <literal>n</> = set null,
            <literal>d</> = set default
          </entry>
-->
      <entry>外部キー削除アクションコード:
            <literal>a</> = no action,
            <literal>r</> = restrict,
            <literal>c</> = cascade,
            <literal>n</> = set null,
            <literal>d</> = set default
          </entry>
     </row>

     <row>
      <entry><structfield>confmatchtype</structfield></entry>
      <entry><type>char</type></entry>
      <entry></entry>
<!--
      <entry>Foreign key match type:
            <literal>f</> = full,
            <literal>p</> = partial,
            <literal>s</> = simple
          </entry>
-->
      <entry>外部キーの一致型:
            <literal>f</> = full,
            <literal>p</> = partial,
            <literal>s</> = simple
          </entry>
     </row>

     <row>
      <entry><structfield>conislocal</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
<!--
      <entry>
       This constraint is defined locally for the relation.  Note that a
       constraint can be locally defined and inherited simultaneously.
      </entry>
-->
      <entry>
       この制約はリレーションでローカルに定義されています。制約はローカルに定義されていて同時に継承されます。
      </entry>
     </row>

     <row>
      <entry><structfield>coninhcount</structfield></entry>
      <entry><type>int4</type></entry>
      <entry></entry>
<!--
      <entry>
       The number of direct inheritance ancestors this constraint has.
       A constraint with
       a nonzero number of ancestors cannot be dropped nor renamed.
      </entry>
-->
      <entry>
この制約がもつ直系の先祖の数。
先祖の数がゼロではない制約は削除や改名はできません。
      </entry>
     </row>

     <row>
      <entry><structfield>connoinherit</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
<!--
      <entry>
       This constraint is defined locally for the relation.  It is a
       non-inheritable constraint.
      </entry>
-->
      <entry>
この制約はリレーションのためにローカルで定義されます。これは非継承制約です。
      </entry>
     </row>


     <row>
      <entry><structfield>conkey</structfield></entry>
      <entry><type>int2[]</type></entry>
      <entry><literal><link linkend="catalog-pg-attribute"><structname>pg_attribute</structname></link>.attnum</></entry>
<!--
      <entry>If a table constraint (including foreign keys, but not constraint
       triggers), list of the constrained columns</entry>
-->
      <entry>テーブル制約(外部キーを含みますが制約トリガは含みません)であれば、その制約によって制約される列のリスト</entry>
     </row>

     <row>
      <entry><structfield>confkey</structfield></entry>
      <entry><type>int2[]</type></entry>
      <entry><literal><link linkend="catalog-pg-attribute"><structname>pg_attribute</structname></link>.attnum</></entry>
<!--
      <entry>If a foreign key, list of the referenced columns</entry>
-->
      <entry>外部キーであれば、参照される列のリスト</entry>
     </row>

     <row>
      <entry><structfield>conpfeqop</structfield></entry>
      <entry><type>oid[]</type></entry>
      <entry><literal><link linkend="catalog-pg-operator"><structname>pg_operator</structname></link>.oid</></entry>
<!--
      <entry>If a foreign key, list of the equality operators for PK = FK comparisons</entry>
-->
      <entry>外部キーであれば、PK = FKの比較のための同値演算子のリスト</entry>
     </row>

     <row>
      <entry><structfield>conppeqop</structfield></entry>
      <entry><type>oid[]</type></entry>
      <entry><literal><link linkend="catalog-pg-operator"><structname>pg_operator</structname></link>.oid</></entry>
<!--
      <entry>If a foreign key, list of the equality operators for PK = PK comparisons</entry>
-->
      <entry>外部キーであれば、PK = PKの比較のための同値演算子のリスト</entry>
     </row>

     <row>
      <entry><structfield>conffeqop</structfield></entry>
      <entry><type>oid[]</type></entry>
      <entry><literal><link linkend="catalog-pg-operator"><structname>pg_operator</structname></link>.oid</></entry>
<!--
      <entry>If a foreign key, list of the equality operators for FK = FK comparisons</entry>
-->
      <entry>外部キーであれば、FK = FKの比較のための同値演算子のリスト</entry>
     </row>

     <row>
      <entry><structfield>conexclop</structfield></entry>
      <entry><type>oid[]</type></entry>
      <entry><literal><link linkend="catalog-pg-operator"><structname>pg_operator</structname></link>.oid</></entry>
<!--
      <entry>If an exclusion constraint, list of the per-column exclusion operators</entry>
-->
      <entry>
排他制約の場合、列単位の排他演算子のリスト。
      </entry>
     </row>

     <row>
      <entry><structfield>conbin</structfield></entry>
      <entry><type>pg_node_tree</type></entry>
      <entry></entry>
<!--
      <entry>If a check constraint, an internal representation of the expression</entry>
-->
      <entry>検査制約であれば、式の内部表現形式</entry>
     </row>

     <row>
      <entry><structfield>consrc</structfield></entry>
      <entry><type>text</type></entry>
      <entry></entry>
<!--
      <entry>If a check constraint, a human-readable representation of the expression</entry>
-->
      <entry>検査制約であれば、人間が見てわかる形式の式</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
<!--
   In the case of an exclusion constraint, <structfield>conkey</structfield>
   is only useful for constraint elements that are simple column references.
   For other cases, a zero appears in <structfield>conkey</structfield>
   and the associated index must be consulted to discover the expression
   that is constrained.  (<structfield>conkey</structfield> thus has the
   same contents as <structname>pg_index</>.<structfield>indkey</> for the
   index.)
-->
排他制約の場合、単純な列参照である制約要素でのみ<structfield>conkey</structfield>が有用です。
その他の場合、<structfield>conkey</structfield>はゼロであり、関連するインデックスは制約される式を調査して見つけなければなりません。
（したがってインデックスでは<structfield>conkey</structfield>は<structname>pg_index</>.<structfield>indkey</>の内容と同じものを持ちます。）
  </para>

  <note>
   <para>
<!--
    <structfield>consrc</structfield> is not updated when referenced objects
    change; for example, it won't track renaming of columns.  Rather than
    relying on this field, it's best to use <function>pg_get_constraintdef()</>
    to extract the definition of a check constraint.
-->
<structfield>consrc</structfield>は参照されているオブジェクトが変更されても更新されません。
例えば列名の変更を追跡しません。
検査制約を引き出すためには、このフィールドに信頼を寄せるよりも<function>pg_get_constraintdef()</>を使うのが最善です。
   </para>
  </note>

  <note>
   <para>
<!--
    <literal>pg_class.relchecks</literal> needs to agree with the
    number of check-constraint entries found in this table for each
    relation.
-->
<literal>pg_class.relchecks</literal>はそれぞれのリレーションに対してこのテーブルで検出された検査制約の項目数と一致しなければなりません。
   </para>
  </note>

 </sect1>


 <sect1 id="catalog-pg-conversion">
  <title><structname>pg_conversion</structname></title>

  <indexterm zone="catalog-pg-conversion">
   <primary>pg_conversion</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_conversion</structname> describes
   encoding conversion procedures.  See <xref linkend="sql-createconversion">
   for more information.
-->
<structname>pg_conversion</structname>カタログはエンコード方式変換プロシージャを記述します。
詳細は<xref linkend="sql-createconversion">を参照してください。
  </para>

  <table>
<!--
   <title><structname>pg_conversion</> Columns</title>
-->
   <title><structname>pg_conversion</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>oid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry></entry>
<!--
      <entry>Row identifier (hidden attribute; must be explicitly selected)</entry>
-->
      <entry>行識別子（隠し属性です。明示的に選択しなければなりません）</entry>
     </row>

     <row>
      <entry><structfield>conname</structfield></entry>
      <entry><type>name</type></entry>
      <entry></entry>
<!--
      <entry>Conversion name (unique within a namespace)</entry>
-->
      <entry>変換名（名前空間内で一意）</entry>
     </row>

     <row>
      <entry><structfield>connamespace</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.oid</literal></entry>
      <entry>
<!--
       The OID of the namespace that contains this conversion
-->
       この変換を含む名前空間のOID。
      </entry>
     </row>

     <row>
      <entry><structfield>conowner</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.oid</literal></entry>
<!--
      <entry>Owner of the conversion</entry>
-->
      <entry>変換の所有者</entry>
     </row>

     <row>
      <entry><structfield>conforencoding</structfield></entry>
      <entry><type>int4</type></entry>
      <entry></entry>
<!--
      <entry>Source encoding ID</entry>
-->
      <entry>エンコード元のID</entry>
     </row>

     <row>
      <entry><structfield>contoencoding</structfield></entry>
      <entry><type>int4</type></entry>
      <entry></entry>
<!--
      <entry>Destination encoding ID</entry>
-->
      <entry>エンコード先のID</entry>
     </row>

     <row>
      <entry><structfield>conproc</structfield></entry>
      <entry><type>regproc</type></entry>
      <entry><literal><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.oid</literal></entry>
<!--
      <entry>Conversion procedure</entry>
-->
      <entry>変換プロシージャ</entry>
     </row>

     <row>
      <entry><structfield>condefault</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
<!--
      <entry>True if this is the default conversion</entry>
-->
      <entry>これがデフォルト変換である場合は真</entry>
     </row>

    </tbody>
   </tgroup>
  </table>

 </sect1>

 <sect1 id="catalog-pg-database">
  <title><structname>pg_database</structname></title>

  <indexterm zone="catalog-pg-database">
   <primary>pg_database</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_database</structname> stores information about
   the available databases.  Databases are created with the <xref
   linkend="sql-createdatabase"> command.
   Consult <xref linkend="managing-databases"> for details about the meaning
   of some of the parameters.
-->
<structname>pg_database</structname>カタログには使用可能なデータベースの情報が格納されます。
データベースは<xref linkend="sql-createdatabase">コマンドで作成されます。
いくつかのパラメータの詳細については<xref linkend="managing-databases">を参照してください。
  </para>

  <para>
<!--
   Unlike most system catalogs, <structname>pg_database</structname>
   is shared across all databases of a cluster: there is only one
   copy of <structname>pg_database</structname> per cluster, not
   one per database.
-->
ほとんどのシステムカタログとは異なり、<structname>pg_database</structname>はクラスタにおける全てのデータベースにわたって共有されます。
データベース毎に1つではなく、クラスタ毎にたった1つだけ<structname>pg_database</structname>のコピーが存在します。
  </para>

  <table>
<!--
   <title><structname>pg_database</> Columns</title>
-->
   <title><structname>pg_database</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>oid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry></entry>
<!--
      <entry>Row identifier (hidden attribute; must be explicitly selected)</entry>
-->
      <entry>行識別子（隠し属性です。明示的に選択しなければなりません）</entry>
     </row>

     <row>
      <entry><structfield>datname</structfield></entry>
      <entry><type>name</type></entry>
      <entry></entry>
<!--
      <entry>Database name</entry>
-->
      <entry>データベース名</entry>
     </row>

     <row>
      <entry><structfield>datdba</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.oid</literal></entry>
<!--
      <entry>Owner of the database, usually the user who created it</entry>
-->
      <entry>データベースの所有者。通常はそのデータベースの作成者</entry>
     </row>

     <row>
      <entry><structfield>encoding</structfield></entry>
      <entry><type>int4</type></entry>
      <entry></entry>
<!--
      <entry>Character encoding for this database
          (<function>pg_encoding_to_char()</function> can translate
           this number to the encoding name)</entry>
-->
      <entry>
このデータベースの文字エンコード方式。
（<function>pg_encoding_to_char()</function>で、この番号からエンコード方式名称に変換できます。）
      </entry>
     </row>

     <row>
      <entry><structfield>datcollate</structfield></entry>
      <entry><type>name</type></entry>
      <entry></entry>
<!--
      <entry>LC_COLLATE for this database</entry>
-->
      <entry>このデータベースのLC_COLLATE</entry>
     </row>

     <row>
      <entry><structfield>datctype</structfield></entry>
      <entry><type>name</type></entry>
      <entry></entry>
<!--
      <entry>LC_CTYPE for this database</entry>
-->
      <entry>このデータベースのLC_CTYPE</entry>
     </row>

     <row>
      <entry><structfield>datistemplate</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
      <entry>
<!--
       If true, then this database can be cloned by
       any user with <literal>CREATEDB</> privileges;
       if false, then only superusers or the owner of
       the database can clone it.
-->
trueの場合、このデータベースはどのユーザでも<literal>CREATEDB</>を使って複製することができます。
falseの場合、スーパーユーザまたはデータベースの所有者だけが複製することができます。
      </entry>
     </row>

     <row>
      <entry><structfield>datallowconn</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
      <entry>
<!--
       If false then no one can connect to this database.  This is
       used to protect the <literal>template0</> database from being altered.
-->
偽の時はこのデータベースには誰も接続できません。
これは<literal>template0</>データベースが変更されることを防ぐために使用されます。
      </entry>
     </row>

     <row>
      <entry><structfield>datconnlimit</structfield></entry>
      <entry><type>int4</type></entry>
      <entry></entry>
      <entry>
<!--
       Sets maximum number of concurrent connections that can be made
       to this database.  -1 means no limit.
-->
このデータベースに対する同時のコネクションの最大数を設定します。
-1は無制限を意味します。
      </entry>
     </row>

     <row>
      <entry><structfield>datlastsysoid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry></entry>
      <entry>
<!--
       Last system OID in the database; useful
       particularly to <application>pg_dump</application>
-->
データベース最終のシステムOID。
<application>pg_dump</application>では特に有用です。
      </entry>
     </row>

     <row>
      <entry><structfield>datfrozenxid</structfield></entry>
      <entry><type>xid</type></entry>
      <entry></entry>
      <entry>
<!--
        All transaction IDs before this one have been replaced with a permanent
       (<quote>frozen</>) transaction ID in this database.  This is used to
       track whether the database needs to be vacuumed in order to prevent
       transaction ID wraparound or to allow <literal>pg_clog</> to be shrunk.
       It is the minimum of the per-table
       <structname>pg_class</>.<structfield>relfrozenxid</> values.
-->
このデータベースの中で、この値よりも前のトランザクションIDは、永遠（<quote>凍結</>）トランザクションIDを持つように変更されています。
これは、このデータベースに対して、トランザクションID周回を防ぎ、かつ、<literal>pg_clog</>を縮小させることを目的としたバキュームを行うかどうかを追跡するために使用されます。
これはテーブル毎の<structname>pg_class</>.<structfield>relfrozenxid</>値の最小値になります。
      </entry>
     </row>

     <row>
      <entry><structfield>datminmxid</structfield></entry>
      <entry><type>xid</type></entry>
      <entry></entry>
      <entry>
<!--
       All multitransaction IDs before this one have been replaced with a
       transaction ID in this database.  This is used to
       track whether the database needs to be vacuumed in order to prevent
       transaction ID wraparound or to allow <literal>pg_clog</> to be shrunk.
       It is the minimum of the per-table
       <structname>pg_class</>.<structfield>relminmxid</> values.
-->
このデータベース内のトランザクションIDで置換される前のすべてのマルチトランザクションID。
これは、トランザクションIDの周回問題を防ぐ、または<literal>pg_clog</>を縮小させるためにデータベースをバキュームする必要があるかどうかを追跡するために使用されます。
これはテーブル毎の<structname>pg_class</>.<structfield>relminmxid</>の最小値です。
      </entry>
     </row>

     <row>
      <entry><structfield>dattablespace</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-tablespace"><structname>pg_tablespace</structname></link>.oid</literal></entry>
      <entry>
<!--
       The default tablespace for the database.
       Within this database, all tables for which
       <structname>pg_class</>.<structfield>reltablespace</> is zero
       will be stored in this tablespace; in particular, all the non-shared
       system catalogs will be there.
-->
データベース用のデフォルトテーブル空間。
このデータベース内で<structname>pg_class</>.<structfield>reltablespace</>がゼロであるすべてのテーブルは、このテーブル空間に格納されます。
特に、共有されていないすべてのシステムカタログはこのテーブル空間にあります。
      </entry>
     </row>

     <row>
      <entry><structfield>datacl</structfield></entry>
      <entry><type>aclitem[]</type></entry>
      <entry></entry>
<!--
      <entry>
       Access privileges; see
       <xref linkend="sql-grant"> and
       <xref linkend="sql-revoke">
       for details
      </entry>
-->
<entry>
アクセス権限。
<xref linkend="sql-grant">と<xref linkend="sql-revoke">を参照してください。
</entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect1>


 <sect1 id="catalog-pg-db-role-setting">
  <title><structname>pg_db_role_setting</structname></title>

  <indexterm zone="catalog-pg-db-role-setting">
   <primary>pg_db_role_setting</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_db_role_setting</structname> records the default
   values that have been set for run-time configuration variables,
   for each role and database combination.
-->
<structname>pg_db_role_setting</structname>カタログはロールとデータベースの組み合わせ毎に、実行時設定変数に設定されるデフォルト値を記録します。
  </para>

  <para>
<!--
   Unlike most system catalogs, <structname>pg_db_role_setting</structname>
   is shared across all databases of a cluster: there is only one
   copy of <structname>pg_db_role_setting</structname> per cluster, not
   one per database.
-->
ほとんどのカタログとは異なり、<structname>pg_db_role_setting</structname>はクラスタのすべてのデータベースにまたがって共有されます。
つまりクラスタには<structname>pg_db_role_setting</structname>のコピーは1つしかありません。
データベース毎に1つではありません。
  </para>

  <table>
<!--
   <title><structname>pg_db_role_setting</> Columns</title>
-->
   <title><structname>pg_db_role_setting</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>setdatabase</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-database"><structname>pg_database</structname></link>.oid</literal></entry>
<!--
      <entry>The OID of the database the setting is applicable to, or zero if not database-specific</entry>
-->
      <entry>この設定が適用されるデータベースのOID。データベース固有でなければゼロです。</entry>
     </row>

     <row>
      <entry><structfield>setrole</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.oid</literal></entry>
<!--
      <entry>The OID of the role the setting is applicable to, or zero if not role-specific</entry>
-->
      <entry>この設定が適用されるロールのOID。ロール固有でなければゼロです。</entry>
     </row>

     <row>
      <entry><structfield>setconfig</structfield></entry>
      <entry><type>text[]</type></entry>
      <entry></entry>
<!--
      <entry>Defaults for run-time configuration variables</entry>
-->
      <entry>実行時設定パラメータのデフォルト。</entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect1>


 <sect1 id="catalog-pg-default-acl">
  <title><structname>pg_default_acl</structname></title>

  <indexterm zone="catalog-pg-default-acl">
   <primary>pg_default_acl</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_default_acl</> stores initial
   privileges to be assigned to newly created objects.
-->
<structname>pg_default_acl</>カタログには、新規に作成されたオブジェクトに割り当てられた初期権限が格納されます。
  </para>

  <table>
<!--
   <title><structname>pg_default_acl</> Columns</title>
-->
   <title><structname>pg_default_acl</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>oid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry></entry>
<!--
      <entry>Row identifier (hidden attribute; must be explicitly selected)</entry>
-->
      <entry>行識別子（隠し属性です。明示的に選択しなければなりません）</entry>
     </row>

     <row>
      <entry><structfield>defaclrole</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.oid</literal></entry>
<!--
      <entry>The OID of the role associated with this entry</entry>
-->
      <entry>この項目に関連するロールのOID。</entry>
     </row>

     <row>
      <entry><structfield>defaclnamespace</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.oid</literal></entry>
<!--
      <entry>The OID of the namespace associated with this entry,
       or 0 if none</entry>
-->
      <entry>
この項目に関連する名前空間のOID。何もない場合はゼロです。
      </entry>
     </row>

     <row>
      <entry><structfield>defaclobjtype</structfield></entry>
      <entry><type>char</type></entry>
      <entry></entry>
      <entry>
<!--
       Type of object this entry is for:
       <literal>r</> = relation (table, view),
       <literal>S</> = sequence,
       <literal>f</> = function,
       <literal>T</> = type
-->
この項目のオブジェクト種類。
<literal>r</> = リレーション(テーブル、ビュー)、<literal>S</> = シーケンス、<literal>f</> = 関数、<literal>T</> = 型
      </entry>
     </row>

     <row>
      <entry><structfield>defaclacl</structfield></entry>
      <entry><type>aclitem[]</type></entry>
      <entry></entry>
      <entry>
<!--
       Access privileges that this type of object should have on creation
-->
この種類のオブジェクトが作成時に保持しなければならないアクセス権限。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
<!--
   A <structname>pg_default_acl</> entry shows the initial privileges to
   be assigned to an object belonging to the indicated user.  There are
   currently two types of entry: <quote>global</> entries with
   <structfield>defaclnamespace</> = 0, and <quote>per-schema</> entries
   that reference a particular schema.  If a global entry is present then
   it <emphasis>overrides</> the normal hard-wired default privileges
   for the object type.  A per-schema entry, if present, represents privileges
   to be <emphasis>added to</> the global or hard-wired default privileges.
-->
<structname>pg_default_acl</>の項目は、指示されたユーザに属するオブジェクトに割り当てられる初期権限を示します。
現在2種類の項目があります。
<structfield>defaclnamespace</> = 0を持つ<quote>大域的</>な項目と特定のスキーマを参照する<quote>スキーマ単位</>の項目です。
大域的な項目が存在する場合、その種類のオブジェクトの通常の組み込まれたデフォルト権限を<emphasis>上書き</>します。
もしスキーマ単位の項目があれば、それは大域的な権限または組み込まれたデフォルト権限に<emphasis>追加される</>権限を表します。
  </para>

  <para>
<!--
   Note that when an ACL entry in another catalog is null, it is taken
   to represent the hard-wired default privileges for its object,
   <emphasis>not</> whatever might be in <structname>pg_default_acl</>
   at the moment.  <structname>pg_default_acl</> is only consulted during
   object creation.
-->
他のカタログ内のACL項目がNULLの場合、その時の<structname>pg_default_acl</>内のものでは<emphasis>ではなく</>そのオブジェクトの組み込まれたデフォルト権限を表すものが取られます。
<structname>pg_default_acl</>はオブジェクトの生成時のみに考慮されます。
  </para>

 </sect1>


 <sect1 id="catalog-pg-depend">
  <title><structname>pg_depend</structname></title>

  <indexterm zone="catalog-pg-depend">
   <primary>pg_depend</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_depend</structname> records the dependency
   relationships between database objects.  This information allows
   <command>DROP</> commands to find which other objects must be dropped
   by <command>DROP CASCADE</> or prevent dropping in the <command>DROP
   RESTRICT</> case.
-->
<structname>pg_depend</structname>カタログは、データベースオブジェクト間の依存関係を記録します。
この情報によって<command>DROP</>コマンドが、他のどのオブジェクトを<command>DROP CASCADE</>で削除する必要があるか、また、<command>DROP RESTRICT</>で削除を防止するかの場合を判断します。
  </para>

  <para>
<!--
   See also <link linkend="catalog-pg-shdepend"><structname>pg_shdepend</structname></link>,
   which performs a similar function for dependencies involving objects
   that are shared across a database cluster.
-->
<link linkend="catalog-pg-shdepend"><structname>pg_shdepend</structname></link>も参照してください。
これはデータベースクラスタ間で共有されるオブジェクトの依存関係に対する似たような機能を持っています。
  </para>

  <table>
<!--
   <title><structname>pg_depend</> Columns</title>
-->
   <title><structname>pg_depend</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--

      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>classid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-class"><structname>pg_class</structname></link>.oid</literal></entry>
<!--
      <entry>The OID of the system catalog the dependent object is in</entry>
-->
      <entry>依存するオブジェクトを含んだシステムカタログのOID</entry>
     </row>

     <row>
      <entry><structfield>objid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry>any OID column</entry>
<!--
      <entry>The OID of the specific dependent object</entry>
-->
      <entry>特定の依存するオブジェクトのOID</entry>
     </row>

     <row>
      <entry><structfield>objsubid</structfield></entry>
      <entry><type>int4</type></entry>
      <entry></entry>
      <entry>
<!--
       For a table column, this is the column number (the
       <structfield>objid</> and <structfield>classid</> refer to the
       table itself).  For all other object types, this column is
       zero.
-->
テーブル列の場合、これは列番号です（<structfield>objid</>と<structfield>classid</>はテーブル自身を参照します）。
他のすべての種類のオブジェクトでは、このフィールドはゼロです。
      </entry>
     </row>

     <row>
      <entry><structfield>refclassid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-class"><structname>pg_class</structname></link>.oid</literal></entry>
<!--
      <entry>The OID of the system catalog the referenced object is in</entry>
-->
      <entry>参照されるオブジェクトが存在するシステムカタログのOID</entry>
     </row>

     <row>
      <entry><structfield>refobjid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry>any OID column</entry>
<!--
      <entry>The OID of the specific referenced object</entry>
-->
      <entry>特定の参照されるオブジェクトのOID</entry>
     </row>

     <row>
      <entry><structfield>refobjsubid</structfield></entry>
      <entry><type>int4</type></entry>
      <entry></entry>
      <entry>
<!--
       For a table column, this is the column number (the
       <structfield>refobjid</> and <structfield>refclassid</> refer
       to the table itself).  For all other object types, this column
       is zero.
-->
テーブル列の場合、これは列番号です（<structfield>refobjid</>と<structfield>refclassid</>はテーブル自身を参照します）。
他のすべての種類のオブジェクトでは、このフィールドはゼロです。
      </entry>
     </row>

     <row>
      <entry><structfield>deptype</structfield></entry>
      <entry><type>char</type></entry>
      <entry></entry>
      <entry>
<!--
       A code defining the specific semantics of this dependency relationship; see text
-->
       この依存関係の特定のセマンティクスを定義するコード（後述）。
      </entry>
     </row>

    </tbody>
   </tgroup>
  </table>

  <para>
<!--
   In all cases, a <structname>pg_depend</structname> entry indicates that the
   referenced object cannot be dropped without also dropping the dependent
   object.  However, there are several subflavors identified by
   <structfield>deptype</>:
-->
すべての場合において、<structname>pg_depend</structname>エントリは依存するオブジェクトも削除しない限り、参照されるオブジェクトを削除できないことを示します。
もっとも、<structfield>deptype</>によって指定される以下のようないくつかのオプションもあります。

   <variablelist>
    <varlistentry>
     <term><symbol>DEPENDENCY_NORMAL</> (<literal>n</>)</term>
     <listitem>
      <para>
<!--
       A normal relationship between separately-created objects.  The
       dependent object can be dropped without affecting the
       referenced object.  The referenced object can only be dropped
       by specifying <literal>CASCADE</>, in which case the dependent
       object is dropped, too.  Example: a table column has a normal
       dependency on its data type.
-->
個別に作成されたオブジェクト間の通常の関係です。
依存するオブジェクトは参照されるオブジェクトに影響を与えずに削除できます。
参照されるオブジェクトは<literal>CASCADE</>を指定することによってのみ削除することができます。
この場合は依存するオブジェクトも削除されます。 
例：テーブルの列はそのデータ型に対して通常の依存関係を持ちます。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><symbol>DEPENDENCY_AUTO</> (<literal>a</>)</term>
     <listitem>
      <para>
<!--
       The dependent object can be dropped separately from the
       referenced object, and should be automatically dropped
       (regardless of <literal>RESTRICT</> or <literal>CASCADE</>
       mode) if the referenced object is dropped.  Example: a named
       constraint on a table is made autodependent on the table, so
       that it will go away if the table is dropped.
-->
依存するオブジェクトは参照されるオブジェクトから独立して削除することができます。
そして、参照されるオブジェクトが削除される時は（<literal>RESTRICT</>もしくは<literal>CASCADE</>モードに関わりなく）依存するオブジェクトも自動的に削除されなければなりません。
例：テーブル上の名前付き制約はテーブル上に自動設定されているため、テーブルが削除されるとなくなります。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><symbol>DEPENDENCY_INTERNAL</> (<literal>i</>)</term>
     <listitem>
      <para>
<!--
       The dependent object was created as part of creation of the
       referenced object, and is really just a part of its internal
       implementation.  A <command>DROP</> of the dependent object
       will be disallowed outright (we'll tell the user to issue a
       <command>DROP</> against the referenced object, instead).  A
       <command>DROP</> of the referenced object will be propagated
       through to drop the dependent object whether
       <command>CASCADE</> is specified or not.  Example: a trigger
       that's created to enforce a foreign-key constraint is made
       internally dependent on the constraint's
       <structname>pg_constraint</> entry.
-->
依存するオブジェクトは参照されるオブジェクトの作成時に作成されたもので、実際に内部実装の一部に過ぎません。
依存するオブジェクトに対して<command>DROP</>コマンドを直接的に実行できません
（その代わりに、参照されるオブジェクトに対して<command>DROP</>を実行するように指示されます）。
参照されるオブジェクトに<command>DROP</>を実行すると、<command>CASCADE</>が指定されているかどうかに関わらず、依存するオブジェクトも削除されます。
例：外部キー制約を強制するために作成されたトリガは内部的に制約の<structname>pg_constraint</>項目に依存しています。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><symbol>DEPENDENCY_EXTENSION</> (<literal>e</>)</term>
     <listitem>
      <para>
<!--
       The dependent object is a member of the <firstterm>extension</> that is
       the referenced object (see
       <link linkend="catalog-pg-extension"><structname>pg_extension</structname></link>).
       The dependent object can be dropped only via
       <command>DROP EXTENSION</> on the referenced object.  Functionally
       this dependency type acts the same as an internal dependency, but
       it's kept separate for clarity and to simplify <application>pg_dump</>.
-->
依存するオブジェクトは参照されるオブジェクトの<firstterm>extension</>のメンバです（<link linkend="catalog-pg-extension"><structname>pg_extension</structname></link>参照）。
依存するオブジェクトは参照されるオブジェクトに対する<command>DROP EXTENSION</>経由でのみ削除することができます。
機能的にはこの種類の依存関係は内部依存関係と同様に動作しますが、明確さと<application>pg_dump</>を単純化するために別々に保持されます。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><symbol>DEPENDENCY_PIN</> (<literal>p</>)</term>
     <listitem>
      <para>
<!--
       There is no dependent object; this type of entry is a signal
       that the system itself depends on the referenced object, and so
       that object must never be deleted.  Entries of this type are
       created only by <command>initdb</command>.  The columns for the
       dependent object contain zeroes.
-->
依存するオブジェクトはありません。
この種類の項目は、参照されるオブジェクトにシステム自体が依存し、したがってオブジェクトを絶対に削除してはならないことを示します。
この種類の項目は<command>initdb</command>の実行時にのみ作成されます。
依存するオブジェクト列にはゼロが含まれます。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>

<!--
   Other dependency flavors might be needed in future.
-->
将来的に、他の依存関係のオプションが必要になる可能性があります。
  </para>

 </sect1>


 <sect1 id="catalog-pg-description">
  <title><structname>pg_description</structname></title>

  <indexterm zone="catalog-pg-description">
   <primary>pg_description</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_description</> stores optional descriptions
   (comments) for each database object.  Descriptions can be manipulated
   with the <xref linkend="sql-comment"> command and viewed with
   <application>psql</application>'s <literal>\d</literal> commands.
   Descriptions of many built-in system objects are provided in the initial
   contents of <structname>pg_description</structname>.
-->
各データベースオブジェクトに対して付けられたオプションの補足説明（コメント）は<structname>pg_description</>カタログに格納されます。
補足説明は<xref linkend="sql-comment">コマンドで編集でき、<application>psql</application>の<literal>\d</literal>コマンドで表示できます。
多くの組み込み型のシステムオブジェクトの説明は、<structname>pg_description</structname>の最初の部分で提供されています。
  </para>

  <para>
<!--
   See also <link linkend="catalog-pg-shdescription"><structname>pg_shdescription</structname></link>,
   which performs a similar function for descriptions involving objects that
   are shared across a database cluster.
-->
<link linkend="catalog-pg-shdescription"><structname>pg_shdescription</structname></link>も参照してください。
こちらは、データベースクラスタに渡って共有されるオブジェクトに関する説明について、同様の機能を行います。
  </para>

  <table>
<!--
   <title><structname>pg_description</> Columns</title>
-->
   <title><structname>pg_description</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>objoid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry>any OID column</entry>
<!--
      <entry>The OID of the object this description pertains to</entry>
-->
      <entry>この補足説明が属するオブジェクトのOID</entry>
     </row>

     <row>
      <entry><structfield>classoid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-class"><structname>pg_class</structname></link>.oid</literal></entry>
<!--
      <entry>The OID of the system catalog this object appears in</entry>
-->
      <entry>このオブジェクトが現れるシステムカタログのOID</entry>
     </row>

     <row>
      <entry><structfield>objsubid</structfield></entry>
      <entry><type>int4</type></entry>
      <entry></entry>
      <entry>
<!--
       For a comment on a table column, this is the column number (the
       <structfield>objoid</> and <structfield>classoid</> refer to
       the table itself).  For all other object types, this column is
       zero.
-->
テーブル列についてのコメントの場合、これは列の（<structfield>objoid</>もしくは<structfield>classoid</>はテーブル自身を参照します）列番号です。
他のすべての種類のオブジェクトでは、このフィールドはゼロです。
      </entry>
     </row>

     <row>
      <entry><structfield>description</structfield></entry>
      <entry><type>text</type></entry>
      <entry></entry>
<!--
      <entry>Arbitrary text that serves as the description of this object</entry>
-->
      <entry>このオブジェクトの説明となる任意のテキスト</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

 </sect1>


 <sect1 id="catalog-pg-enum">
  <title><structname>pg_enum</structname></title>

  <indexterm zone="catalog-pg-enum">
   <primary>pg_enum</primary>
  </indexterm>

<!--
  <para>
   The <structname>pg_enum</structname> catalog contains entries
   showing the values and labels for each enum type. The
   internal representation of a given enum value is actually the OID
   of its associated row in <structname>pg_enum</structname>.
  </para>
-->
  <para>
<structname>pg_enum</structname>カタログは、各列挙型についてその値とラベルを示す項目を含みます。
ある与えられた列挙値の内部表現は、実際には<structname>pg_enum</structname>内の関連付けられた行のOIDです。
  </para>

  <table>
<!--
   <title><structname>pg_enum</> Columns</title>
-->
   <title><structname>pg_enum</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>oid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry></entry>
<!--
      <entry>Row identifier (hidden attribute; must be explicitly selected)</entry>
-->
      <entry>行識別子（隠し属性です。明示的に選択しなければなりません）</entry>
     </row>

     <row>
      <entry><structfield>enumtypid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-type"><structname>pg_type</structname></link>.oid</literal></entry>
<!--
      <entry>The OID of the <structname>pg_type</> entry owning this enum value</entry>
-->
      <entry>この列挙値を所有している<structname>pg_type</>項目のOID</entry>
     </row>

     <row>
      <entry><structfield>enumsortorder</structfield></entry>
      <entry><type>float4</type></entry>
      <entry></entry>
<!--
      <entry>The sort position of this enum value within its enum type</entry>
-->
      <entry>列挙型におけるこの列挙値のソート位置</entry>
     </row>

     <row>
      <entry><structfield>enumlabel</structfield></entry>
      <entry><type>name</type></entry>
      <entry></entry>
<!--
      <entry>The textual label for this enum value</entry>
-->
      <entry>この列挙値のテキストラベル</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
<!--
   The OIDs for <structname>pg_enum</structname> rows follow a special
   rule: even-numbered OIDs are guaranteed to be ordered in the same way
   as the sort ordering of their enum type.  That is, if two even OIDs
   belong to the same enum type, the smaller OID must have the smaller
   <structfield>enumsortorder</structfield> value.  Odd-numbered OID values
   need bear no relationship to the sort order.  This rule allows the
   enum comparison routines to avoid catalog lookups in many common cases.
   The routines that create and alter enum types attempt to assign even
   OIDs to enum values whenever possible.
-->
<structname>pg_enum</structname>行のOIDは次のような特別な規則に従います。
列挙型のソート順序と同じ順序で並んだ偶数のOIDが保証されています。
つまり、２つの偶数のOIDが同じ列挙型に属する場合、OIDの小さい方がより小さい<structfield>enumsortorder</structfield>値を持たなければなりません。
奇数のOID値はソート順序に関連を持ってはなりません。
この規則により列挙の比較処理は多くの一般的な場合でカタログの検索を防ぐことができます。
列挙型の作成および変更を行う処理は、可能であれば偶数のOIDを列挙値に割り当てようとします。
  </para>

  <para>
<!--
   When an enum type is created, its members are assigned sort-order
   positions 1..<replaceable>n</>.  But members added later might be given
   negative or fractional values of <structfield>enumsortorder</structfield>.
   The only requirement on these values is that they be correctly
   ordered and unique within each enum type.
-->
列挙型を作成する時、そのメンバには1..<replaceable>n</>のソート順位置が割り当てられます。
しかし後で追加されたメンバには負もしくは<structfield>enumsortorder</structfield>の小数値が与えられる可能性があります。
これらの値の要件は、各列挙型の中で正しく順序付けされ、かつ一意であることだけです。
  </para>
 </sect1>

 <sect1 id="catalog-pg-event-trigger">
  <title><structname>pg_event_trigger</structname></title>

  <indexterm zone="catalog-pg-event-trigger">
   <primary>pg_event_trigger</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_event_trigger</structname> stores event triggers.
   See <xref linkend="event-triggers"> for more information.
-->
<structname>pg_event_trigger</structname>カタログはイベントトリガを格納します。
詳細は<xref linkend="event-triggers">を参照してください。
  </para>

  <table>
<!--
   <title><structname>pg_event_trigger</> Columns</title>
-->
   <title><structname>pg_event_trigger</>の列</title>
   
   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>evtname</structfield></entry>
      <entry><type>name</type></entry>
      <entry></entry>
<!--
      <entry>Trigger name (must be unique)</entry>
-->
      <entry>トリガ名（一意でなければなりません）</entry>
     </row>

     <row>
      <entry><structfield>evtevent</structfield></entry>
      <entry><type>name</type></entry>
      <entry></entry>
<!--
      <entry>Identifies the event for which this trigger fires</entry>
-->
      <entry>このトリガが発行する対象のイベントを識別します。</entry>
     </row>

     <row>
      <entry><structfield>evtowner</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.oid</literal></entry>
<!--
      <entry>Owner of the event trigger</entry>
-->
      <entry>イベントトリガの所有者</entry>
     </row>

     <row>
      <entry><structfield>evtfoid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.oid</literal></entry>
<!--
      <entry>The function to be called</entry>
-->
      <entry>呼び出される関数</entry>
     </row>

     <row>
      <entry><structfield>evtenabled</structfield></entry>
      <entry><type>char</type></entry>
      <entry></entry>
      <entry>
<!--
       Controls in which <xref linkend="guc-session-replication-role"> modes
       the event trigger fires.
       <literal>O</> = trigger fires in <quote>origin</> and <quote>local</> modes,
       <literal>D</> = trigger is disabled,
       <literal>R</> = trigger fires in <quote>replica</> mode,
       <literal>A</> = trigger fires always.
-->
どの<xref linkend="guc-session-replication-role"> モードでこのイベントトリガを発行するかを制御します。
<literal>O</>では、トリガは<quote>origin</>および<quote>local</> モードで発行します。
<literal>D</>では、トリガは無効です。
<literal>R</> では、トリガは<quote>replica</>モードで発行します。
<literal>A</>では、トリガは常に発行します。
      </entry>
     </row>

     <row>
      <entry><structfield>evttags</structfield></entry>
      <entry><type>text[]</type></entry>
      <entry></entry>
      <entry>
<!--
        Command tags for which this trigger will fire.  If NULL, the firing
        of this trigger is not restricted on the basis of the command tag.
-->
このトリガを発行するコマンドタグです。 NULLの場合、このトリガの発行はコマンドタグに基づいて制限されていません。 
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect1>

 <sect1 id="catalog-pg-extension">
  <title><structname>pg_extension</structname></title>

  <indexterm zone="catalog-pg-extension">
   <primary>pg_extension</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_extension</structname> stores information
   about the installed extensions.  See <xref linkend="extend-extensions">
   for details about extensions.
-->
<structname>pg_extension</structname>カタログにはインストールされた拡張に関する情報が格納されます。
拡張の詳細については<xref linkend="extend-extensions">を参照してください。
  </para>

  <table>
<!--
   <title><structname>pg_extension</> Columns</title>
-->
   <title><structname>pg_extension</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>oid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry></entry>
<!--
      <entry>Row identifier (hidden attribute; must be explicitly selected)</entry>
-->
      <entry>行識別子（隠し属性です。明示的に選択しなければなりません）</entry>
     </row>

     <row>
      <entry><structfield>extname</structfield></entry>
      <entry><type>name</type></entry>
      <entry></entry>
<!--
      <entry>Name of the extension</entry>
-->
      <entry>拡張の名前</entry>
     </row>

     <row>
      <entry><structfield>extowner</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.oid</literal></entry>
<!--
      <entry>Owner of the extension</entry>
-->
      <entry>拡張の所有者</entry>
     </row>

     <row>
      <entry><structfield>extnamespace</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.oid</literal></entry>
<!--
      <entry>Schema containing the extension's exported objects</entry>
-->
      <entry>拡張が提供するオブジェクトを含むスキーマ</entry>
     </row>

     <row>
      <entry><structfield>extrelocatable</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
<!--
      <entry>True if extension can be relocated to another schema</entry>
-->
      <entry>拡張が他のスキーマに再配置可能である場合真</entry>
     </row>

     <row>
      <entry><structfield>extversion</structfield></entry>
      <entry><type>text</type></entry>
      <entry></entry>
<!--
      <entry>Version name for the extension</entry>
-->
      <entry>拡張のバージョン名</entry>
     </row>

     <row>
      <entry><structfield>extconfig</structfield></entry>
      <entry><type>oid[]</type></entry>
      <entry><literal><link linkend="catalog-pg-class"><structname>pg_class</structname></link>.oid</literal></entry>
<!--
      <entry>Array of <type>regclass</> OIDs for the extension's configuration
       table(s), or <literal>NULL</> if none</entry>
-->
      <entry>
拡張の設定テーブルの<type>regclass</> OIDの配列。なければ<literal>NULL</>
      </entry>
     </row>

     <row>
      <entry><structfield>extcondition</structfield></entry>
      <entry><type>text[]</type></entry>
      <entry></entry>
<!--
      <entry>Array of <literal>WHERE</>-clause filter conditions for the
       extension's configuration table(s), or <literal>NULL</> if none</entry>
-->
      <entry>
拡張の設定テーブル用の<literal>WHERE</>句フィルタ条件の配列。なければ<literal>NULL</>
      </entry>
     </row>

    </tbody>
   </tgroup>
  </table>

  <para>
<!--
   Note that unlike most catalogs with a <quote>namespace</> column,
   <structfield>extnamespace</structfield> is not meant to imply
   that the extension belongs to that schema.  Extension names are never
   schema-qualified.  Rather, <structfield>extnamespace</structfield>
   indicates the schema that contains most or all of the extension's
   objects.  If <structfield>extrelocatable</structfield> is true, then
   this schema must in fact contain all schema-qualifiable objects
   belonging to the extension.
-->
ほとんどの<quote>名前空間</>に関する列を持つカタログと異なり、<structfield>extnamespace</structfield>は、拡張がそのスキーマに属することを意図したものではありません。
拡張の名前は決してスキーマで修飾されません。
<structfield>extnamespace</structfield>は、拡張のオブジェクトのすべて、あるいは、ほとんどを含むスキーマを示します。
<structfield>extrelocatable</structfield>が真の場合、このスキーマは拡張に属するすべてのスキーマ修飾可能なオブジェクトを含まなければなりません。
  </para>
 </sect1>


 <sect1 id="catalog-pg-foreign-data-wrapper">
  <title><structname>pg_foreign_data_wrapper</structname></title>

  <indexterm zone="catalog-pg-foreign-data-wrapper">
   <primary>pg_foreign_data_wrapper</primary>
  </indexterm>


<!--
  <para>
   The catalog <structname>pg_foreign_data_wrapper</structname> stores
   foreign-data wrapper definitions.  A foreign-data wrapper is the
   mechanism by which external data, residing on foreign servers, is
   accessed.
  </para>

-->
  <para>
<structname>pg_foreign_data_wrapper</structname>カタログは外部データラッパの定義を保存します。
外部データラッパは外部サーバにあるデータにアクセスするための機構です。
  </para>

  <table>
<!--
   <title><structname>pg_foreign_data_wrapper</> Columns</title>
-->
   <title><structname>pg_foreign_data_wrapper</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>oid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry></entry>
<!--
      <entry>Row identifier (hidden attribute; must be explicitly selected)</entry>
-->
      <entry>行識別子（隠し属性です。明示的に選択しなければなりません）</entry>
     </row>

     <row>
      <entry><structfield>fdwname</structfield></entry>
      <entry><type>name</type></entry>
      <entry></entry>
<!--
      <entry>Name of the foreign-data wrapper</entry>
-->
      <entry>外部データラッパの名前</entry>
     </row>

     <row>
      <entry><structfield>fdwowner</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.oid</literal></entry>

<!--
      <entry>Owner of the foreign-data wrapper</entry>
-->
      <entry>外部データラッパの所有者</entry>
     </row>

     <row>
      <entry><structfield>fdwhandler</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.oid</literal></entry>
      <entry>
<!--
       References a handler function that is responsible for
       supplying execution routines for the foreign-data wrapper.
       Zero if no handler is provided
-->
外部データラッパに対する実行関数の提供に責任を持つハンドラ関数への参照。
ハンドラ関数がない場合はゼロになります。
      </entry>
     </row>

     <row>
      <entry><structfield>fdwvalidator</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.oid</literal></entry>

<!--
      <entry>
       References a validator function that is responsible for
       checking the validity of the options given to the
       foreign-data wrapper, as well as options for foreign servers and user
       mappings using the foreign-data wrapper.  Zero if no validator
       is provided
      </entry>
-->
      <entry>
外部サーバや外部データラッパを使用するユーザマップと同様に外部データラッパに対して与えられたオプションの正当性を検査する有効性検証関数。
有効性検証関数がない場合はゼロになります。
      </entry>
     </row>

     <row>
      <entry><structfield>fdwacl</structfield></entry>
      <entry><type>aclitem[]</type></entry>
      <entry></entry>
<!--
      <entry>
       Access privileges; see
       <xref linkend="sql-grant"> and
       <xref linkend="sql-revoke">
       for details
      </entry>
-->
     <entry>
アクセス権限。
詳細は<xref linkend="sql-grant">と<xref linkend="sql-revoke">を参照してください。
      </entry>
     </row>

     <row>
      <entry><structfield>fdwoptions</structfield></entry>
      <entry><type>text[]</type></entry>
      <entry></entry>

<!--
      <entry>
       Foreign-data wrapper specific options, as <quote>keyword=value</> strings
      </entry>
-->
      <entry>
       外部データラッパの<quote>keyword=value</>のような特定のオプション。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect1>


 <sect1 id="catalog-pg-foreign-server">
  <title><structname>pg_foreign_server</structname></title>

  <indexterm zone="catalog-pg-foreign-server">
   <primary>pg_foreign_server</primary>
  </indexterm>


<!--
  <para>
   The catalog <structname>pg_foreign_server</structname> stores
   foreign server definitions.  A foreign server describes a source
   of external data, such as a remote server.  Foreign
   servers are accessed via foreign-data wrappers.
  </para>
-->
  <para>
<structname>pg_foreign_server</structname>カタログは外部サーバの定義を保存します。
外部サーバはリモートサーバなど外部データの源を記述します。
外部サーバは外部データラッパを介してアクセスされます。
  </para>

  <table>
<!--
   <title><structname>pg_foreign_server</> Columns</title>
-->
   <title><structname>pg_foreign_server</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>oid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry></entry>
<!--
      <entry>Row identifier (hidden attribute; must be explicitly selected)</entry>
-->
      <entry>行識別子（隠し属性です。明示的に選択しなければなりません）</entry>
     </row>

     <row>
      <entry><structfield>srvname</structfield></entry>
      <entry><type>name</type></entry>
      <entry></entry>

<!--
      <entry>Name of the foreign server</entry>
-->
      <entry>外部サーバの名前</entry>
     </row>

     <row>
      <entry><structfield>srvowner</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.oid</literal></entry>

<!--
      <entry>Owner of the foreign server</entry>
-->
      <entry>外部サーバの所有者</entry>
     </row>

     <row>
      <entry><structfield>srvfdw</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-foreign-data-wrapper"><structname>pg_foreign_data_wrapper</structname></link>.oid</literal></entry>

<!--
      <entry>OID of the foreign-data wrapper of this foreign server</entry>
-->
      <entry>外部サーバの外部データラッパのOID</entry>
     </row>

     <row>
      <entry><structfield>srvtype</structfield></entry>
      <entry><type>text</type></entry>
      <entry></entry>
<!--
      <entry>Type of the server (optional)</entry>
-->
      <entry>サーバの型 (オプション)</entry>
     </row>

     <row>
      <entry><structfield>srvversion</structfield></entry>
      <entry><type>text</type></entry>
      <entry></entry>

<!--
      <entry>Version of the server (optional)</entry>
-->
      <entry>サーバのバージョン (オプション)</entry>
     </row>

     <row>
      <entry><structfield>srvacl</structfield></entry>
      <entry><type>aclitem[]</type></entry>
      <entry></entry>

<!--
      <entry>
       Access privileges; see
       <xref linkend="sql-grant"> and
       <xref linkend="sql-revoke">
       for details
      </entry>
-->
      <entry>
アクセス権限。
詳細は<xref linkend="sql-grant">と<xref linkend="sql-revoke">を参照してください。
      </entry>
     </row>

     <row>
      <entry><structfield>srvoptions</structfield></entry>
      <entry><type>text[]</type></entry>
      <entry></entry>
<!--
      <entry>
       Foreign server specific options, as <quote>keyword=value</> strings
      </entry>
-->
      <entry>
       外部サーバの<quote>keyword=value</>のような特定のオプション。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect1>


 <sect1 id="catalog-pg-foreign-table">
  <title><structname>pg_foreign_table</structname></title>

  <indexterm zone="catalog-pg-foreign-table">
   <primary>pg_foreign_table</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_foreign_table</structname> contains
   auxiliary information about foreign tables.  A foreign table is
   primarily represented by a <structname>pg_class</structname> entry,
   just like a regular table.  Its <structname>pg_foreign_table</structname>
   entry contains the information that is pertinent only to foreign tables
   and not any other kind of relation.
-->
<structname>pg_foreign_table</structname>カタログには、外部テーブルに関する補助情報が含まれます。
外部テーブルは主に<structname>pg_class</structname>の項目により表されます。
<structname>pg_foreign_table</structname>の項目には、外部テーブルに属する情報のみに関する情報が含まれ、他の種類のリレーションは含まれません。
  </para>

  <table>
<!--
   <title><structname>pg_foreign_table</> Columns</title>
-->
   <title><structname>pg_foreign_table</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>ftrelid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-class"><structname>pg_class</structname></link>.oid</literal></entry>
<!--
      <entry>OID of the <structname>pg_class</> entry for this foreign table</entry>
-->
      <entry>この外部テーブルに対する<structname>pg_class</>項目のOID</entry>
     </row>

     <row>
      <entry><structfield>ftserver</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-foreign-server"><structname>pg_foreign_server</structname></link>.oid</literal></entry>
<!--
      <entry>OID of the foreign server for this foreign table</entry>
-->
      <entry>この外部テーブルに対する外部サーバOID</entry>
     </row>

     <row>
      <entry><structfield>ftoptions</structfield></entry>
      <entry><type>text[]</type></entry>
      <entry></entry>
<!--
      <entry>
       Foreign table options, as <quote>keyword=value</> strings
      </entry>
-->
      <entry>
<quote>keyword=value</>文字列のような、外部テーブルのオプション
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect1>


 <sect1 id="catalog-pg-index">
  <title><structname>pg_index</structname></title>

  <indexterm zone="catalog-pg-index">
   <primary>pg_index</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_index</structname> contains part of the information
   about indexes.  The rest is mostly in
   <structname>pg_class</structname>.
-->
<structname>pg_index</structname>カタログはインデックス情報の一部を保持します。
その他のほとんどの情報は<structname>pg_class</structname>にあります。
  </para>

  <table>
<!--
   <title><structname>pg_index</> Columns</title>
-->
   <title><structname>pg_index</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>indexrelid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-class"><structname>pg_class</structname></link>.oid</literal></entry>
<!--
      <entry>The OID of the <structname>pg_class</> entry for this index</entry>
-->
      <entry>このインデックスに対する<structname>pg_class</>項目のOID</entry>
     </row>

     <row>
      <entry><structfield>indrelid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-class"><structname>pg_class</structname></link>.oid</literal></entry>
<!--
      <entry>The OID of the <structname>pg_class</> entry for the table this index is for</entry>
-->
      <entry>このインデックスが使われるテーブルに対する<structname>pg_class</>項目のOID</entry>
     </row>

     <row>
      <entry><structfield>indnatts</structfield></entry>
      <entry><type>int2</type></entry>
      <entry></entry>
<!--
      <entry>The number of columns in the index (duplicates
      <literal>pg_class.relnatts</literal>)</entry>
-->
      <entry>インデックス内の列数（<literal>pg_class.relnatts</literal>の複製）</entry>
     </row>

     <row>
      <entry><structfield>indisunique</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
<!--
      <entry>If true, this is a unique index</entry>
-->
      <entry>真の場合は一意性インデックス</entry>
     </row>

     <row>
      <entry><structfield>indisprimary</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
<!--
      <entry>If true, this index represents the primary key of the table
      (<structfield>indisunique</> should always be true when this is true)</entry>
-->
      <entry>
      真の場合このインデックスはテーブルのプライマリキーを表します
（この値が真の時<structfield>indisunique</>は常に真でなければなりません）。
      </entry>
     </row>

     <row>
      <entry><structfield>indisexclusion</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
<!--
      <entry>If true, this index supports an exclusion constraint</entry>
-->
      <entry>真の場合、このインデックスは排他制約をサポートします。</entry>
     </row>

     <row>
      <entry><structfield>indimmediate</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
<!--
      <entry>If true, the uniqueness check is enforced immediately on
       insertion
       (irrelevant if <structfield>indisunique</> is not true)</entry>
-->
      <entry>
真の場合、一意性検査が挿入時即座に強制されます。
(<structfield>indisunique</>が真でなければ無関係です。)
      </entry>
     </row>

     <row>
      <entry><structfield>indisclustered</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
<!--
      <entry>If true, the table was last clustered on this index</entry>
-->
      <entry>真の場合、前回このインデックスを元にテーブルはクラスタ化されました。</entry>
     </row>

     <row>
      <entry><structfield>indisvalid</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
      <entry>
<!--
       If true, the index is currently valid for queries.  False means the
       true, the index is currently valid for queries.  False means the
       index is possibly incomplete: it must still be modified by
       <command>INSERT</>/<command>UPDATE</> operations, but it cannot safely
       be used for queries. If it is unique, the uniqueness property is not
       guaranteed true either.
-->
真の場合、現在このインデックスは問い合わせに対して有効です。
偽は、インデックスが不完全かもしれないことを意味します。
<command>INSERT</>/<command>UPDATE</>操作による変更が行われているはずで、問い合わせに使用するには安全ではありません。
一意性インデックスであれば、一意性も保証されません。
      </entry>
     </row>

     <row>
      <entry><structfield>indcheckxmin</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
<!--
      <entry>
       If true, queries must not use the index until the <structfield>xmin</>
       of this <structname>pg_index</> row is below their <symbol>TransactionXmin</symbol>
       event horizon, because the table may contain broken HOT chains with
       incompatible rows that they can see
      </entry>
-->
      <entry>
真の場合、<structname>pg_index</>行の<structfield>xmin</>が<symbol>TransactionXmin</symbol>イベント境界値を下回るまで、問い合わせはインデックスを使用してはいけません。
なぜなら、テーブルは互換性の無い行と共に破壊されたHOTチェインを含み、それらが可視であるかもしれないからです。
      </entry>
     </row>

     <row>
      <entry><structfield>indisready</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
<!--
      <entry>
       If true, the index is currently ready for inserts.  False means the
       index must be ignored by <command>INSERT</>/<command>UPDATE</>
       operations.
      </entry>
-->
      <entry>
真の場合、インデックスは挿入に対する準備ができています。
偽の場合はインデックスは<command>INSERT</>/<command>UPDATE</>操作により無視されなければならないことを意味します。
      </entry>
     </row>

     <row>
      <entry><structfield>indislive</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
      <entry>
<!--
       If false, the index is in process of being dropped, and should be
       ignored for all purposes (including HOT-safety decisions)
-->
偽の場合、インデックスの削除処理が進行中であり、このためすべての目的において（HOT安全性の決定を含む）無視しなければなりません。
      </entry>
     </row>

     <row>
      <entry><structfield>indisreplident</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
      <entry>
<!--
       If true this index has been chosen as <quote>replica identity</>
       using <command>ALTER TABLE ... REPLICA IDENTITY USING INDEX
       ...</>
-->
真の場合、このインデックスは<command>ALTER TABLE ... REPLICA IDENTITY USING INDEX ...</>を用いて<quote>replica identity</>が選択されます。
      </entry>
     </row>

     <row>
      <entry><structfield>indkey</structfield></entry>
      <entry><type>int2vector</type></entry>
      <entry><literal><link linkend="catalog-pg-attribute"><structname>pg_attribute</structname></link>.attnum</literal></entry>
      <entry>
<!--
       This is an array of <structfield>indnatts</structfield> values that
       indicate which table columns this index indexes.  For example a value
       of <literal>1 3</literal> would mean that the first and the third table
       columns make up the index key.  A zero in this array indicates that the
       corresponding index attribute is an expression over the table columns,
       rather than a simple column reference.
-->
このインデックスがどのテーブル列をインデックスとしているかを示す<structfield>indnatts</structfield>配列の値です。
例えば、<literal>1 3</literal>は1番目と3番目のテーブル列がインデックスキーとなっていることを示します。
この配列でゼロとなっているのは対応するインデックスの属性が単純な列参照ではなくテーブル列に渡った演算式であることを示します。
      </entry>
     </row>

     <row>
      <entry><structfield>indcollation</structfield></entry>
      <entry><type>oidvector</type></entry>
      <entry><literal><link linkend="catalog-pg-collation"><structname>pg_collation</structname></link>.oid</literal></entry>
      <entry>
<!--
       For each column in the index key, this contains the OID of the
       collation to use for the index.
-->
いんでっくスキー内の各列に関してここにはインデックスで使用される照合順序のOIDが含まれます。
      </entry>
     </row>

     <row>
      <entry><structfield>indclass</structfield></entry>
      <entry><type>oidvector</type></entry>
      <entry><literal><link linkend="catalog-pg-opclass"><structname>pg_opclass</structname></link>.oid</literal></entry>
      <entry>
<!--
       For each column in the index key, this contains the OID of
       the operator class to use.  See
       <link linkend="catalog-pg-opclass"><structname>pg_opclass</structname></link> for details.
-->
インデックスキー内のそれぞれの列に対して、使用する演算子クラスのOIDを保持します。
<link linkend="catalog-pg-opclass"><structname>pg_opclass</structname></link>を参照してください。
      </entry>
     </row>

     <row>
      <entry><structfield>indoption</structfield></entry>
      <entry><type>int2vector</type></entry>
      <entry></entry>
<!--
      <entry>
       This is an array of <structfield>indnatts</structfield> values that
       store per-column flag bits.  The meaning of the bits is defined by
       the index's access method.
      </entry>
-->
      <entry>
列毎のフラグビットを格納する<structfield>indnatts</structfield>値の配列です。
ビットの意味はインデックスのアクセスメソッドによって定義されています。
      </entry>
     </row>

     <row>
      <entry><structfield>indexprs</structfield></entry>
      <entry><type>pg_node_tree</type></entry>
      <entry></entry>
<!--
      <entry>
       Expression trees (in <function>nodeToString()</function>
       representation) for index attributes that are not simple column
       references.  This is a list with one element for each zero
       entry in <structfield>indkey</>.  Null if all index attributes
       are simple references.
      </entry>
-->
      <entry>
単純な列参照でないインデックス属性の（<function>nodeToString()</function>表現による）演算式ツリー。
単純な参照の場合はインデックス属性はすべてNULL。
      </entry>
     </row>

     <row>
      <entry><structfield>indpred</structfield></entry>
      <entry><type>pg_node_tree</type></entry>
      <entry></entry>
<!--
      <entry>
       Expression tree (in <function>nodeToString()</function>
       representation) for partial index predicate.  Null if not a
       partial index.
      </entry>
-->
      <entry>
      部分インデックス属性の（<function>nodeToString()</function>表現による）演算式ツリー。
部分インデックスでなければNULL。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

 </sect1>


 <sect1 id="catalog-pg-inherits">
  <title><structname>pg_inherits</structname></title>

  <indexterm zone="catalog-pg-inherits">
   <primary>pg_inherits</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_inherits</> records information about
   table inheritance hierarchies.  There is one entry for each direct
   child table in the database.  (Indirect inheritance can be determined
   by following chains of entries.)
-->
<structname>pg_inherits</>カタログは継承階層の情報を記録します。
データベース内の、それぞれの直接の子テーブルに対して1つの記述があります
（直接ではない継承は、記述の連鎖から決定されます）。
  </para>

  <table>
<!--
   <title><structname>pg_inherits</> Columns</title>
-->
   <title><structname>pg_inherits</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>inhrelid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-class"><structname>pg_class</structname></link>.oid</literal></entry>
      <entry>
<!--
       The OID of the child table
-->
       子テーブルのOID。
      </entry>
     </row>

     <row>
      <entry><structfield>inhparent</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-class"><structname>pg_class</structname></link>.oid</literal></entry>
      <entry>
<!--
       The OID of the parent table
-->
       親テーブルのOID。
      </entry>
     </row>

     <row>
      <entry><structfield>inhseqno</structfield></entry>
      <entry><type>int4</type></entry>
      <entry></entry>
      <entry>
<!--
       If there is more than one direct parent for a child table (multiple
       inheritance), this number tells the order in which the
       inherited columns are to be arranged.  The count starts at 1.
-->
1つの子テーブルに1つ以上の親テーブルが存在する場合（複数継承）、この番号の順序に従って継承された列が配置されます。
番号は1から始まります。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

 </sect1>


 <sect1 id="catalog-pg-language">
  <title><structname>pg_language</structname></title>

  <indexterm zone="catalog-pg-language">
   <primary>pg_language</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_language</structname> registers
   languages in which you can write functions or stored procedures.
   See <xref linkend="sql-createlanguage">
   and <xref linkend="xplang"> for more information about language handlers.
-->
<structname>pg_language</structname>カタログはユーザ定義関数やストアドプロシージャを作成することができる言語を登録します。
言語ハンドラの詳細は<xref linkend="sql-createlanguage">と<xref linkend="xplang">を参照してください。
  </para>

  <table>
<!--
   <title><structname>pg_language</> Columns</title>
-->
   <title><structname>pg_language</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>oid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry></entry>
<!--
      <entry>Row identifier (hidden attribute; must be explicitly selected)</entry>
-->
     </row>

     <row>
      <entry><structfield>lanname</structfield></entry>
      <entry><type>name</type></entry>
      <entry></entry>
<!--
      <entry>Name of the language</entry>
-->
      <entry>言語名</entry>
     </row>

     <row>
      <entry><structfield>lanowner</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.oid</literal></entry>
<!--
      <entry>Owner of the language</entry>
-->
      <entry>言語の所有者</entry>
     </row>

     <row>
      <entry><structfield>lanispl</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
      <entry>
<!--
       This is false for internal languages (such as
       <acronym>SQL</acronym>) and true for user-defined languages.
       Currently, <application>pg_dump</application> still uses this
       to determine which languages need to be dumped, but this might be
       replaced by a different mechanism in the future.
-->
（<acronym>SQL</acronym>などの）内部言語では偽となり、ユーザ定義言語では真となります。
現在<application>pg_dump</application>ではダンプされる必要のある言語を決定するためにこれを使用していますが、いずれ別の処理方法に置き換えられる可能性があります。
      </entry>
     </row>

     <row>
      <entry><structfield>lanpltrusted</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
      <entry>
<!--
       True if this is a trusted language, which means that it is believed
       not to grant access to anything outside the normal SQL execution
       environment.  Only superusers can create functions in untrusted
       languages.
-->
信頼できる言語である場合は真です。
これは通常のSQL実行環境の外部に対してまったくアクセスを許可しないことを意味しています。
スーパーユーザだけが信頼できない言語で関数を作成することができます。
      </entry>
     </row>

     <row>
      <entry><structfield>lanplcallfoid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.oid</literal></entry>
      <entry>
<!--
       For noninternal languages this references the language
       handler, which is a special function that is responsible for
       executing all functions that are written in the particular
       language
-->
       内部言語でない場合、特定の言語で作成されたすべての関数の実行に責任を持つ特別な関数である言語ハンドラを参照します。   
      </entry>
     </row>

     <row>
      <entry><structfield>laninline</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.oid</literal></entry>
      <entry>
<!--
       This references a function that is responsible for executing
       <quote>inline</> anonymous code blocks
       (<xref linkend="sql-do"> blocks).
       Zero if inline blocks are not supported.
-->
これは<quote>インライン</>匿名コードブロック(<xref linkend="sql-do">ブロック)の実行に責任を持つ関数を参照します。
インラインブロックをサポートしない場合はゼロ。
      </entry>
     </row>

     <row>
      <entry><structfield>lanvalidator</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.oid</literal></entry>
      <entry>
<!--
       This references a language validator function that is responsible
       for checking the syntax and validity of new functions when they
       are created.  Zero if no validator is provided.
-->
これは、新しい関数が作成された時に構文や有効性の検査を引き受ける言語有効性検査関数を参照します。
有効性検査関数がない場合はゼロになります。
      </entry>
     </row>

     <row>
      <entry><structfield>lanacl</structfield></entry>
      <entry><type>aclitem[]</type></entry>
      <entry></entry>
<!--
      <entry>
       Access privileges; see
       <xref linkend="sql-grant"> and
       <xref linkend="sql-revoke">
       for details
-->
      <entry>アクセス権限。
<xref linkend="sql-grant">と<xref linkend="sql-revoke">を参照してください。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

 </sect1>


 <sect1 id="catalog-pg-largeobject">
  <title><structname>pg_largeobject</structname></title>

  <indexterm zone="catalog-pg-largeobject">
   <primary>pg_largeobject</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_largeobject</structname> holds the data making up
   <quote>large objects</quote>.  A large object is identified by an OID
   assigned when it is created.  Each large object is broken into
   segments or <quote>pages</> small enough to be conveniently stored as rows
   in <structname>pg_largeobject</structname>.
   The amount of data per page is defined to be <symbol>LOBLKSIZE</> (which is currently
   <literal>BLCKSZ/4</>, or typically 2 kB).
-->
<structname>pg_largeobject</structname>カタログは<quote>ラージオブジェクト</quote>を構築するデータを保持します。
ラージオブジェクトは作成された時に割り当てられたOIDで識別されます。
それぞれのラージオブジェクトは<structname>pg_largeobject</structname>の行に都合良く格納されるのに十分に足る小さなセグメント、もしくは<quote>ページ</>に分割されます。
ページごとのデータ量は（現在<literal>BLCKSZ/4</>あるいは典型的に2キロバイトの）<symbol>LOBLKSIZE</>として定義されます。
  </para>

  <para>
<!--
   Prior to <productname>PostgreSQL</> 9.0, there was no permission structure
   associated with large objects.  As a result,
   <structname>pg_largeobject</structname> was publicly readable and could be
   used to obtain the OIDs (and contents) of all large objects in the system.
   This is no longer the case; use
   <link linkend="catalog-pg-largeobject-metadata"><structname>pg_largeobject_metadata</></link>
   to obtain a list of large object OIDs.
-->
<productname>PostgreSQL</> 9.0より前までは、ラージオブジェクトに関連した権限構造はありませんでした。
その結果<structname>pg_largeobject</structname>は可読性が高いもので、システム内のすべてのラージオブジェクトのOIDを入手するために使用することができました。
これはもはや当てはまりません。
ラージオブジェクトのOIDのリストを入手するためには<link linkend="catalog-pg-largeobject-metadata"><structname>pg_largeobject_metadata</></link>を使用してください。
  </para>

  <table>
<!--
   <title><structname>pg_largeobject</> Columns</title>
-->
   <title><structname>pg_largeobject</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>loid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-largeobject-metadata"><structname>pg_largeobject_metadata</structname></link>.oid</literal></entry>
<!--
      <entry>Identifier of the large object that includes this page</entry>
-->
      <entry>このページを含んだラージオブジェクトの識別子</entry>
     </row>

     <row>
      <entry><structfield>pageno</structfield></entry>
      <entry><type>int4</type></entry>
      <entry></entry>
<!--
      <entry>Page number of this page within its large object
      (counting from zero)</entry>
-->
      <entry>ラージオブジェクト内の（ゼロから数えた）このページのページ番号
</entry>
     </row>

     <row>
      <entry><structfield>data</structfield></entry>
      <entry><type>bytea</type></entry>
      <entry></entry>
      <entry>
<!--
       Actual data stored in the large object.
       This will never be more than <symbol>LOBLKSIZE</> bytes and might be less.
-->
       ラージオブジェクト内に保存された実データ。
<symbol>LOBLKSIZE</>バイトを絶対上回りません。
たぶんそれより小さいでしょう。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
<!--
   Each row of <structname>pg_largeobject</structname> holds data
   for one page of a large object, beginning at
   byte offset (<literal>pageno * LOBLKSIZE</>) within the object.  The implementation
   allows sparse storage: pages might be missing, and might be shorter than
   <literal>LOBLKSIZE</> bytes even if they are not the last page of the object.
   Missing regions within a large object read as zeroes.
-->
<structname>pg_largeobject</structname>のそれぞれの行はオブジェクト内のバイトオフセット（<literal>pageno * LOBLKSIZE</>）から始まるラージオブジェクトの1ページ分のデータを保持します。
ページが見つからなかったり、たとえオブジェクトの最後のページでない場合でも<literal>LOBLKSIZE</>より小さくてもよいといった、あちこちに散らばって保存されてもよいような実装になっています。
ラージオブジェクトの中で見つからない部分はゼロとして読み込まれます。
  </para>

 </sect1>

 <sect1 id="catalog-pg-largeobject-metadata">
  <title><structname>pg_largeobject_metadata</structname></title>

  <indexterm zone="catalog-pg-largeobject-metadata">
   <primary>pg_largeobject_metadata</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_largeobject_metadata</structname>
   holds metadata associated with large objects.  The actual large object
   data is stored in
   <link linkend="catalog-pg-largeobject"><structname>pg_largeobject</></link>.
-->
<structname>pg_largeobject_metadata</structname>はラージオブジェクトに関連したメタデータを保持します。
実際のラージオブジェクトデータは<link linkend="catalog-pg-largeobject"><structname>pg_largeobject</></link>に格納されます。
  </para>

  <table>
<!--
   <title><structname>pg_largeobject_metadata</> Columns</title>
-->
   <title><structname>pg_largeobject_metadata</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>oid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry></entry>
<!--
      <entry>Row identifier (hidden attribute; must be explicitly selected)</entry>
-->
      <entry>行識別子（隠し属性です。明示的に選択しなければなりません）</entry>
     </row>

     <row>
      <entry><structfield>lomowner</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.oid</literal></entry>
<!--
      <entry>Owner of the large object</entry>
-->
      <entry>ラージオブジェクトの所有者</entry>
     </row>

     <row>
      <entry><structfield>lomacl</structfield></entry>
      <entry><type>aclitem[]</type></entry>
      <entry></entry>
      <entry>
<!--
       Access privileges; see
       <xref linkend="sql-grant"> and
       <xref linkend="sql-revoke">
       for details
-->
アクセス権限。
<xref linkend="sql-grant">および<xref linkend="sql-revoke">を参照してください。
      </entry>
     </row>

    </tbody>
   </tgroup>
  </table>

 </sect1>


 <sect1 id="catalog-pg-namespace">
  <title><structname>pg_namespace</structname></title>

  <indexterm zone="catalog-pg-namespace">
   <primary>pg_namespace</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_namespace</> stores namespaces.
   A namespace is the structure underlying SQL schemas: each namespace
   can have a separate collection of relations, types, etc. without name
   conflicts.
-->
<structname>pg_namespace</>カタログは名前空間を保存します。
名前空間はSQLスキーマの裏にある構造です。
それぞれの名前空間は、リレーション、型などの集合を、名前が競合することなく、個別に持ちます。
  </para>

  <table>
<!--
   <title><structname>pg_namespace</> Columns</title>
-->
   <title><structname>pg_namespace</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>oid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry></entry>
<!--
      <entry>Row identifier (hidden attribute; must be explicitly selected)</entry>
-->
      <entry>行識別子（隠し属性です。明示的に選択しなければなりません）</entry>
     </row>

     <row>
      <entry><structfield>nspname</structfield></entry>
      <entry><type>name</type></entry>
      <entry></entry>
<!--
      <entry>Name of the namespace</entry>
-->
      <entry>名前空間の名前</entry>
     </row>

     <row>
      <entry><structfield>nspowner</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.oid</literal></entry>
<!--
      <entry>Owner of the namespace</entry>
-->
      <entry>名前空間の所有者</entry>
     </row>

     <row>
      <entry><structfield>nspacl</structfield></entry>
      <entry><type>aclitem[]</type></entry>
      <entry></entry>
      <entry>
<!--
      <entry>
       Access privileges; see
       <xref linkend="sql-grant"> and
       <xref linkend="sql-revoke">
       for details
      </entry>
-->
アクセス権限。
<xref linkend="sql-grant">と<xref linkend="sql-revoke">を参照してください。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

 </sect1>


 <sect1 id="catalog-pg-opclass">
  <title><structname>pg_opclass</structname></title>

  <indexterm zone="catalog-pg-opclass">
   <primary>pg_opclass</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_opclass</structname> defines
   index access method operator classes.  Each operator class defines
   semantics for index columns of a particular data type and a particular
   index access method.  An operator class essentially specifies that a
   particular operator family is applicable to a particular indexable column
   data type.  The set of operators from the family that are actually usable
   with the indexed column are whichever ones accept the column's data type
   as their left-hand input.
-->
<structname>pg_opclass</structname>カタログはインデックスアクセスメソッド演算子クラスを定義します。
それぞれの演算子クラスは特定のデータ型のインデックス列のセマンティクスと特定のインデックスアクセスメソッドを定義します。
演算子クラスは、ある特定の演算子族は特定のインデックス可能な列データの型に対して適用できる、ということを本質的に特定します。
インデックス付けされた列を実際に使用可能な演算子族の演算子群は、その列のデータ型を左辺の入力として受け付けます。
  </para>

  <para>
<!--
   Operator classes are described at length in <xref linkend="xindex">.
-->
   演算子クラスについては<xref linkend="xindex">に詳細に説明されています。
  </para>

  <table>
<!--
   <title><structname>pg_opclass</> Columns</title>
-->
   <title><structname>pg_opclass</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
     <entry>名前</entry>
     <entry>型</entry>
     <entry>参照先</entry>
     <entry>説明</entry> 
     </row>
    </thead>
    <tbody>

     <row>
      <entry><structfield>oid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry></entry>
<!--
      <entry>Row identifier (hidden attribute; must be explicitly selected)</entry>
-->
      <entry>行識別子（隠し属性です。明示的に選択しなければなりません）</entry>
     </row>

     <row>
      <entry><structfield>opcmethod</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-am"><structname>pg_am</structname></link>.oid</literal></entry>
<!--
      <entry>Index access method operator class is for</entry>
-->
      <entry>対象のインデックスアクセスメソッド演算子クラス</entry>
     </row>

     <row>
      <entry><structfield>opcname</structfield></entry>
      <entry><type>name</type></entry>
      <entry></entry>
<!--
      <entry>Name of this operator class</entry>
-->
      <entry>この演算子クラスの名前</entry>
     </row>

     <row>
      <entry><structfield>opcnamespace</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.oid</literal></entry>
<!--
      <entry>Namespace of this operator class</entry>
-->
      <entry>この演算子クラスの名前空間</entry>
     </row>

     <row>
      <entry><structfield>opcowner</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.oid</literal></entry>
<!--
      <entry>Owner of the operator class</entry>
-->
      <entry>演算子クラスの所有者</entry>
     </row>

     <row>
      <entry><structfield>opcfamily</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-opfamily"><structname>pg_opfamily</structname></link>.oid</literal></entry>
<!--
      <entry>Operator family containing the operator class</entry>
-->
      <entry>演算子クラスを含んでいる演算子族</entry>
     </row>

     <row>
      <entry><structfield>opcintype</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-type"><structname>pg_type</structname></link>.oid</literal></entry>
<!--
      <entry>Data type that the operator class indexes</entry>
-->
      <entry>演算子クラスがインデックスを作成するデータ型</entry>
     </row>

     <row>
      <entry><structfield>opcdefault</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
<!--
      <entry>True if this operator class is the default for <structfield>opcintype</></entry>
-->
      <entry>演算子クラスが<structfield>opcintype</>のデフォルトである場合は真</entry>
     </row>

     <row>
      <entry><structfield>opckeytype</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-type"><structname>pg_type</structname></link>.oid</literal></entry>
<!--
      <entry>Type of data stored in index, or zero if same as <structfield>opcintype</></entry>
-->
      <entry>インデックス内に格納されているデータ型。<structfield>opcintype</>と同じ場合はゼロ</entry>
     </row>

    </tbody>
   </tgroup>
  </table>

<!--
  <para>
   An operator class's <structfield>opcmethod</> must match the
   <structname>opfmethod</> of its containing operator family.
   Also, there must be no more than one <structname>pg_opclass</structname>
   row having <structname>opcdefault</> true for any given combination of
   <structname>opcmethod</> and <structname>opcintype</>.
  </para>
-->
  <para>
演算子クラスの<structfield>opcmethod</>は、演算子クラスが含んでいる演算子族の<structname>opfmethod</>に一致しなければいけません。
また、任意の<structname>opcmethod</>と<structname>opcintype</>の組み合わせに対して<structname>opcdefault</>が真となるような<structname>pg_opclass</structname>行が複数存在してはいけません。
  </para>

 </sect1>


 <sect1 id="catalog-pg-operator">
  <title><structname>pg_operator</structname></title>

  <indexterm zone="catalog-pg-operator">
   <primary>pg_operator</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_operator</> stores information about operators.
   See <xref linkend="sql-createoperator">
   and <xref linkend="xoper"> for more information.
-->
<structname>pg_operator</>カタログは演算子の情報を保存します。
<xref linkend="sql-createoperator">と<xref linkend="xoper">を参照してください。
  </para>

  <table>
<!--
   <title><structname>pg_operator</> Columns</title>
-->
   <title><structname>pg_operator</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>oid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry></entry>
<!--
      <entry>Row identifier (hidden attribute; must be explicitly selected)</entry>
-->
      <entry>行識別子（隠し属性です。明示的に選択しなければなりません）</entry>
     </row>

     <row>
      <entry><structfield>oprname</structfield></entry>
      <entry><type>name</type></entry>
      <entry></entry>
<!--
      <entry>Name of the operator</entry>
-->
      <entry>演算子名</entry>
     </row>

     <row>
      <entry><structfield>oprnamespace</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.oid</literal></entry>
      <entry>
<!--
       The OID of the namespace that contains this operator
-->
       この演算子を含む名前空間のOID
      </entry>
     </row>

     <row>
      <entry><structfield>oprowner</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.oid</literal></entry>
<!--
      <entry>Owner of the operator</entry>
-->
      <entry>演算子の所有者</entry>
     </row>

     <row>
      <entry><structfield>oprkind</structfield></entry>
      <entry><type>char</type></entry>
      <entry></entry>
      <entry>
<!--
       <literal>b</> = infix (<quote>both</quote>), <literal>l</> = prefix
       (<quote>left</quote>), <literal>r</> = postfix (<quote>right</quote>)
-->
       <literal>b</> = 挿入辞（<quote>両側</quote>）、
       <literal>l</> = 接頭辞（<quote>左側</quote>)、
       <literal>r</> = 接尾辞（<quote>右側</quote>）
      </entry>
     </row>

     <row>
      <entry><structfield>oprcanmerge</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
<!--
      <entry>This operator supports merge joins</entry>
-->
      <entry>この演算子はマージ結合をサポートします。</entry>
     </row>

     <row>
      <entry><structfield>oprcanhash</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
<!--
      <entry>This operator supports hash joins</entry>
-->
      <entry>この演算子はハッシュ結合をサポートします。</entry>
     </row>

     <row>
      <entry><structfield>oprleft</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-type"><structname>pg_type</structname></link>.oid</literal></entry>
<!--
      <entry>Type of the left operand</entry>
-->
      <entry>左辺オペランドの型</entry>
     </row>

     <row>
      <entry><structfield>oprright</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-type"><structname>pg_type</structname></link>.oid</literal></entry>
<!--
      <entry>Type of the right operand</entry>
-->
      <entry>右辺オペランドの型</entry>
     </row>

     <row>
      <entry><structfield>oprresult</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-type"><structname>pg_type</structname></link>.oid</literal></entry>
<!--
      <entry>Type of the result</entry>
-->
      <entry>結果の型</entry>
     </row>

     <row>
      <entry><structfield>oprcom</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-operator"><structname>pg_operator</structname></link>.oid</literal></entry>
<!--
      <entry>Commutator of this operator, if any</entry>
-->
      <entry>もし存在すればこの演算子の交代演算子</entry>
     </row>

     <row>
      <entry><structfield>oprnegate</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-operator"><structname>pg_operator</structname></link>.oid</literal></entry>
<!--
      <entry>Negator of this operator, if any</entry>
-->
      <entry>もし存在すればこの演算子の否定子</entry>
     </row>

     <row>
      <entry><structfield>oprcode</structfield></entry>
      <entry><type>regproc</type></entry>
      <entry><literal><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.oid</literal></entry>
<!--
      <entry>Function that implements this operator</entry>
-->
      <entry>この演算子を実装する関数</entry>
     </row>

     <row>
      <entry><structfield>oprrest</structfield></entry>
      <entry><type>regproc</type></entry>
      <entry><literal><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.oid</literal></entry>
<!--
      <entry>Restriction selectivity estimation function for this operator</entry>
-->
      <entry>この演算子の制約選択評価関数</entry>
     </row>

     <row>
      <entry><structfield>oprjoin</structfield></entry>
      <entry><type>regproc</type></entry>
      <entry><literal><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.oid</literal></entry>
<!--
      <entry>Join selectivity estimation function for this operator</entry>
-->
      <entry>この演算子の結合選択評価関数</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
<!--
   Unused column contain zeroes. For example, <structfield>oprleft</structfield>
   is zero for a prefix operator.
-->
未使用の列にはゼロが入ります。
例えば、接頭辞演算子では<structfield>oprleft</structfield>はゼロとなります。
  </para>

 </sect1>


 <sect1 id="catalog-pg-opfamily">
  <title><structname>pg_opfamily</structname></title>

  <indexterm zone="catalog-pg-opfamily">
   <primary>pg_opfamily</primary>
  </indexterm>

<!--
  <para>
   The catalog <structname>pg_opfamily</structname> defines operator families.
   Each operator family is a collection of operators and associated
   support routines that implement the semantics specified for a particular
   index access method.  Furthermore, the operators in a family are all
   <quote>compatible</>, in a way that is specified by the access method.
   The operator family concept allows cross-data-type operators to be used
   with indexes and to be reasoned about using knowledge of access method
   semantics.
  </para>
-->
  <para>
<structname>pg_opfamily</structname>カタログは演算子族を定義します。
それぞれの演算子族は、演算子とサポートルーチン(特定のインデックスアクセスメソッドのために特化されたセマンティクスを実装するような関連付けられたもの)を集めたものです。
さらに、演算子族内の演算子はすべて、アクセスメソッドにより特定される方法において<quote>互換性</>があります。
演算子族の概念は、データ型を跨る演算子がインデックスで使用されることを許可し、さらにアクセスメソッドのセマンティクスの知識を使用することについて理由付けすることも許可します。
  </para>

<!--
  <para>
   Operator families are described at length in <xref linkend="xindex">.
  </para>
-->
  <para>
演算子族については<xref linkend="xindex">で詳しく説明します。
  </para>

  <table>
<!--
   <title><structname>pg_opfamily</> Columns</title>
-->
   <title><structname>pg_opfamily</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>
    <tbody>

     <row>
      <entry><structfield>oid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry></entry>
<!--
      <entry>Row identifier (hidden attribute; must be explicitly selected)</entry>
-->
      <entry>行識別子（隠し属性です。明示的に選択しなければなりません）</entry>
     </row>

     <row>
      <entry><structfield>opfmethod</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-am"><structname>pg_am</structname></link>.oid</literal></entry>
<!--
      <entry>Index access method operator family is for</entry>
-->
      <entry>対象のインデックスアクセスメソッド演算子族</entry>
     </row>

     <row>
      <entry><structfield>opfname</structfield></entry>
      <entry><type>name</type></entry>
      <entry></entry>
<!--
      <entry>Name of this operator family</entry>
-->
      <entry>演算子族の名称</entry>
     </row>

     <row>
      <entry><structfield>opfnamespace</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.oid</literal></entry>
<!--
      <entry>Namespace of this operator family</entry>
-->
      <entry>演算子族の名前空間</entry>
     </row>

     <row>
      <entry><structfield>opfowner</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.oid</literal></entry>
<!--
      <entry>Owner of the operator family</entry>
-->
      <entry>演算子族の所有者</entry>
     </row>

    </tbody>
   </tgroup>
  </table>

<!--
  <para>
   The majority of the information defining an operator family is not in its
   <structname>pg_opfamily</structname> row, but in the associated rows in
   <link linkend="catalog-pg-amop"><structname>pg_amop</structname></link>,
   <link linkend="catalog-pg-amproc"><structname>pg_amproc</structname></link>,
   and
   <link linkend="catalog-pg-opclass"><structname>pg_opclass</structname></link>.
  </para>
-->
  <para>
演算子族を定義している情報の大部分が、<structname>pg_opfamily</structname>行にあるわけではなく、<link linkend="catalog-pg-amop"><structname>pg_amop</structname></link>や<link linkend="catalog-pg-amproc"><structname>pg_amproc</structname></link>や<link linkend="catalog-pg-opclass"><structname>pg_opclass</structname></link>行にあります。
  </para>

 </sect1>

 <sect1 id="catalog-pg-pltemplate">
  <title><structname>pg_pltemplate</structname></title>

  <indexterm zone="catalog-pg-pltemplate">
   <primary>pg_pltemplate</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_pltemplate</structname> stores
   <quote>template</> information for procedural languages.
   A template for a language allows the language to be created in a
   particular database by a simple <command>CREATE LANGUAGE</> command,
   with no need to specify implementation details.
-->
<structname>pg_pltemplate</structname>カタログは手続き言語の<quote>テンプレート</>に関する情報を格納します。
手続き言語のテンプレートを使用することで、特定のデータベース内で単純な<command>CREATE LANGUAGE</>コマンドにより言語が作成できます。
実装の詳細を指定する必要はありません。
  </para>

  <para>
<!--
   Unlike most system catalogs, <structname>pg_pltemplate</structname>
   is shared across all databases of a cluster: there is only one
   copy of <structname>pg_pltemplate</structname> per cluster, not
   one per database.  This allows the information to be accessible in
   each database as it is needed.
-->
多くのシステムカタログと異なり<structname>pg_pltemplate</structname>はクラスタの全てのデータベースに共有されています。
データベース毎ではなく、クラスタ毎にただ1つの<structname>pg_pltemplate</structname>のコピーがあります。
これにより、それぞれのデータベースは、必要とされたときにデータにアクセスできます。
  </para>

  <table>
<!--
   <title><structname>pg_pltemplate</> Columns</title>
-->
   <title><structname>pg_pltemplate</>の列</title>

   <tgroup cols="3">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>説明</entry>
     </row>
    </thead>


    <tbody>
     <row>
      <entry><structfield>tmplname</structfield></entry>
      <entry><type>name</type></entry>
<!--
      <entry>Name of the language this template is for</entry>
-->
      <entry>このテンプレートのための言語の名前</entry>
     </row>

     <row>
      <entry><structfield>tmpltrusted</structfield></entry>
      <entry><type>boolean</type></entry>
<!--
      <entry>True if language is considered trusted</entry>
-->
      <entry>言語が信頼されている場合は真</entry>
     </row>

     <row>
      <entry><structfield>tmpldbacreate</structfield></entry>
      <entry><type>boolean</type></entry>
<!--
      <entry>True if language may be created by a database owner</entry>
-->
      <entry>言語がデータベース所有者により作成されているかもしれない場合は真</entry>
     </row>

     <row>
      <entry><structfield>tmplhandler</structfield></entry>
      <entry><type>text</type></entry>
<!--
      <entry>Name of call handler function</entry>
-->
      <entry>呼び出しハンドラ関数の名前</entry>
     </row>

     <row>
      <entry><structfield>tmplinline</structfield></entry>
      <entry><type>text</type></entry>
<!--
      <entry>Name of anonymous-block handler function, or null if none</entry>
-->
      <entry>匿名ブロックハンドラ関数の名前。存在しない場合はNULL。</entry>
     </row>

     <row>
      <entry><structfield>tmplvalidator</structfield></entry>
      <entry><type>text</type></entry>
<!--
      <entry>Name of validator function, or null if none</entry>
-->
      <entry>有効性検査関数の名前。無い場合はNULL</entry>
     </row>

     <row>
      <entry><structfield>tmpllibrary</structfield></entry>
      <entry><type>text</type></entry>
<!--
      <entry>Path of shared library that implements language</entry>
-->
      <entry>言語を実装している共有ライブラリのパス</entry>
     </row>

     <row>
      <entry><structfield>tmplacl</structfield></entry>
      <entry><type>aclitem[]</type></entry>
<!--
      <entry>Access privileges for template (not actually used)</entry>
-->
      <entry>テンプレートのアクセス権限（実際には未使用）</entry>
     </row>

    </tbody>
   </tgroup>
  </table>

  <para>
<!--
   There are not currently any commands that manipulate procedural language
   templates; to change the built-in information, a superuser must modify
   the table using ordinary <command>INSERT</command>, <command>DELETE</command>,
   or <command>UPDATE</command> commands.
-->
手続き言語のテンプレートを扱うコマンドは、今のところありません。
組み込まれた情報を変えるためにはスーパーユーザが、<command>INSERT</command>、<command>DELETE</command>もしくは<command>UPDATE</command>を使用してテーブルを変更する必要があります。
  </para>

  <note>
   <para>
<!--
    It is likely that <structname>pg_pltemplate</> will be removed in some
    future release of <productname>PostgreSQL</productname>, in favor of
    keeping this knowledge about procedural languages in their respective
    extension installation scripts.
-->
手続き言語に関するこの情報を対応する拡張インストール用スクリプトで保持することを優先させ、今後の<productname>PostgreSQL</productname>のリリースで<structname>pg_pltemplate</>は削除される予定です。
   </para>
  </note>

 </sect1>


 <sect1 id="catalog-pg-proc">
  <title><structname>pg_proc</structname></title>

  <indexterm zone="catalog-pg-proc">
   <primary>pg_proc</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_proc</> stores information about functions (or procedures).
   See <xref linkend="sql-createfunction">
   and <xref linkend="xfunc"> for more information.
-->
<structname>pg_proc</>カタログは関数（またはプロシージャ）に関する情報を格納します。
<xref linkend="sql-createfunction">と<xref linkend="xfunc">を参照してください。
  </para>

  <para>
<!--
   The table contains data for aggregate functions as well as plain functions.
   If <structfield>proisagg</structfield> is true, there should be a matching
   row in <structfield>pg_aggregate</structfield>.
-->
このテーブルには、普通の関数のみならず集約関数も含まれます。
<structfield>proisagg</structfield>が真なら<structname>pg_aggregate</structname>に一致する行があるはずです。
  </para>

  <table>
<!--
   <title><structname>pg_proc</> Columns</title>
-->
   <title><structname>pg_proc</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>oid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry></entry>
<!--
      <entry>Row identifier (hidden attribute; must be explicitly selected)</entry>
-->
      <entry>行識別子（隠し属性です。明示的に選択しなければなりません）</entry>
     </row>

     <row>
      <entry><structfield>proname</structfield></entry>
      <entry><type>name</type></entry>
      <entry></entry>
<!--
      <entry>Name of the function</entry>
-->
      <entry>関数名</entry>
     </row>

     <row>
      <entry><structfield>pronamespace</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.oid</literal></entry>
      <entry>
<!--
       The OID of the namespace that contains this function
-->
       この関数を含む名前空間のOID
      </entry>
     </row>

     <row>
      <entry><structfield>proowner</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.oid</literal></entry>
<!--
      <entry>Owner of the function</entry>
-->
      <entry>関数の所有者</entry>
     </row>

     <row>
      <entry><structfield>prolang</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-language"><structname>pg_language</structname></link>.oid</literal></entry>
<!--
      <entry>Implementation language or call interface of this function</entry>
-->
      <entry>この関数の実装言語または呼び出しインタフェース</entry>
     </row>

     <row>
      <entry><structfield>procost</structfield></entry>
      <entry><type>float4</type></entry>
      <entry></entry>
<!--
      <entry>Estimated execution cost (in units of
       <xref linkend="guc-cpu-operator-cost">); if <structfield>proretset</>,
       this is cost per row returned</entry>
-->
      <entry>推定実行コスト(<xref linkend="guc-cpu-operator-cost">単位です)。
<structfield>proretset</>の場合は、返される行毎のコストになります。</entry>
     </row>

     <row>
      <entry><structfield>prorows</structfield></entry>
      <entry><type>float4</type></entry>
      <entry></entry>
<!--
      <entry>Estimated number of result rows (zero if not <structfield>proretset</>)</entry>
-->
      <entry>結果の推定行数(<structfield>proretset</>でなければゼロになります)</entry>
     </row>

     <row>
      <entry><structfield>provariadic</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-type"><structname>pg_type</structname></link>.oid</literal></entry>

<!--
      <entry>Data type of the variadic array parameter's elements,
       or zero if the function does not have a variadic parameter</entry>
-->
      <entry>可変配列パラメータの要素のデータ型。関数が可変パラメータを持っていない場合はゼロになります。</entry>
     </row>

     <row>
      <entry><structfield>protransform</structfield></entry>
      <entry><type>regproc</type></entry>
      <entry><literal><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.oid</literal></entry>
<!--
      <entry>Calls to this function can be simplified by this other function
       (see <xref linkend="xfunc-transform-functions">)</entry>
-->
      <entry>この関数呼び出しは他の関数により簡略化できます。
       (<xref linkend="xfunc-transform-functions">を参照してください)</entry>
     </row>

     <row>
      <entry><structfield>proisagg</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
<!--
      <entry>Function is an aggregate function</entry>
-->
      <entry>関数は集約関数です。</entry>
     </row>

     <row>
      <entry><structfield>proiswindow</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>

<!--
      <entry>Function is a window function</entry>
-->
      <entry>関数はウィンドウ関数です。</entry>
     </row>


     <row>
      <entry><structfield>prosecdef</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
<!--
      <entry>Function is a security definer (i.e., a <quote>setuid</>
      function)</entry>
-->
      <entry>
      セキュリティ定義の関数（すなわち<quote>setuid</>関数）
      </entry>
     </row>

     <row>
      <entry><structfield>proleakproof</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
<!--
      <entry>
       The function has no side effects.  No information about the
       arguments is conveyed except via the return value.  Any function
       that might throw an error depending on the values of its arguments
       is not leak-proof.
      </entry>
-->
      <entry>
      この関数には副作用がありません。引数に関する情報が戻り値以外から伝わることがありません。
      引数の値に依存するエラーを発生する可能性がある関数はすべてリークプルーフ関数ではありません。
      </entry>
     </row>

     <row>
      <entry><structfield>proisstrict</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
      <entry>
<!--
       Function returns null if any call argument is null.  In that
       case the function won't actually be called at all.  Functions
       that are not <quote>strict</quote> must be prepared to handle
       null inputs.
-->
関数は呼び出し引数がNULLの場合にはNULLを返します。
その場合、関数は実際にはまったく呼び出されません。
<quote>厳密</quote>ではない関数はNULL値入力を取り扱えるようにしなければいけません。
      </entry>
     </row>

     <row>
      <entry><structfield>proretset</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
<!--
      <entry>Function returns a set (i.e., multiple values of the specified
      data type)</entry>
-->
      <entry>
      集合（すなわち指定されたデータ型の複数の値）を返す関数
      </entry>
     </row>

     <row>
      <entry><structfield>provolatile</structfield></entry>
      <entry><type>char</type></entry>
      <entry></entry>
      <entry>
<!--
       <structfield>provolatile</structfield> tells whether the function's
       result depends only on its input arguments, or is affected by outside
       factors.
       It is <literal>i</literal> for <quote>immutable</> functions,
       which always deliver the same result for the same inputs.
       It is <literal>s</literal> for <quote>stable</> functions,
       whose results (for fixed inputs) do not change within a scan.
       It is <literal>v</literal> for <quote>volatile</> functions,
       whose results might change at any time.  (Use <literal>v</literal> also
       for functions with side-effects, so that calls to them cannot get
       optimized away.)
-->
<structfield>provolatile</structfield>は、関数の結果が入力引数のみで決定されるか、または外部要素に影響されるかを示します。
<quote>immutable</>関数を表す<literal>i</literal>は同じ入力に対し常に同じ結果をもたらします。
<quote>stable</>関数を表す<literal>s</literal>は（固定入力に対する）結果はスキャン内で変わりません。
<quote>volatile</>関数を表す<literal>v</literal>は常に異なる結果を出す可能性があります
（また、副作用を持つ関数に<literal>v</literal>を使用することで、その関数に対する呼び出しが最適化されないようにすることができます）。
      </entry>
     </row>

     <row>
      <entry><structfield>pronargs</structfield></entry>
      <entry><type>int2</type></entry>
      <entry></entry>
<!--
      <entry>Number of input arguments</entry>
-->
      <entry>入力の引数の数</entry>
     </row>

     <row>
      <entry><structfield>pronargdefaults</structfield></entry>
      <entry><type>int2</type></entry>
      <entry></entry>
<!--
      <entry>Number of arguments that have defaults</entry>
-->
      <entry>デフォルト値を持つ引数の数</entry>
     </row>

     <row>
      <entry><structfield>prorettype</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-type"><structname>pg_type</structname></link>.oid</literal></entry>
<!--
      <entry>Data type of the return value</entry>
-->
      <entry>戻り値のデータ型</entry>
     </row>

     <row>
      <entry><structfield>proargtypes</structfield></entry>
      <entry><type>oidvector</type></entry>
      <entry><literal><link linkend="catalog-pg-type"><structname>pg_type</structname></link>.oid</literal></entry>
      <entry>
<!--
       An array with the data types of the function arguments.  This includes
       only input arguments (including <literal>INOUT</literal> and
       <literal>VARIADIC</> arguments), and thus represents
       the call signature of the function.
-->
関数の引数のデータ型を格納した配列。
これは入力引数（<literal>INOUT</literal>と<literal>VARIADIC</>も含みます）のみを含んでいて、関数の呼び出しシグネチャを表現します。
      </entry>
     </row>

     <row>
      <entry><structfield>proallargtypes</structfield></entry>
      <entry><type>oid[]</type></entry>
      <entry><literal><link linkend="catalog-pg-type"><structname>pg_type</structname></link>.oid</literal></entry>
      <entry>
<!--
       An array with the data types of the function arguments.  This includes
       all arguments (including <literal>OUT</literal> and
       <literal>INOUT</literal> arguments); however, if all the
       arguments are <literal>IN</literal> arguments, this field will be null.
       Note that subscripting is 1-based, whereas for historical reasons
       <structfield>proargtypes</> is subscripted from 0.
-->
関数の引数のデータ型を格納した配列。
これは（<literal>OUT</literal>と<literal>INOUT</literal>引数を含んだ）全ての引数を含みます。
しかし、すべての引数が<literal>IN</literal>であった場合は、この列はNULLになります。
歴史的な理由から<structfield>proargtypes</>は0から番号が振られていますが、
添字は1から始まっていることに注意してください。
      </entry>
     </row>

     <row>
      <entry><structfield>proargmodes</structfield></entry>
      <entry><type>char[]</type></entry>
      <entry></entry>
      <entry>
<!--
        An array with the modes of the function arguments, encoded as
        <literal>i</literal> for <literal>IN</> arguments,
        <literal>o</literal> for <literal>OUT</> arguments,
        <literal>b</literal> for <literal>INOUT</> arguments,
        <literal>v</literal> for <literal>VARIADIC</> arguments,
        <literal>t</literal> for <literal>TABLE</> arguments.
        If all the arguments are <literal>IN</literal> arguments, 
        this field will be null.
        Note that subscripts correspond to positions of
        <structfield>proallargtypes</> not <structfield>proargtypes</>.
-->
関数の引数のモードを格納した配列。
以下のようにエンコードされています。
<literal>IN</>引数に対しては<literal>i</literal>、
<literal>OUT</>引数に対しては<literal>o</literal>、
<literal>INOUT</>引数に対しては<literal>b</literal>、
<literal>VARIADIC</>引数に対しては<literal>v</literal>、
<literal>TABLE</>引数に対しては<literal>t</literal>。
もしすべての引数が<literal>IN</>引数であった場合は、この列はNULLとなります。
添字は<structfield>proargtypes</>ではなく<structfield>proallargtypes</>の位置に対応していることに注意してください。
      </entry>
     </row>

     <row>
      <entry><structfield>proargnames</structfield></entry>
      <entry><type>text[]</type></entry>
      <entry></entry>
      <entry>
<!--
        An array with the names of the function arguments.
        Arguments without a name are set to empty strings in the array.
        If none of the arguments have a name, this field will be null.
        Note that subscripts correspond to positions of
        <structfield>proallargtypes</> not <structfield>proargtypes</>.
-->
関数の引数名を格納する配列。
名前のない引数は、配列内では空文字列で設定されます。
もしすべての引数に名前がない場合は、この列はNULLとなります。
添字は<structfield>proargtypes</>ではなく<structfield>proallargtypes</>の位置に対応していることに注意してください。
      </entry>
     </row>

     <row>
      <entry><structfield>proargdefaults</structfield></entry>
      <entry><type>pg_node_tree</type></entry>
      <entry></entry>
<!--
      <entry>
       Expression trees (in <function>nodeToString()</function> representation)
       for default values.  This is a list with
       <structfield>pronargdefaults</> elements, corresponding to the last
       <replaceable>N</> <emphasis>input</> arguments (i.e., the last
       <replaceable>N</> <structfield>proargtypes</> positions).
       If none of the arguments have defaults, this field will be null.
      </entry>
-->
      <entry>
デフォルト値のための(<function>nodeToString()</function>表現の)演算式ツリー。
これは<structfield>pronargdefaults</>の要素のリストで、最後の<replaceable>N</>個の<emphasis>入力</>引数と対応しています
（つまり最後の<replaceable>N</> <structfield>proargtypes</>の位置ということです）。
もし引数にデフォルト値がない場合は、この列はNULLになります。
      </entry>
     </row>


     <row>
      <entry><structfield>prosrc</structfield></entry>
      <entry><type>text</type></entry>
      <entry></entry>
      <entry>
<!--
       This tells the function handler how to invoke the function.  It
       might be the actual source code of the function for interpreted
       languages, a link symbol, a file name, or just about anything
       else, depending on the implementation language/call convention.
-->
関数の起動方法を関数ハンドラに伝えます。
実装言語や呼び出し規約に依存して、使用する言語用の関数の実際のソースコード、リンクシンボル、ファイル名などになります。
      </entry>
     </row>

     <row>
      <entry><structfield>probin</structfield></entry>
      <entry><type>text</type></entry>
      <entry></entry>
<!--
      <entry>
       Additional information about how to invoke the function.
       Again, the interpretation is language-specific.
      </entry>
-->
      <entry>
関数の起動方法についての追加情報。
同じように解釈は言語に依存します。
      </entry>
     </row>

     <row>
      <entry><structfield>proconfig</structfield></entry>
      <entry><type>text[]</type></entry>
      <entry></entry>
<!--
      <entry>Function's local settings for run-time configuration variables</entry>
-->
      <entry>実行時の設定変数に対する関数のローカル設定</entry>
     </row>

     <row>
      <entry><structfield>proacl</structfield></entry>
      <entry><type>aclitem[]</type></entry>
      <entry></entry>
<!--
      <entry>
       Access privileges; see
       <xref linkend="sql-grant"> and
       <xref linkend="sql-revoke">
       for details
      </entry>
-->
      <entry>
アクセス権限。
<xref linkend="sql-grant">と<xref linkend="sql-revoke">を参照してください。</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
<!--
   For compiled functions, both built-in and dynamically loaded,
   <structfield>prosrc</structfield> contains the function's C-language
   name (link symbol).  For all other currently-known language types,
   <structfield>prosrc</structfield> contains the function's source
   text.  <structfield>probin</structfield> is unused except for
   dynamically-loaded C functions, for which it gives the name of the
   shared library file containing the function.
-->
コンパイル言語で作成された、組込みおよび動的にロードされる関数では、<structfield>prosrc</structfield>は関数のC言語名（リンクシンボル）を持ちます。
他の種類の言語はすべて、<structfield>prosrc</structfield>は関数のソーステキストを持ちます。
<structfield>probin</structfield>は動的にロードされるC関数に対してその関数を保有する共有ライブラリファイルの名前を与える以外には使用されていません。
  </para>

 </sect1>

 <sect1 id="catalog-pg-range">
  <title><structname>pg_range</structname></title>

  <indexterm zone="catalog-pg-range">
   <primary>pg_range</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_range</structname> stores information about
   range types.  This is in addition to the types' entries in
   <link linkend="catalog-pg-type"><structname>pg_type</structname></link>.
-->
<structname>pg_range</structname>カタログは、範囲型についての情報を保存します。
これは<link linkend="catalog-pg-type"><structname>pg_type</structname></link>内の型のエントリに追加されます。
  </para>

  <table>
<!--
   <title><structname>pg_range</> Columns</title>
-->
   <title><structname>pg_range</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>rngtypid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-type"><structname>pg_type</structname></link>.oid</literal></entry>
<!--
      <entry>OID of the range type</entry>
-->
      <entry>範囲型のOID</entry>
     </row>

     <row>
      <entry><structfield>rngsubtype</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-type"><structname>pg_type</structname></link>.oid</literal></entry>
<!--      
      <entry>OID of the element type (subtype) of this range type</entry>
-->
      <entry>この範囲型の要素型(派生元型)のOID</entry>
     </row>

     <row>
      <entry><structfield>rngcollation</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-collation"><structname>pg_collation</structname></link>.oid</literal></entry>
<!--
      <entry>OID of the collation used for range comparisons, or 0 if none</entry>
-->
      <entry>範囲比較のために使用される照合のOID。何もない場合はゼロです。</entry>
     </row>

     <row>
      <entry><structfield>rngsubopc</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-opclass"><structname>pg_opclass</structname></link>.oid</literal></entry>
<!--
      <entry>OID of the subtype's operator class used for range comparisons</entry>
-->
      <entry>範囲比較のために使用される派生元型の演算子クラスのOID</entry>
     </row>

     <row>
      <entry><structfield>rngcanonical</structfield></entry>
      <entry><type>regproc</type></entry>
      <entry><literal><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.oid</literal></entry>
<!--
      <entry>OID of the function to convert a range value into canonical form,
      or 0 if none</entry>
-->
      <entry>範囲型を標準型に変換する関数のOID。何もない場合はゼロです。</entry>
     </row>

     <row>
      <entry><structfield>rngsubdiff</structfield></entry>
      <entry><type>regproc</type></entry>
      <entry><literal><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.oid</literal></entry>
<!--
      <entry>OID of the function to return the difference between two element
      values as <type>double precision</type>, or 0 if none</entry>
-->
      <entry>２つの要素値の間の違いを<type>double precision</type>として返す関数のOID、なければゼロ</entry>
     </row>
    </tbody>
   </tgroup>
  </table>
<!--
  <para>
   <structfield>rngsubopc</> (plus <structfield>rngcollation</>, if the
   element type is collatable) determines the sort ordering used by the range
   type.  <structfield>rngcanonical</> is used when the element type is
   discrete.  <structfield>rngsubdiff</> is optional but should be supplied to
   improve performance of GiST indexes on the range type.
  </para>
-->
  <para>
   <structfield>rngsubopc</> (および、要素型が照合可能である場合は<structfield>rngcollation</>)は
   範囲型で使用されるソートの順番を決定します。<structfield>rngcanonical</>は要素型が離散的である場合に使用されます。
   <structfield>rngsubdiff</>は省略可能ですが、範囲型に対するGiSTインデックスの性能を向上するためには提供しなければなりません。
  </para>

 </sect1>

 <sect1 id="catalog-pg-rewrite">
  <title><structname>pg_rewrite</structname></title>

  <indexterm zone="catalog-pg-rewrite">
   <primary>pg_rewrite</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_rewrite</structname> stores rewrite rules for tables and views.
-->
   <structname>pg_rewrite</structname>カタログはテーブルとビューに対する書き換えルールを保存します。
  </para>

  <table>
<!--
   <title><structname>pg_rewrite</> Columns</title>
-->
   <title><structname>pg_rewrite</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>oid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry></entry>
<!--
      <entry>Row identifier (hidden attribute; must be explicitly selected)</entry>
-->
      <entry>行識別子（隠し属性です。明示的に選択しなければなりません）</entry>
     </row>

     <row>
      <entry><structfield>rulename</structfield></entry>
      <entry><type>name</type></entry>
      <entry></entry>
<!--
      <entry>Rule name</entry>
-->
      <entry>ルール名</entry>
     </row>

     <row>
      <entry><structfield>ev_class</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-class"><structname>pg_class</structname></link>.oid</literal></entry>
<!--
      <entry>The table this rule is for</entry>
-->
      <entry>ルールを適用するテーブル</entry>
     </row>

     <row>
      <entry><structfield>ev_attr</structfield></entry>
      <entry><type>int2</type></entry>
      <entry></entry>
<!--
      <entry>The column this rule is for (currently, always -1 to
      indicate the whole table)</entry>
-->
      <entry>
      ルールを適用する列（現在は常にテーブル全体を表す-1）
      </entry>
     </row>

     <row>
      <entry><structfield>ev_type</structfield></entry>
      <entry><type>char</type></entry>
      <entry></entry>
      <entry>
<!--
       Event type that the rule is for: 1 = <command>SELECT</>, 2 =
       <command>UPDATE</>, 3 = <command>INSERT</>, 4 =
       <command>DELETE</>
-->
       ルールを適用するイベントの型： 
       1 = <command>SELECT</>、
       2 = <command>UPDATE</>、
       3 = <command>INSERT</>、
       4 = <command>DELETE</>
      </entry>
     </row>

     <row>
      <entry><structfield>ev_enabled</structfield></entry>
      <entry><type>char</type></entry>
      <entry></entry>
      <entry>
<!--
       Controls in which <xref linkend="guc-session-replication-role"> modes
       the rule fires.
       <literal>O</> = rule fires in <quote>origin</> and <quote>local</> modes,
       <literal>D</> = rule is disabled,
       <literal>R</> = rule fires in <quote>replica</> mode,
       <literal>A</> = rule fires always.
-->
ルールがどの<xref linkend="guc-session-replication-role">モードで発行されるかを制御します。
<literal>O</> = ルールは<quote>origin</>および<quote>local</>モードで発行。
<literal>D</> = ルールは無効。
<literal>R</> = ルールは<quote>replica</>モードで発行。
<literal>A</> = ルールは常に発行。
      </entry>
     </row>

     <row>
      <entry><structfield>is_instead</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
<!--
      <entry>True if the rule is an <literal>INSTEAD</literal> rule</entry>
-->
      <entry>ルールが<literal>INSTEAD</literal>ルールの場合は真</entry>
     </row>

     <row>
      <entry><structfield>ev_qual</structfield></entry>
      <entry><type>pg_node_tree</type></entry>
      <entry></entry>
      <entry>
<!--
       Expression tree (in the form of a
       <function>nodeToString()</function> representation) for the
       rule's qualifying condition
-->
      ルールの制約条件に対する（<function>nodeToString()</function>表現による）演算式ツリー
      </entry>
     </row>

     <row>
      <entry><structfield>ev_action</structfield></entry>
      <entry><type>pg_node_tree</type></entry>
      <entry></entry>
      <entry>
<!--
       Query tree (in the form of a
       <function>nodeToString()</function> representation) for the
       rule's action
-->
       ルールのアクションに対する（<function>nodeToString()</function>表現による）問い合わせツリー
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <note>
   <para>
<!--
    <literal>pg_class.relhasrules</literal>
    must be true if a table has any rules in this catalog.
-->
   テーブルがこのカタログ内のルールを持つ場合、<literal>pg_class.relhasrules</literal>は真でなければなりません。 
   </para>
  </note>

 </sect1>

 <sect1 id="catalog-pg-replication-slots">
  <title><structname>pg_replication_slots</structname></title>

  <indexterm zone="catalog-pg-replication-slots">
   <primary>pg_replication_slots</primary>
  </indexterm>

  <para>
<!--
   The <structname>pg_replication_slots</structname> view provides a listing
   of all replication slots that currently exist on the database cluster,
   along with their current state.
-->
<structname>pg_replication_slots</structname>は、現在存在するデータベースクラスタとその状態、全てのレプリケーションスロットの一覧を提供します。
  </para>

  <para>
<!--
   For more on replication slots,
   see <xref linkend="streaming-replication-slots"> and <xref linkend="logicaldecoding">.
-->
レプリケーションスロットに関する詳細は、<xref linkend="streaming-replication-slots">と<xref linkend="logicaldecoding">を参照してください。
  </para>

  <table>
<!--
   <title><structname>pg_replication_slots</structname> Columns</title>
-->
   <title><structname>pg_replication_slots</structname>の列</title>
   
   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>slot_name</structfield></entry>
      <entry><type>name</type></entry>
      <entry></entry>
<!--
      <entry>A unique, cluster-wide identifier for the replication slot</entry>
-->
      <entry>クラスタ間で一意なレプリケーションスロットの識別子</entry>
     </row>

     <row>
      <entry><structfield>plugin</structfield></entry>
      <entry><type>name</type></entry>
      <entry></entry>
<!--
      <entry>The base name of the shared object containing the output plugin this logical slot is using, or null for physical slots.</entry>
-->
      <entry>出力プラグインに使用されている論理スロットまたは物理スロットの場合はnull、を含む共有オブジェクトの基底名。</entry>
     </row>

     <row>
      <entry><structfield>slot_type</structfield></entry>
      <entry><type>text</type></entry>
      <entry></entry>
<!--
      <entry>The slot type - <literal>physical</> or <literal>logical</></entry>
-->
      <entry>スロットのタイプ - <literal>physical</>または<literal>logical</></entry>
     </row>

     <row>
      <entry><structfield>datoid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-database"><structname>pg_database</structname></link>.oid</literal></entry>
<!--
      <entry>The OID of the database this slot is associated with, or
      null. Only logical slots have an associated database.</entry>
-->
      <entry>このスロットと関連しているデータベースのOID、またはnull。論理スロットだけがデータベースと関連を持つことができます。</entry>
     </row>

     <row>
      <entry><structfield>database</structfield></entry>
      <entry><type>text</type></entry>
      <entry><literal><link linkend="catalog-pg-database"><structname>pg_database</structname></link>.datname</literal></entry>
<!--
      <entry>The name of the database this slot is associated with, or
      null. Only logical slots have an associated database.</entry>
-->
      <entry>このスロットと関連しているデータベース名、またはnull。論理スロットだけがデータベースと関連を持つことができます。</entry>
     </row>

     <row>
      <entry><structfield>active</structfield></entry>
      <entry><type>boolean</type></entry>
      <entry></entry>
<!--
      <entry>True if this slot is currently actively being used</entry>
-->
      <entry>このスロットが現在アクティブで使用されている場合、真。</entry>
     </row>

     <row>
      <entry><structfield>xmin</structfield></entry>
      <entry><type>xid</type></entry>
      <entry></entry>
<!--
      <entry>The oldest transaction that this slot needs the database to
      retain.  <literal>VACUUM</literal> cannot remove tuples deleted
      by any later transaction.
      </entry>
-->
      <entry>このスロットがデータベースとの接続を必要としている最も古いトランザクション。
      <literal>VACUUM</literal> は後でトランザクションによって削除されたタプルを除去できません。
      </entry>
     </row>

     <row>
      <entry><structfield>catalog_xmin</structfield></entry>
      <entry><type>xid</type></entry>
      <entry></entry>
<!--
      <entry>The oldest transaction affecting the system catalogs that this
      slot needs the database to retain.  <literal>VACUUM</literal> cannot
      remove catalog tuples deleted by any later transaction.
      </entry>
-->
      <entry>このスロットがデータベースとの接続を必要としている、システムカタログに影響する最も古いトランザクション。
      <literal>VACUUM</literal>は後でトランザクションによって削除されたカタログのタプルを除去できません。
      </entry>
     </row>

     <row>
      <entry><structfield>restart_lsn</structfield></entry>
      <entry><type>pg_lsn</type></entry>
      <entry></entry>
<!--
      <entry>The address (<literal>LSN</literal>) of oldest WAL which still
      might be required by the consumer of this slot and thus won't be
      automatically removed during checkpoints.
      </entry>
-->
      <entry>このスロットの利用者に必要かもしれないため、チェックポイント中に自動除去されない、もっとも古いWALの(<literal>LSN</literal>) アドレス。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect1>

 <sect1 id="catalog-pg-seclabel">
  <title><structname>pg_seclabel</structname></title>

  <indexterm zone="catalog-pg-seclabel">
   <primary>pg_seclabel</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_seclabel</structname> stores security
   labels on database objects.  Security labels can be manipulated
   with the <xref linkend="sql-security-label"> command.  For an easier
   way to view security labels, see <xref linkend="view-pg-seclabels">.
-->
<structname>pg_seclabel</structname>カタログにはデータベースオブジェクト上のセキュリティラベルが格納されます。
セキュリティラベルは<xref linkend="sql-security-label">コマンドを用いて操作することができます。
セキュリティラベルを閲覧するより簡単な方法については<xref linkend="view-pg-seclabels">を参照してください。
  </para>

  <para>
<!--
   See also <link linkend="catalog-pg-shseclabel"><structname>pg_shseclabel</structname></link>,
   which performs a similar function for security labels of database objects
   that are shared across a database cluster.
-->
<link linkend="catalog-pg-shseclabel"><structname>pg_shseclabel</structname></link>を参照してください。
これは、データベースクラスタ間で共有されたデータベースオブジェクトにおけるセキュリティラベルのための類似した機能を提供します。

  </para>

  <table>
<!--
   <title><structname>pg_seclabel</structname> Columns</title>
-->
   <title><structname>pg_seclabel</structname>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>objoid</structfield></entry>
      <entry><type>oid</type></entry>
<!--
      <entry>any OID column</entry>
      <entry>The OID of the object this security label pertains to</entry>
-->
      <entry>任意のOID列</entry>
      <entry>このセキュリティラベルが付属するオブジェクトのOID</entry>
     </row>

     <row>
      <entry><structfield>classoid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-class"><structname>pg_class</structname></link>.oid</literal></entry>
<!--
      <entry>The OID of the system catalog this object appears in</entry>
-->
      <entry>このオブジェクトが出現するシステムカタログのOID</entry>
     </row>

     <row>
      <entry><structfield>objsubid</structfield></entry>
      <entry><type>int4</type></entry>
      <entry></entry>
      <entry>
<!--
       For a security label on a table column, this is the column number (the
       <structfield>objoid</> and <structfield>classoid</> refer to
       the table itself).  For all other object types, this column is
       zero.
-->
テーブル列上のセキュリティラベルでは、これは列番号です（<structfield>objoid</>および<structfield>classoid</>はテーブル自身を参照します）。
他のすべての種類のオブジェクトでは、この列はゼロです。
      </entry>
     </row>

     <row>
      <entry><structfield>provider</structfield></entry>
      <entry><type>text</type></entry>
      <entry></entry>
<!--
      <entry>The label provider associated with this label.</entry>
-->
      <entry>このラベルに関連付いたラベルプロバイダです。</entry>
     </row>

     <row>
      <entry><structfield>label</structfield></entry>
      <entry><type>text</type></entry>
      <entry></entry>
<!--
      <entry>The security label applied to this object.</entry>
-->
      <entry>このオブジェクトに適用されるセキュリティラベルです。</entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect1>

 <sect1 id="catalog-pg-shdepend">
  <title><structname>pg_shdepend</structname></title>

  <indexterm zone="catalog-pg-shdepend">
   <primary>pg_shdepend</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_shdepend</structname> records the
   dependency relationships between database objects and shared objects,
   such as roles.  This information allows
   <productname>PostgreSQL</productname> to ensure that those objects are
   unreferenced before attempting to delete them.
-->
<structname>pg_shdepend</structname>カタログは、データベースオブジェクトとロールのような共有オブジェクト間のリレーション依存関係を保持します。
この情報は<productname>PostgreSQL</productname>が依存関係を削除しようとする前に、これらのオブジェクトを参照されないようにすることを保証することを許可します。
  </para>

  <para>
<!--
   See also <link linkend="catalog-pg-depend"><structname>pg_depend</structname></link>,
   which performs a similar function for dependencies involving objects
   within a single database.
-->
<link linkend="catalog-pg-depend"><structname>pg_depend</structname></link>を参照してください。
これは単一のデータベースのオブジェクトに関する依存関係に対する似たような機能を持ちます。
  </para>

  <para>
<!--
   Unlike most system catalogs, <structname>pg_shdepend</structname>
   is shared across all databases of a cluster: there is only one
   copy of <structname>pg_shdepend</structname> per cluster, not
   one per database.
-->
多くのシステムカタログと異なり<structname>pg_shdepend</structname>はクラスタの全てのデータベースに共有されています。
データベース毎ではなく、クラスタ毎にただ1つの<structname>pg_shdepend</structname>のコピーがあります。
  </para>

  <table>
<!--
   <title><structname>pg_shdepend</> Columns</title>
-->
   <title><structname>pg_shdepend</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>dbid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-database"><structname>pg_database</structname></link>.oid</literal></entry>
<!--
      <entry>The OID of the database the dependent object is in,
       or zero for a shared object</entry>
-->
      <entry>依存するオブジェクトが格納されたデータベースのOID。共有オブジェクトではゼロ</entry>
     </row>

     <row>
      <entry><structfield>classid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-class"><structname>pg_class</structname></link>.oid</literal></entry>
<!--
      <entry>The OID of the system catalog the dependent object is in</entry>
-->
      <entry>依存するオブジェクトが格納されたシステムカタログのOID</entry>
     </row>

     <row>
      <entry><structfield>objid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry>any OID column</entry>
<!--
      <entry>The OID of the specific dependent object</entry>
-->
      <entry>特定の依存するオブジェクトのOID</entry>
     </row>

     <row>
      <entry><structfield>objsubid</structfield></entry>
      <entry><type>int4</type></entry>
      <entry></entry>
<!--
      <entry>
       For a table column, this is the column number (the
       <structfield>objid</> and <structfield>classid</> refer to the
       table itself).  For all other object types, this column is zero.
      </entry>
-->
      <entry>
テーブル列の場合、これは列番号です(<structfield>objid</>と<structfield>classid</>はテーブル自身を参照します)。
他のすべての種類のオブジェクトでは、この列はゼロになります。
      </entry>
     </row>


     <row>
      <entry><structfield>refclassid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-class"><structname>pg_class</structname></link>.oid</literal></entry>
<!--
      <entry>The OID of the system catalog the referenced object is in
       (must be a shared catalog)</entry>
-->
      <entry>参照されるオブジェクトが入っているシステムカタログのOID（共有カタログである必要があります）</entry>
     </row>

     <row>
      <entry><structfield>refobjid</structfield></entry>
      <entry><type>oid</type></entry>
<!--
      <entry>any OID column</entry>
      <entry>The OID of the specific referenced object</entry>
-->
      <entry>任意のOID列</entry>
      <entry>特定の参照されるオブジェクトのOID</entry>
     </row>

     <row>
      <entry><structfield>deptype</structfield></entry>
      <entry><type>char</type></entry>
      <entry></entry>
      <entry>
<!--
       A code defining the specific semantics of this dependency relationship; see text
-->
この依存関係の特定のセマンティクスを定義するコード（後述）。
      </entry>
     </row>

    </tbody>
   </tgroup>
  </table>

  <para>
<!--
   In all cases, a <structname>pg_shdepend</structname> entry indicates that
   the referenced object cannot be dropped without also dropping the dependent
   object.  However, there are several subflavors identified by
   <structfield>deptype</>:
-->
すべての場合において、<structname>pg_shdepend</structname>項目は依存するオブジェクトも削除しない限り、参照されるオブジェクトを削除できないことを示します。
もっとも、<structfield>deptype</>によって指定される以下のようないくつかのオプションもあります。
   <variablelist>
    <varlistentry>
     <term><symbol>SHARED_DEPENDENCY_OWNER</> (<literal>o</>)</term>
     <listitem>
      <para>
<!--
       The referenced object (which must be a role) is the owner of the
       dependent object.
-->
       参照されるオブジェクト（ロールである必要があります）が依存するオブジェクトの所有者です。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><symbol>SHARED_DEPENDENCY_ACL</> (<literal>a</>)</term>
     <listitem>
      <para>
<!--
       The referenced object (which must be a role) is mentioned in the
       ACL (access control list, i.e., privileges list) of the
       dependent object.  (A <symbol>SHARED_DEPENDENCY_ACL</> entry is
       not made for the owner of the object, since the owner will have
       a <symbol>SHARED_DEPENDENCY_OWNER</> entry anyway.)
-->
参照されたオブジェクト（ロールである必要があります）が、依存するオブジェクトのACL（アクセス制御リスト。権限リストのこと）内で述べられています。
（所有者は<symbol>SHARED_DEPENDENCY_OWNER</>項目を持つため、<symbol>SHARED_DEPENDENCY_ACL</>項目は、オブジェクトの所有者に対して作成されません。）
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><symbol>SHARED_DEPENDENCY_PIN</> (<literal>p</>)</term>
     <listitem>
      <para>
<!--
       There is no dependent object; this type of entry is a signal
       that the system itself depends on the referenced object, and so
       that object must never be deleted.  Entries of this type are
       created only by <command>initdb</command>.  The columns for the
       dependent object contain zeroes.
-->
依存するオブジェクトはありません。
この種類の項目は、システム自体が参照されるオブジェクトに依存している記号です。
よってオブジェクトは削除されてはいけません。
この種類の項目は<command>initdb</command>によってのみ作成されます。
依存するオブジェクトの列はゼロを含んでいます。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>

<!--
   Other dependency flavors might be needed in future.  Note in particular
   that the current definition only supports roles as referenced objects.
-->
他の依存関係のオプションが将来必要になる可能性があります。
現状の定義は、参照されるオブジェクトとしてロールのみをサポートしていることに特に注意してください。
  </para>

 </sect1>


 <sect1 id="catalog-pg-shdescription">
  <title><structname>pg_shdescription</structname></title>

  <indexterm zone="catalog-pg-shdescription">
   <primary>pg_shdescription</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_shdescription</structname> stores optional
   descriptions (comments) for shared database objects.  Descriptions can be
   manipulated with the <xref linkend="sql-comment"> command and viewed with
   <application>psql</application>'s <literal>\d</literal> commands.
-->
<structname>pg_shdescription</structname>には共有データベースオブジェクトに対する補足説明（コメント）を格納します。
補足説明は<xref linkend="sql-comment">コマンドを使用して編集でき、<application>psql</application>の<literal>\d</literal>コマンドを使用して閲覧することができます。
  </para>

  <para>
<!--
   See also <link linkend="catalog-pg-description"><structname>pg_description</structname></link>,
   which performs a similar function for descriptions involving objects
   within a single database.
-->
<link linkend="catalog-pg-description"><structname>pg_description</structname></link>も参照してください。
こちらは、単一データベース内のオブジェクトに関する説明について、同様の機能を行います。
  </para>

  <para>
<!-- 
   Unlike most system catalogs, <structname>pg_shdescription</structname>
   is shared across all databases of a cluster: there is only one
   copy of <structname>pg_shdescription</structname> per cluster, not
   one per database.
-->
他のシステムカタログと異なり、<structname>pg_shdescription</structname>はクラスタ内のすべてのデータベースに渡って共有されます。
データベース毎に存在するのではなく、1つのクラスタに<structname>pg_shdescription</structname>が1つのみ存在します。
  </para>

  <table>
<!--
   <title><structname>pg_shdescription</> Columns</title>
-->
   <title><structname>pg_shdescription</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>objoid</structfield></entry>
      <entry><type>oid</type></entry>
<!--
      <entry>any OID column</entry>
      <entry>The OID of the object this description pertains to</entry>
-->
      <entry>任意のOID列</entry>
      <entry>補足説明が属するオブジェクトのOID</entry>
     </row>

     <row>
      <entry><structfield>classoid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-class"><structname>pg_class</structname></link>.oid</literal></entry>
<!--
      <entry>The OID of the system catalog this object appears in</entry>
-->
      <entry>このオブジェクトが存在するシステムカタログのOID</entry>
     </row>

     <row>
      <entry><structfield>description</structfield></entry>
      <entry><type>text</type></entry>
      <entry></entry>
<!--
      <entry>Arbitrary text that serves as the description of this object</entry>
-->
      <entry>このオブジェクトの補足説明として提供される任意のテキスト</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

 </sect1>

 <sect1 id="catalog-pg-shseclabel">
  <title><structname>pg_shseclabel</structname></title>

  <indexterm zone="catalog-pg-shseclabel">
   <primary>pg_shseclabel</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_shseclabel</structname> stores security
   labels on shared database objects.  Security labels can be manipulated
   with the <xref linkend="sql-security-label"> command.  For an easier
   way to view security labels, see <xref linkend="view-pg-seclabels">.
-->
<structname>pg_shseclabel</structname>カタログは、共有データベースオブジェクト上のセキュリティラベルを保存します。
セキュリティラベルは<xref linkend="sql-security-label">コマンドで操作されます。
セキュリティラベルを見る簡単な方法は、<xref linkend="view-pg-seclabels">を参照してください。
  </para>

  <para>
<!--
   See also <link linkend="catalog-pg-seclabel"><structname>pg_seclabel</structname></link>,
   which performs a similar function for security labels involving objects
   within a single database.
-->
<link linkend="catalog-pg-seclabel"><structname>pg_seclabel</structname></link>も参照してください。
これは、単一データベース内のオブジェクトを含むセキュリティラベルのための類似した機能を提供します。
  </para>

  <para>
<!--
   Unlike most system catalogs, <structname>pg_shseclabel</structname>
   is shared across all databases of a cluster: there is only one
   copy of <structname>pg_shseclabel</structname> per cluster, not
   one per database.
-->
多くのシステムカタログと違い、<structname>pg_shseclabel</structname>はクラスタ内の全てのデータベース間で共有されます。
<structname>pg_shseclabel</structname>は、データベースごとではなく、クラスタごとに1つのみ存在します。
  </para>

  <table>
<!--
   <title><structname>pg_shseclabel</structname> Columns</title>
-->
   <title><structname>pg_shseclabel</structname> の列</title>
   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>     

     </row>
    </thead>
    <tbody>
     <row>
      <entry><structfield>objoid</structfield></entry>
      <entry><type>oid</type></entry>
<!--
      <entry>any OID column</entry>
-->
      <entry>任意のOID列</entry>
<!--
      <entry>The OID of the object this security label pertains to</entry>
-->
      <entry>このセキュリティラベルが属しているオブジェクトのOID</entry>
     </row>
     <row>
      <entry><structfield>classoid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-class"><structname>pg_class</structname></link>.oid</literal></entry>
<!--
      <entry>The OID of the system catalog this object appears in</entry>
-->
      <entry>このオブジェクトが出現するシステムカタログのOID</entry>
     </row>
     <row>
      <entry><structfield>provider</structfield></entry>
      <entry><type>text</type></entry>
      <entry></entry>
<!--
      <entry>The label provider associated with this label.</entry>
-->
      <entry>このラベルに関連付けられたラベルプロバイダ</entry>
     </row>
     <row>
      <entry><structfield>label</structfield></entry>
      <entry><type>text</type></entry>
      <entry></entry>
<!--
      <entry>The security label applied to this object.</entry>
-->
      <entry>このオブジェクトに適用されたセキュリティラベル</entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect1>

 <sect1 id="catalog-pg-statistic">
  <title><structname>pg_statistic</structname></title>

  <indexterm zone="catalog-pg-statistic">
   <primary>pg_statistic</primary>
  </indexterm>

<!--
  <para>
   The catalog <structname>pg_statistic</structname> stores
   statistical data about the contents of the database.  Entries are
   created by <xref linkend="sql-analyze">
   and subsequently used by the query planner.  Note that all the
   statistical data is inherently approximate, even assuming that it
   is up-to-date.
  </para>
-->
  <para>
<structname>pg_statistic</structname>カタログはデータベースの内容に関する統計データを保存します。
項目は<xref linkend="sql-analyze">で作成され、後に問い合わせプランナで使用されます。
最新のものと思ってもすべての統計データは本質的に大雑把なものであることに注意してください。
  </para>

  <para>
<!--
   Normally there is one entry, with <structfield>stainherit</> =
   <literal>false</>, for each table column that has been analyzed.
   If the table has inheritance children, a second entry with
   <structfield>stainherit</> = <literal>true</> is also created.  This row
   represents the column's statistics over the inheritance tree, i.e.,
   statistics for the data you'd see with
   <literal>SELECT <replaceable>column</> FROM <replaceable>table</>*</literal>,
   whereas the <structfield>stainherit</> = <literal>false</> row represents
   the results of
   <literal>SELECT <replaceable>column</> FROM ONLY <replaceable>table</></literal>.
-->
通常は、解析されるテーブル列毎に、<structfield>stainherit</> = <literal>false</>を持つ1つの項目が存在します。
テーブルが継承された子を持つ場合、<structfield>stainherit</> = <literal>true</>を持つ2つ目の項目が作成されます。
この行は継承ツリー全体に渡る列の統計情報、つまり、<literal>SELECT <replaceable>column</> FROM <replaceable>table</>*</literal>で確認できるデータに対する統計情報を表します。
一方で<structfield>stainherit</> = <literal>false</>の行は<literal>SELECT <replaceable>column</> FROM ONLY <replaceable>table</></literal>の結果を表します。
  </para>

  <para>
<!--
   <structname>pg_statistic</structname> also stores statistical data about
   the values of index expressions.  These are described as if they were
   actual data columns; in particular, <structfield>starelid</structfield>
   references the index.  No entry is made for an ordinary non-expression
   index column, however, since it would be redundant with the entry
   for the underlying table column.  Currently, entries for index expressions
   always have <structfield>stainherit</> = <literal>false</>.
-->
<structname>pg_statistic</structname>はインデックス式の値についての統計データも格納します。
これらはあたかも値が実際のデータ列であるかのように表現されます。
特に<structfield>starelid</structfield>はインデックスを参照します。
これは元のテーブル列の項目に対して冗長となるので、普通の式を持たないインデックス列では項目は作成されません。
現在インデックス式用の項目は常に<structfield>stainherit</> = <literal>false</>を持ちます。
  </para>

  <para>
<!--
   Since different kinds of statistics might be appropriate for different
   kinds of data, <structname>pg_statistic</structname> is designed not
   to assume very much about what sort of statistics it stores.  Only
   extremely general statistics (such as nullness) are given dedicated
   columns in <structname>pg_statistic</structname>.  Everything else
   is stored in <quote>slots</quote>, which are groups of associated columns
   whose content is identified by a code number in one of the slot's columns.
   For more information see
   <filename>src/include/catalog/pg_statistic.h</filename>.
-->
異なる種類のデータに対しては違った種類の統計が相応しいことから<structname>pg_statistic</structname>はどのような情報を保存するか深く推定しないように設計されています。
（例えばNULLであるような）極端に一般的な統計のみ<structname>pg_statistic</structname>の特定の列に入ります。
その他すべてはスロット列の内の1つのコード番号でその内容が識別される相関している列のグループである<quote>スロット</quote>に保存されます。
<filename>src/include/catalog/pg_statistic.h</filename>を参照してください。
  </para>

  <para>
<!--
   <structname>pg_statistic</structname> should not be readable by the
   public, since even statistical information about a table's contents
   might be considered sensitive.  (Example: minimum and maximum values
   of a salary column might be quite interesting.)
   <link linkend="view-pg-stats"><structname>pg_stats</structname></link>
   is a publicly readable view on
   <structname>pg_statistic</structname> that only exposes information
   about those tables that are readable by the current user.
-->
<structname>pg_statistic</structname>はテーブル内容に関する統計情報と言えども秘密の情報とみなされますので、一般のユーザが読み取り可能であってはいけません。
（給与列の最高額と最低額などは誰もが興味をそそる良い例ですよね。）
<link linkend="view-pg-stats"><structname>pg_stats</structname></link>は一般のユーザが読み取り可能な<structname>pg_statistic</structname>に対するビューで、既存のユーザが読んでも差し支えないテーブルの情報のみを開示しています。
  </para>

  <table>
<!--
   <title><structname>pg_statistic</> Columns</title>
-->
   <title><structname>pg_statistic</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>     
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>starelid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-class"><structname>pg_class</structname></link>.oid</literal></entry>
<!--
      <entry>The table or index that the described column belongs to</entry>
-->
      <entry>記述された列が属するテーブルもしくはインデックス</entry>
     </row>

     <row>
      <entry><structfield>staattnum</structfield></entry>
      <entry><type>int2</type></entry>
      <entry><literal><link linkend="catalog-pg-attribute"><structname>pg_attribute</structname></link>.attnum</literal></entry>
<!--
      <entry>The number of the described column</entry>
-->
      <entry>記述された列数</entry>
     </row>

     <row>
      <entry><structfield>stainherit</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
<!--
      <entry>If true, the stats include inheritance child columns, not just the
       values in the specified relation</entry>
-->
      <entry>
真の場合、統計情報には指定されたテーブルの値だけではなく、継承関係の子の列が含まれます。
      </entry>
     </row>

     <row>
      <entry><structfield>stanullfrac</structfield></entry>
      <entry><type>float4</type></entry>
      <entry></entry>
<!--
      <entry>The fraction of the column's entries that are null</entry>
-->
      <entry>NULL値である列項目の割合</entry>
     </row>

     <row>
      <entry><structfield>stawidth</structfield></entry>
      <entry><type>int4</type></entry>
      <entry></entry>
<!--
      <entry>The average stored width, in bytes, of nonnull entries</entry>
-->
      <entry>非NULL項目の平均保存幅（バイト単位）</entry>
     </row>

     <row>
      <entry><structfield>stadistinct</structfield></entry>
      <entry><type>float4</type></entry>
      <entry></entry>
<!--
      <entry>The number of distinct nonnull data values in the column.
      A value greater than zero is the actual number of distinct values.
      A value less than zero is the negative of a multiplier for the number
      of rows in the table; for example, a column in which values appear about
      twice on the average could be represented by
      <structfield>stadistinct</> = -0.5.
      A zero value means the number of distinct values is unknown.
      </entry>
-->
      <entry>
列内で非NULL個別値を持つデータ数。
ゼロより大きい値は実際の個別値の数です。
ゼロより小さい値はテーブル内の行数に対する負の乗数です。
例えば、平均して2回ほど出現する値を持つ列は<structfield>stadistinct</> = -0.5であると表現されます。
ゼロは固有値を特定できない場合です。
      </entry>
     </row>

     <row>
      <entry><structfield>stakind<replaceable>N</></structfield></entry>
      <entry><type>int2</type></entry>
      <entry></entry>
      <entry>
<!--
       A code number indicating the kind of statistics stored in the
       <replaceable>N</>th <quote>slot</quote> of the
       <structname>pg_statistic</structname> row.
-->
       <structname>pg_statistic</structname>行のN番目の<quote>スロット</quote>に保存されている統計情報の種類を示すコード番号。
      </entry>
     </row>

     <row>
      <entry><structfield>staop<replaceable>N</></structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-operator"><structname>pg_operator</structname></link>.oid</literal></entry>
      <entry>
<!--
       An operator used to derive the statistics stored in the
       <replaceable>N</>th <quote>slot</quote>.  For example, a
       histogram slot would show the <literal>&lt;</literal> operator
       that defines the sort order of the data.
-->
N番目の<quote>スロット</quote>に保存されている統計情報を引き出すために使われる演算子。
例えば、度数分布スロットはデータの並び換えの順序を定義する<literal>&lt;</literal>演算子を示します。
      </entry>
     </row>

     <row>
      <entry><structfield>stanumbers<replaceable>N</></structfield></entry>
      <entry><type>float4[]</type></entry>
      <entry></entry>
      <entry>
<!--
       Numerical statistics of the appropriate kind for the
       <replaceable>N</>th <quote>slot</quote>, or null if the slot
       kind does not involve numerical values
-->
       N番目の<quote>スロット</quote>に対する適切な種類の数値統計情報、もしくはスロットの種類に数値が含まれない時はNULLです。
      </entry>
     </row>

     <row>
      <entry><structfield>stavalues<replaceable>N</></structfield></entry>
      <entry><type>anyarray</type></entry>
      <entry></entry>
      <entry>
<!--
       Column data values of the appropriate kind for the
       <replaceable>N</>th <quote>slot</quote>, or null if the slot
       kind does not store any data values.  Each array's element
       values are actually of the specific column's data type, or a related
       type such as an array's element type, so there is no way to define
       these columns' type more specifically than <type>anyarray</>.
-->
<replaceable>N</>番目の<quote>スロット</quote>に対する適切な種類の列データの値、もしくはスロットの種類にデータ値が何も保存されていない場合はNULL。
それぞれの配列要素の値は実際には特定された列のデータ型、もしくは配列要素の型といったような関連のある型になります。ですから<type>anyarray</>とする以外に列型を定義することはできません。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

 </sect1>


 <sect1 id="catalog-pg-tablespace">
  <title><structname>pg_tablespace</structname></title>

  <indexterm zone="catalog-pg-tablespace">
   <primary>pg_tablespace</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_tablespace</structname> stores information
   about the available tablespaces.  Tables can be placed in particular
   tablespaces to aid administration of disk layout.
-->
<structname>pg_tablespace</structname>カタログは利用できるテーブル空間についての情報を格納します。
テーブルは、ディスクの配置を管理できるようにするために特定のテーブル空間に格納することができます。
  </para>

  <para>
<!--
   Unlike most system catalogs, <structname>pg_tablespace</structname>
   is shared across all databases of a cluster: there is only one
   copy of <structname>pg_tablespace</structname> per cluster, not
   one per database.
-->
システムカタログの大部分とは違って、<structname>pg_tablespace</structname>は、すべてのクラスタのデータベース間で共有されます。
（データベース毎ではなく）クラスタ毎に、<structname>pg_tablespace</structname>のコピーが1つだけ存在します。
  </para>

  <table>
<!--
   <title><structname>pg_tablespace</> Columns</title>
-->
   <title><structname>pg_tablespace</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>oid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry></entry>
<!--
      <entry>Row identifier (hidden attribute; must be explicitly selected)</entry>
-->
      <entry>行識別子（隠し属性です。明示的に選択しなければなりません）</entry>
     </row>

     <row>
      <entry><structfield>spcname</structfield></entry>
      <entry><type>name</type></entry>
      <entry></entry>
<!--
      <entry>Tablespace name</entry>
-->
      <entry>テーブル空間名</entry>
     </row>

     <row>
      <entry><structfield>spcowner</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.oid</literal></entry>
<!--
      <entry>Owner of the tablespace, usually the user who created it</entry>
-->
      <entry>テーブル空間の所有者。たいていはテーブル空間を作成したユーザ</entry>
     </row>

     <row>
      <entry><structfield>spcacl</structfield></entry>
      <entry><type>aclitem[]</type></entry>
      <entry></entry>
      <entry>
<!--
       Access privileges; see
       <xref linkend="sql-grant"> and
       <xref linkend="sql-revoke">
       for details
-->
アクセス権限。
<xref linkend="sql-grant">と<xref linkend="sql-revoke">を参照してください。
      </entry>
     </row>

     <row>
      <entry><structfield>spcoptions</structfield></entry>
      <entry><type>text[]</type></entry>
      <entry></entry>
      <entry>
<!--
       Tablespace-level options, as <quote>keyword=value</> strings
-->
<quote>keyword=value</>文字列のようなテーブル空間レベルのオプション。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect1>


 <sect1 id="catalog-pg-trigger">
  <title><structname>pg_trigger</structname></title>

  <indexterm zone="catalog-pg-trigger">
   <primary>pg_trigger</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_trigger</structname> stores triggers on tables
   and views.
   See <xref linkend="sql-createtrigger">
   for more information.
-->
<structname>pg_trigger</structname>カタログはテーブルおよびビュー上のトリガを保存します。
<xref linkend="sql-createtrigger">を参照してください。
  </para>

  <table>
<!--
   <title><structname>pg_trigger</> Columns</title>
-->
 <title><structname>pg_trigger</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>oid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry></entry>
<!--
      <entry>Row identifier (hidden attribute; must be explicitly selected)</entry>
-->
      <entry>行識別子（隠し属性です。明示的に選択しなければなりません）</entry>
     </row>

     <row>
      <entry><structfield>tgrelid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-class"><structname>pg_class</structname></link>.oid</literal></entry>
<!--
      <entry>The table this trigger is on</entry>
-->
      <entry>トリガのかかっているテーブル</entry>
     </row>

     <row>
      <entry><structfield>tgname</structfield></entry>
      <entry><type>name</type></entry>
      <entry></entry>
<!--
      <entry>Trigger name (must be unique among triggers of same table)</entry>
-->
      <entry>トリガ名（同一テーブル内で一意である必要があります）</entry>
     </row>

     <row>
      <entry><structfield>tgfoid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.oid</literal></entry>
<!--
      <entry>The function to be called</entry>
-->
      <entry>呼び出される関数</entry>
     </row>

     <row>
      <entry><structfield>tgtype</structfield></entry>
      <entry><type>int2</type></entry>
      <entry></entry>
<!--
      <entry>Bit mask identifying trigger firing conditions</entry>
-->
      <entry>トリガ発行条件を指定するビットマスク</entry>
     </row>

     <row>
      <entry><structfield>tgenabled</structfield></entry>
      <entry><type>char</type></entry>
      <entry></entry>
<!--
      <entry>
       Controls in which <xref linkend="guc-session-replication-role"> modes
       the trigger fires.
       <literal>O</> = trigger fires in <quote>origin</> and <quote>local</> modes,
       <literal>D</> = trigger is disabled,
       <literal>R</> = trigger fires in <quote>replica</> mode,
       <literal>A</> = trigger fires always.
      </entry>
-->
      <entry>
どの<xref linkend="guc-session-replication-role">モードでトリガが発行されるかを制御します。
       <literal>O</> = <quote>起点</>モードと<quote>ローカル</>モードでトリガを発行します,
       <literal>D</> = トリガは無効です,
       <literal>R</> = <quote>replica</>モードでトリガを発行します,
       <literal>A</> = 常にトリガを発行します.
      </entry>
     </row>

     <row>
      <entry><structfield>tgisinternal</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
<!--
      <entry>True if trigger is internally generated (usually, to enforce
       the constraint identified by <structfield>tgconstraint</>)</entry>
-->
      <entry>
トリガが(通常<structfield>tgconstraint</>により識別される制約を強制するために)内部的に生成される場合は真。
      </entry>
     </row>

     <row>
      <entry><structfield>tgconstrrelid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-class"><structname>pg_class</structname></link>.oid</literal></entry>
<!--
      <entry>The table referenced by a referential integrity constraint</entry>
-->
      <entry>参照整合性制約で参照されるテーブル</entry>
     </row>

     <row>
      <entry><structfield>tgconstrindid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-class"><structname>pg_class</structname></link>.oid</literal></entry>
<!--
      <entry>The index supporting a unique, primary key, referential integrity,
       or exclusion constraint</entry>
-->
      <entry>一意性、プライマリキー、参照整合性制約や除外制約をサポートするインデックス</entry>
     </row>

     <row>
      <entry><structfield>tgconstraint</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-constraint"><structname>pg_constraint</structname></link>.oid</literal></entry>
<!--
      <entry>The <structname>pg_constraint</> entry associated with the trigger, if any</entry>
-->
      <entry>存在する場合は、トリガに関連する<structname>pg_constraint</>の項目</entry>
     </row>

     <row>
      <entry><structfield>tgdeferrable</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
<!--
      <entry>True if constraint trigger is deferrable</entry>
-->
      <entry>トリガが遅延可能である場合は真</entry>
     </row>

     <row>
      <entry><structfield>tginitdeferred</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
<!--
      <entry>True if constraint trigger is initially deferred</entry>
-->
      <entry>トリガの初期状態が遅延可能と宣言されていれば真</entry>
     </row>

     <row>
      <entry><structfield>tgnargs</structfield></entry>
      <entry><type>int2</type></entry>
      <entry></entry>
<!--
      <entry>Number of argument strings passed to trigger function</entry>
-->
      <entry>トリガ関数に渡される引数の数</entry>
     </row>

     <row>
      <entry><structfield>tgattr</structfield></entry>
      <entry><type>int2vector</type></entry>
      <entry><literal><link linkend="catalog-pg-attribute"><structname>pg_attribute</structname></link>.attnum</literal></entry>
<!--
      <entry>Column numbers, if trigger is column-specific; otherwise an
       empty array</entry>
-->
      <entry>
トリガが列固有であれば列番号。さもなくば空の配列
      </entry>
     </row>

     <row>
      <entry><structfield>tgargs</structfield></entry>
      <entry><type>bytea</type></entry>
      <entry></entry>
<!--
      <entry>Argument strings to pass to trigger, each NULL-terminated</entry>
-->
      <entry>トリガに渡される引数文字列で、それぞれヌル文字で終結</entry>
     </row>

     <row>
      <entry><structfield>tgqual</structfield></entry>
      <entry><type>pg_node_tree</type></entry>
      <entry></entry>
<!--
      <entry>Expression tree (in <function>nodeToString()</function>
       representation) for the trigger's <literal>WHEN</> condition, or null
       if none</entry>
-->
      <entry>
トリガの<literal>WHEN</>条件に関する(<function>nodeToString()</function>表現による)式ツリー。
存在しなければNULL
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
<!--
   Currently, column-specific triggering is supported only for
   <literal>UPDATE</> events, and so <structfield>tgattr</> is relevant
   only for that event type.  <structfield>tgtype</structfield> might
   contain bits for other event types as well, but those are presumed
   to be table-wide regardless of what is in <structfield>tgattr</>.
-->
現在、列固有のトリガ処理は<literal>UPDATE</>イベントのみでサポートされていますので、<structfield>tgattr</>はこの種類のイベントにのみ関連します。
<structfield>tgtype</>にはこの他のイベント用のビットが含まれているかもしれませんが、これらは<structfield>tgattr</>の値とは関係ないテーブル全体のものであると仮定されます。
  </para>

  <note>
   <para>
<!--
    When <structfield>tgconstraint</> is nonzero,
    <structfield>tgconstrrelid</>, <structfield>tgconstrindid</>,
    <structfield>tgdeferrable</>, and <structfield>tginitdeferred</> are
    largely redundant with the referenced <structname>pg_constraint</> entry.
    However, it is possible for a non-deferrable trigger to be associated
    with a deferrable constraint: foreign key constraints can have some
    deferrable and some non-deferrable triggers.
-->
<structfield>tgconstraint</>がゼロではないとき、<structfield>tgconstrrelid</>、<structfield>tgconstrindid</>、<structfield>tgdeferrable</>、<structfield>tginitdeferred</>は参照される<structname>pg_constraint</>項目と共に冗長となっています。
しかし遅延不可能なトリガを遅延可能な制約に関連付けさせることが可能です。
外部キー制約では一部を遅延可能、一部を遅延不可能なトリガを持つことができます。
   </para>
  </note>

  <note>
   <para>
<!--
    <literal>pg_class.reltriggers</literal>
    must be true if a relation has any triggers in this catalog.
-->
<literal>pg_class.reltriggers</literal>は、リレーションがこのカタログ内にトリガを持っている場合は真とならなければなりません。
   </para>
  </note>

 </sect1>


 <sect1 id="catalog-pg-ts-config">
  <title><structname>pg_ts_config</structname></title>

  <indexterm zone="catalog-pg-ts-config">
   <primary>pg_ts_config</primary>
  </indexterm>

<!--
  <para>
   The <structname>pg_ts_config</structname> catalog contains entries
   representing text search configurations.  A configuration specifies
   a particular text search parser and a list of dictionaries to use
   for each of the parser's output token types.  The parser is shown
   in the <structname>pg_ts_config</structname> entry, but the
   token-to-dictionary mapping is defined by subsidiary entries in <link
   linkend="catalog-pg-ts-config-map"><structname>pg_ts_config_map</structname></link>.
  </para>
-->
  <para>
<structname>pg_ts_config</structname>カタログは、テキスト検索の設定を表す項目を含みます。
設定は、特定のテキスト検索パーサと、それぞれのパーサの出力トークン型のために使用される辞書の一覧を指定します。
パーサは<structname>pg_ts_config</structname>項目内に示されていますが、トークンと辞書の対応付けは、<link linkend="catalog-pg-ts-config-map"><structname>pg_ts_config_map</structname></link>内の補助項目内に定義されています。
  </para>

<!--
  <para>
   <productname>PostgreSQL</productname>'s text search features are
   described at length in <xref linkend="textsearch">.
  </para>
-->
  <para>
   <productname>PostgreSQL</productname>のテキスト検索機能については<xref linkend="textsearch">で詳しく説明します。
  </para>

  <table>
<!--
   <title><structname>pg_ts_config</> Columns</title>
-->
   <title><structname>pg_ts_config</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>oid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry></entry>
<!--
      <entry>Row identifier (hidden attribute; must be explicitly selected)</entry>
-->
      <entry>行識別子（隠し属性です。明示的に選択しなければなりません）</entry>
     </row>

     <row>
      <entry><structfield>cfgname</structfield></entry>
      <entry><type>name</type></entry>
      <entry></entry>
<!--
      <entry>Text search configuration name</entry>
-->
      <entry>テキスト検索設定の名称</entry>
     </row>

     <row>
      <entry><structfield>cfgnamespace</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.oid</literal></entry>
<!--
      <entry>
       The OID of the namespace that contains this configuration
      </entry>
-->
      <entry>
       この設定を含む名前空間のOID
      </entry>
     </row>

     <row>
      <entry><structfield>cfgowner</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.oid</literal></entry>
<!--
      <entry>Owner of the configuration</entry>
-->
      <entry>この設定の所有者</entry>
     </row>

     <row>
      <entry><structfield>cfgparser</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-ts-parser"><structname>pg_ts_parser</structname></link>.oid</literal></entry>
<!--
      <entry>The OID of the text search parser for this configuration</entry>
-->
      <entry>この設定のためのテキスト検索パーサのOID</entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect1>


 <sect1 id="catalog-pg-ts-config-map">
  <title><structname>pg_ts_config_map</structname></title>

  <indexterm zone="catalog-pg-ts-config-map">
   <primary>pg_ts_config_map</primary>
  </indexterm>

<!--
  <para>
   The <structname>pg_ts_config_map</structname> catalog contains entries
   showing which text search dictionaries should be consulted, and in
   what order, for each output token type of each text search configuration's
   parser.
  </para>
-->
  <para>
<structname>pg_ts_config_map</structname>カタログは、どのテキスト検索辞書を参照するべきかを示す項目を含みます。
さらに、それぞれのテキスト検索設定のパーサの出力トークンをどの順番で参照すべきかを示す項目を含みます。
  </para>

<!--
  <para>
   <productname>PostgreSQL</productname>'s text search features are
   described at length in <xref linkend="textsearch">.
  </para>
-->
  <para>
   <productname>PostgreSQL</productname>のテキスト検索機能については<xref linkend="textsearch">で詳しく説明します。
  </para>

  <table>
<!--
   <title><structname>pg_ts_config_map</> Columns</title>
-->
   <title><structname>pg_ts_config_map</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>mapcfg</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-ts-config"><structname>pg_ts_config</structname></link>.oid</literal></entry>
<!--
      <entry>The OID of the <structname>pg_ts_config</> entry owning this map entry</entry>
-->
      <entry>このマップ項目を所有する<structname>pg_ts_config</>項目のOID</entry>
     </row>

     <row>
      <entry><structfield>maptokentype</structfield></entry>
      <entry><type>integer</type></entry>
      <entry></entry>
<!--
      <entry>A token type emitted by the configuration's parser</entry>
-->
      <entry>設定のパーサにより発行されるトークンの種類</entry>
     </row>

     <row>
      <entry><structfield>mapseqno</structfield></entry>
      <entry><type>integer</type></entry>
      <entry></entry>
<!--
      <entry>Order in which to consult this entry (lower
       <structfield>mapseqno</>s first)</entry>
-->
      <entry>この項目を参照する順番(小さい<structfield>mapseqno</>が先となります)</entry>
     </row>

     <row>
      <entry><structfield>mapdict</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-ts-dict"><structname>pg_ts_dict</structname></link>.oid</literal></entry>
<!--
      <entry>The OID of the text search dictionary to consult</entry>
-->
      <entry>参照するテキスト検索辞書のOID</entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect1>


 <sect1 id="catalog-pg-ts-dict">
  <title><structname>pg_ts_dict</structname></title>

  <indexterm zone="catalog-pg-ts-dict">
   <primary>pg_ts_dict</primary>
  </indexterm>

<!--
  <para>
   The <structname>pg_ts_dict</structname> catalog contains entries
   defining text search dictionaries.  A dictionary depends on a text
   search template, which specifies all the implementation functions
   needed; the dictionary itself provides values for the user-settable
   parameters supported by the template.  This division of labor allows
   dictionaries to be created by unprivileged users.  The parameters
   are specified by a text string <structfield>dictinitoption</>,
   whose format and meaning vary depending on the template.
  </para>
-->
  <para>
<structname>pg_ts_dict</structname>カタログは、テキスト検索辞書を定義する項目を含みます。
辞書は、必要な実装関数すべてを指定するテキスト検索のテンプレートに依存します。
辞書自身は、テンプレートによりサポートされている、ユーザが設定可能なパラメータ値を提供します。
ここでは、辞書が特権のないユーザにより作成されることを許可します。
パラメータは、<structfield>dictinitoption</>テキスト文字列で指定されます。
その書式と意味はテンプレートにより変化します。
  </para>

<!--
  <para>
   <productname>PostgreSQL</productname>'s text search features are
   described at length in <xref linkend="textsearch">.
  </para>
-->
  <para>
   <productname>PostgreSQL</productname>のテキスト検索機能については<xref linkend="textsearch">で詳しく説明します。
  </para>

  <table>
<!--
   <title><structname>pg_ts_dict</> Columns</title>
-->
   <title><structname>pg_ts_dict</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>oid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry></entry>
<!--
      <entry>Row identifier (hidden attribute; must be explicitly selected)</entry>
-->
      <entry>行識別子（隠し属性です。明示的に選択しなければなりません）</entry>
     </row>

     <row>
      <entry><structfield>dictname</structfield></entry>
      <entry><type>name</type></entry>
      <entry></entry>
<!--
      <entry>Text search dictionary name</entry>
-->
      <entry>テキスト検索辞書の名称</entry>
     </row>

     <row>
      <entry><structfield>dictnamespace</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.oid</literal></entry>
<!--
      <entry>
       The OID of the namespace that contains this dictionary
      </entry>
-->
      <entry>
       この辞書を含む名前空間のOID
      </entry>
     </row>

     <row>
      <entry><structfield>dictowner</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.oid</literal></entry>
<!--
      <entry>Owner of the dictionary</entry>
-->
      <entry>辞書の所有者</entry>
     </row>

     <row>
      <entry><structfield>dicttemplate</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-ts-template"><structname>pg_ts_template</structname></link>.oid</literal></entry>
<!--
      <entry>The OID of the text search template for this dictionary</entry>
-->
      <entry>辞書のためのテキスト検索テンプレートのOID</entry>
     </row>

     <row>
      <entry><structfield>dictinitoption</structfield></entry>
      <entry><type>text</type></entry>
      <entry></entry>
<!--
      <entry>Initialization option string for the template</entry>
-->
      <entry>テンプレートのための初期化オプション文字列</entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect1>


 <sect1 id="catalog-pg-ts-parser">
  <title><structname>pg_ts_parser</structname></title>

  <indexterm zone="catalog-pg-ts-parser">
   <primary>pg_ts_parser</primary>
  </indexterm>

<!--
  <para>
   The <structname>pg_ts_parser</structname> catalog contains entries
   defining text search parsers.  A parser is responsible for splitting
   input text into lexemes and assigning a token type to each lexeme.
   Since a parser must be implemented by C-language-level functions,
   creation of new parsers is restricted to database superusers.
  </para>
-->
  <para>
<structname>pg_ts_parser</structname>カタログはテキスト検索パーサを定義する項目を含みます。
パーサは、入力テキストを字句に分割することとトークン型を字句に割り当てることに責任を持ちます。
パーサはC言語レベルの関数で実装されていなくてはいけないため、新規のパーサの作成はデータベースのスーパーユーザに制限されています。
  </para>

<!--
  <para>
   <productname>PostgreSQL</productname>'s text search features are
   described at length in <xref linkend="textsearch">.
  </para>
-->
  <para>
   <productname>PostgreSQL</productname>のテキスト検索機能については<xref linkend="textsearch">で詳しく説明します。
  </para>

  <table>
<!--
   <title><structname>pg_ts_parser</> Columns</title>
-->
   <title><structname>pg_ts_parser</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>oid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry></entry>
<!--
      <entry>Row identifier (hidden attribute; must be explicitly selected)</entry>
-->
      <entry>行識別子（隠し属性です。明示的に選択しなければなりません）</entry>
     </row>

     <row>
      <entry><structfield>prsname</structfield></entry>
      <entry><type>name</type></entry>
      <entry></entry>
<!--
      <entry>Text search parser name</entry>
-->
      <entry>テキスト検索パーサの名称</entry>
     </row>

     <row>
      <entry><structfield>prsnamespace</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.oid</literal></entry>
<!--
      <entry>
       The OID of the namespace that contains this parser
      </entry>
-->
      <entry>
       このパーサを含む名前空間のOID
      </entry>
     </row>

     <row>
      <entry><structfield>prsstart</structfield></entry>
      <entry><type>regproc</type></entry>
      <entry><literal><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.oid</literal></entry>
<!--
      <entry>OID of the parser's startup function</entry>
-->
      <entry>パーサ起動関数のOID</entry>
     </row>

     <row>
      <entry><structfield>prstoken</structfield></entry>
      <entry><type>regproc</type></entry>
      <entry><literal><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.oid</literal></entry>
<!--
      <entry>OID of the parser's next-token function</entry>
-->
      <entry>パーサの次のトークン関数のOID</entry>
     </row>

     <row>
      <entry><structfield>prsend</structfield></entry>
      <entry><type>regproc</type></entry>
      <entry><literal><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.oid</literal></entry>
<!--
      <entry>OID of the parser's shutdown function</entry>
-->
      <entry>パーサの終了関数のOID</entry>
     </row>

     <row>
      <entry><structfield>prsheadline</structfield></entry>
      <entry><type>regproc</type></entry>
      <entry><literal><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.oid</literal></entry>
<!--
      <entry>OID of the parser's headline function</entry>
-->
      <entry>パーサの見出し関数のOID</entry>
     </row>

     <row>
      <entry><structfield>prslextype</structfield></entry>
      <entry><type>regproc</type></entry>
      <entry><literal><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.oid</literal></entry>
<!--
      <entry>OID of the parser's lextype function</entry>
-->
      <entry>パーサの字句型関数のOID</entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect1>


 <sect1 id="catalog-pg-ts-template">
  <title><structname>pg_ts_template</structname></title>

  <indexterm zone="catalog-pg-ts-template">
   <primary>pg_ts_template</primary>
  </indexterm>

<!--
  <para>
   The <structname>pg_ts_template</structname> catalog contains entries
   defining text search templates.  A template is the implementation
   skeleton for a class of text search dictionaries.
   Since a template must be implemented by C-language-level functions,
   creation of new templates is restricted to database superusers.
  </para>
-->
  <para>
<structname>pg_ts_template</structname>カタログはテキスト検索テンプレートを定義する項目を含みます。
テンプレートはテキスト検索辞書クラスの骨格を実装したものです。
テンプレートはC言語レベルの関数で実装されなくてはいけないため、新規のテンプレートの作成はデータベースのスーパーユーザに制限されています。
  </para>

<!--
  <para>
   <productname>PostgreSQL</productname>'s text search features are
   described at length in <xref linkend="textsearch">.
  </para>
-->
  <para>
   <productname>PostgreSQL</productname>のテキスト検索機能については<xref linkend="textsearch">で詳しく説明します。
  </para>

  <table>
<!--
   <title><structname>pg_ts_template</> Columns</title>
-->
   <title><structname>pg_ts_template</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>oid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry></entry>
<!--
      <entry>Row identifier (hidden attribute; must be explicitly selected)</entry>
-->
      <entry>行識別子（隠し属性です。明示的に選択しなければなりません）</entry>
     </row>

     <row>
      <entry><structfield>tmplname</structfield></entry>
      <entry><type>name</type></entry>
      <entry></entry>
<!--
      <entry>Text search template name</entry>
-->
      <entry>テキスト検索テンプレートの名称</entry>
     </row>

     <row>
      <entry><structfield>tmplnamespace</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.oid</literal></entry>
<!--
      <entry>
       The OID of the namespace that contains this template
      </entry>
-->
      <entry>
       このテンプレートを含む名前空間のOID
      </entry>
     </row>

     <row>
      <entry><structfield>tmplinit</structfield></entry>
      <entry><type>regproc</type></entry>
      <entry><literal><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.oid</literal></entry>
<!--
      <entry>OID of the template's initialization function</entry>
-->
      <entry>テンプレートの初期化関数のOID</entry>
     </row>

     <row>
      <entry><structfield>tmpllexize</structfield></entry>
      <entry><type>regproc</type></entry>
      <entry><literal><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.oid</literal></entry>
<!--
      <entry>OID of the template's lexize function</entry>
-->
      <entry>テンプレートの字句関数のOID</entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect1>


 <sect1 id="catalog-pg-type">
  <title><structname>pg_type</structname></title>

  <indexterm zone="catalog-pg-type">
   <primary>pg_type</primary>
  </indexterm>

  <para>
<!--
   The catalog <structname>pg_type</structname> stores information about data
   types.  Base types and enum types (scalar types) are created with
   <xref linkend="sql-createtype">, and
   domains with
   <xref linkend="sql-createdomain">.
   A composite type is automatically created for each table in the database, to
   represent the row structure of the table.  It is also possible to create
   composite types with <command>CREATE TYPE AS</command>.
-->
<structname>pg_type</structname>カタログはデータ型の情報を保存します。
スカラ型と列挙型（基本型）は<xref linkend="sql-createtype">で作成され、ドメインは<xref linkend="sql-createdomain">で作成されます。
複合型がテーブルの行構成を表すためデータベースの個々のテーブルに対して自動的に作成されます。
複合型を<command>CREATE TYPE AS</command>で作成することもできます。
  </para>

  <table>
<!--
   <title><structname>pg_type</> Columns</title>
-->
   <title><structname>pg_type</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>oid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry></entry>
<!--
      <entry>Row identifier (hidden attribute; must be explicitly selected)</entry>
-->
      <entry>行識別子（隠し属性です。明示的に選択しなければなりません）</entry>
     </row>

     <row>
      <entry><structfield>typname</structfield></entry>
      <entry><type>name</type></entry>
      <entry></entry>
<!--
      <entry>Data type name</entry>
-->
      <entry>データ型名</entry>
     </row>

     <row>
      <entry><structfield>typnamespace</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.oid</literal></entry>
      <entry>
<!--
       The OID of the namespace that contains this type
-->
       この型を含む名前空間のOID
      </entry>
     </row>

     <row>
      <entry><structfield>typowner</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.oid</literal></entry>
<!--
      <entry>Owner of the type</entry>
-->
      <entry>型の所有者</entry>
     </row>

     <row>
      <entry><structfield>typlen</structfield></entry>
      <entry><type>int2</type></entry>
      <entry></entry>
      <entry>
<!--
       For a fixed-size type, <structfield>typlen</structfield> is the number
       of bytes in the internal representation of the type.  But for a
       variable-length type, <structfield>typlen</structfield> is negative.
       -1 indicates a <quote>varlena</> type (one that has a length word),
       -2 indicates a null-terminated C string.
-->
固定長型では、<structfield>typlen</structfield>は型の内部表現内でのバイト数です。
しかし、可変長型では<structfield>typlen</structfield>は負となります。
-1は<quote>varlena</>型（最初の4バイトにデータ長を含むもの）を意味し、-2はヌル終端のC言語の文字列を示します。
      </entry>
     </row>

     <row>
      <entry><structfield>typbyval</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
      <entry>
<!--
       <structfield>typbyval</structfield> determines whether internal
       routines pass a value of this type by value or by reference.
       <structfield>typbyval</structfield> had better be false if
       <structfield>typlen</structfield> is not 1, 2, or 4 (or 8 on machines
       where Datum is 8 bytes).
       Variable-length types are always passed by reference. Note that
       <structfield>typbyval</structfield> can be false even if the
       length would allow pass-by-value.
-->
<structfield>typbyval</structfield>は内部関数がこの型の値を値渡しか、参照渡しかを決定します。
<structfield>typlen</structfield>が1、2、4バイト長（もしくはDatumが8バイトのマシン上では8バイト長）以外であれば、<structfield>typbyval</structfield>を偽にする必要があります。
可変長型は必ず参照渡しになります。
<structfield>typbyval</structfield>は長さが値渡し可能でも偽になり得ることに注意してください。
      </entry>
     </row>

     <row>
      <entry><structfield>typtype</structfield></entry>
      <entry><type>char</type></entry>
      <entry></entry>
<!--
      <entry>
       <structfield>typtype</structfield> is
       <literal>b</literal> for a base type,
       <literal>c</literal> for a composite type (e.g., a table's row type),
       <literal>d</literal> for a domain,
       <literal>e</literal> for an enum type,
       <literal>p</literal> for a pseudo-type, or
       <literal>r</literal> for a range type.
       See also <structfield>typrelid</structfield> and
       <structfield>typbasetype</structfield>.
      </entry>
-->
      <entry>
<structfield>typtype</structfield>では、<literal>b</literal>は基本型、<literal>c</literal>は複合型（例えばテーブルの行の型）、<literal>d</literal>は派生型（ドメインなど）、<literal>e</literal>は列挙型、<literal>p</literal>は疑似型、<literal>r</literal>は範囲型となります。
<structfield>typrelid</structfield>および<structfield>typbasetype</structfield>も参照してください。
      </entry>
     </row>

     <row>
      <entry><structfield>typcategory</structfield></entry>
      <entry><type>char</type></entry>
      <entry></entry>
<!--
      <entry>
       <structfield>typcategory</structfield> is an arbitrary classification
       of data types that is used by the parser to determine which implicit
       casts should be <quote>preferred</>.
       See <xref linkend="catalog-typcategory-table">.
      </entry>
-->
      <entry>
<structfield>typcategory</structfield>は、パーサがどの暗黙のキャストが<quote>選択</>されるべきか決定するのに使用されるデータ型の任意の分類です。
<xref linkend="catalog-typcategory-table">を参照してください。
      </entry>
     </row>

     <row>
      <entry><structfield>typispreferred</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
<!--
      <entry>
       True if the type is a preferred cast target within its
       <structfield>typcategory</structfield>
      </entry>
-->
      <entry>
型が<structfield>typcategory</structfield>内で選択されたキャスト対象である場合に真となります。
      </entry>
     </row>


     <row>
      <entry><structfield>typisdefined</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
      <entry>
<!--
       True if the type is defined, false if this is a placeholder
       entry for a not-yet-defined type.  When
       <structfield>typisdefined</structfield> is false, nothing
       except the type name, namespace, and OID can be relied on.
-->
型が定義されると真、ここが未定義型に対する予備の場所である時は偽。
<structfield>typisdefined</structfield>が偽の場合、型名と名前空間とOID以外は信頼すべきでありません。
      </entry>
     </row>

     <row>
      <entry><structfield>typdelim</structfield></entry>
      <entry><type>char</type></entry>
      <entry></entry>
      <entry>
<!--
       Character that separates two values of this type when parsing
       array input.  Note that the delimiter is associated with the array
       element data type, not the array data type.
-->
配列入力の構文解析をする際にこの型の2つの値を分離する文字。
区切り文字は配列データ型ではなく配列要素データ型に関連付けられることに注意してください。
      </entry>
     </row>

     <row>
      <entry><structfield>typrelid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-class"><structname>pg_class</structname></link>.oid</literal></entry>
      <entry>
<!--
       If this is a composite type (see
       <structfield>typtype</structfield>), then this column points to
       the <structname>pg_class</structname> entry that defines the
       corresponding table.  (For a free-standing composite type, the
       <structname>pg_class</structname> entry doesn't really represent
       a table, but it is needed anyway for the type's
       <structname>pg_attribute</structname> entries to link to.)
       Zero for non-composite types.
-->
もしこれが複合型（<structname>typtype</structname>を参照）であれば、この列は関連するテーブルを定義する<structfield>pg_class</structfield>項目を指します。
（独立の複合型の場合、<structname>pg_class</structname>項目は実際にはテーブルを表しませんが、いずれにしても型の<structname>pg_attribute</structname>項目をリンクするために必要です）
複合型でない場合はゼロです。
      </entry>
     </row>

     <row>
      <entry><structfield>typelem</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-type"><structname>pg_type</structname></link>.oid</literal></entry>
      <entry>
<!--
       If <structfield>typelem</structfield> is not 0 then it
       identifies another row in <structname>pg_type</structname>.
       The current type can then be subscripted like an array yielding
       values of type <structfield>typelem</structfield>.  A
       <quote>true</quote> array type is variable length
       (<structfield>typlen</structfield> = -1),
       but some fixed-length (<structfield>typlen</structfield> &gt; 0) types
       also have nonzero <structfield>typelem</structfield>, for example
       <type>name</type> and <type>point</type>.
       If a fixed-length type has a <structfield>typelem</structfield> then
       its internal representation must be some number of values of the
       <structfield>typelem</structfield> data type with no other data.
       Variable-length array types have a header defined by the array
       subroutines.
-->
<structfield>typelem</structfield>がゼロでない場合、これは<structname>pg_type</structname>の別の列を特定します。
現在の型は、<structfield>typelem</structfield>型の値を生成する配列のように、配列要素を持てるようになります。
<quote>本当の</quote>の配列型は可変長（<structfield>typlen</structfield> = -1）ですが、例えば<type>name</type>と<type>point</type>のように、いくつかの固定長（<structfield>typlen</structfield> &gt; 0）型は同時に非ゼロの<structfield>typelem</structfield>を持つことができます。
もし固定長型が<structfield>typelem</structfield>を持つ場合、その内部表現は他のデータを持たない<structfield>typelem</structfield>データ型の数個の値でなければなりません。
可変長配列型には配列サブルーチンで定義されたヘッダを持ちます。
      </entry>
     </row>

     <row>
      <entry><structfield>typarray</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-type"><structname>pg_type</structname></link>.oid</literal></entry>
<!--
      <entry>
       If <structfield>typarray</structfield> is not 0 then it
       identifies another row in <structname>pg_type</structname>, which
       is the <quote>true</quote> array type having this type as element
      </entry>
-->
      <entry>
<structfield>typarray</structfield>がゼロでない場合、<structfield>typarray</structfield>は<structname>pg_type</structname>内のもうひとつの行を特定します。
もうひとつの行は、この型を要素として持っている<quote>本当</quote>の配列型です。
      </entry>
     </row>

     <row>
      <entry><structfield>typinput</structfield></entry>
      <entry><type>regproc</type></entry>
      <entry><literal><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.oid</literal></entry>
<!--
      <entry>Input conversion function (text format)</entry>
-->
      <entry>入力変換関数（テキスト形式）</entry>
     </row>

     <row>
      <entry><structfield>typoutput</structfield></entry>
      <entry><type>regproc</type></entry>
      <entry><literal><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.oid</literal></entry>
<!--
      <entry>Output conversion function (text format)</entry>
-->
      <entry>出力変換関数（テキスト形式）</entry>
     </row>

     <row>
      <entry><structfield>typreceive</structfield></entry>
      <entry><type>regproc</type></entry>
      <entry><literal><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.oid</literal></entry>
<!--
      <entry>Input conversion function (binary format), or 0 if none</entry>
-->
      <entry>入力変換関数（バイナリ形式）、なければゼロ</entry>
     </row>

     <row>
      <entry><structfield>typsend</structfield></entry>
      <entry><type>regproc</type></entry>
      <entry><literal><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.oid</literal></entry>
<!--
      <entry>Output conversion function (binary format), or 0 if none</entry>
-->
      <entry>出力変換関数（バイナリ形式）、なければゼロ</entry>
     </row>

     <row>
      <entry><structfield>typmodin</structfield></entry>
      <entry><type>regproc</type></entry>
      <entry><literal><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.oid</literal></entry>
<!--
      <entry>Type modifier input function, or 0 if type does not support modifiers</entry>
-->
      <entry>型修飾子の入力関数。型が修飾子をサポートしていない場合はゼロ</entry>
     </row>

     <row>
      <entry><structfield>typmodout</structfield></entry>
      <entry><type>regproc</type></entry>
      <entry><literal><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.oid</literal></entry>
<!--
      <entry>Type modifier output function, or 0 to use the standard format</entry>
-->
      <entry>型修飾子の出力関数。標準書式を使用する場合はゼロ</entry>
     </row>

     <row>
      <entry><structfield>typanalyze</structfield></entry>
      <entry><type>regproc</type></entry>
      <entry><literal><link linkend="catalog-pg-proc"><structname>pg_proc</structname></link>.oid</literal></entry>
<!--
     <entry>Custom <command>ANALYZE</command> function, or 0 to use the standard function</entry>
-->
      <entry>独自の<command>ANALYZE</command>関数。標準関数を使用する場合はゼロ</entry>
     </row>

     <row>
      <entry><structfield>typalign</structfield></entry>
      <entry><type>char</type></entry>
      <entry></entry>
      <entry><para>
<!--
       <structfield>typalign</structfield> is the alignment required
       when storing a value of this type.  It applies to storage on
       disk as well as most representations of the value inside
       <productname>PostgreSQL</>.
       When multiple values are stored consecutively, such
       as in the representation of a complete row on disk, padding is
       inserted before a datum of this type so that it begins on the
       specified boundary.  The alignment reference is the beginning
       of the first datum in the sequence.
-->
<structfield>typalign</structfield>はこの型の値を格納する際に必要な整列です。
ディスクに書き込む時やほとんどの<productname>PostgreSQL</>内の値を表現するために使用されます。
ディスクに完全な列を格納する時など、いくつかの値が連続して格納される際、境界を特定するためにこの型のデータの前にパッドが挿入されます。
整列参照はシーケンスの一番最初にあります。
      </para>

      <para>
<!--
       Possible values are:
-->
       使用可能な値は以下の通りです。
       <itemizedlist>
        <listitem>
<!--
         <para><literal>c</> = <type>char</type> alignment, i.e., no alignment needed.</para>
-->
         <para><literal>c</> = <type>char</type>整列（すなわち、整列は必要ありません）。</para>
        </listitem>
        <listitem>
<!--
         <para><literal>s</> = <type>short</type> alignment (2 bytes on most machines).</para>
-->
         <para><literal>s</> = <type>short</type>整列（多くのマシンでは2バイトになります）。</para>
        </listitem>
        <listitem>
<!--
         <para><literal>i</> = <type>int</type> alignment (4 bytes on most machines).</para>
-->
         <para><literal>i</> = <type>int</type>整列（多くのマシンでは4バイトになります）。</para>
        </listitem>
        <listitem>
<!--
         <para><literal>d</> = <type>double</type> alignment (8 bytes on many machines, but by no means all).</para>
-->
         <para><literal>d</> = <type>double</type>整列（多くのマシンでは8バイトになりますが、必ずしもすべてがそうであるとは限りません）。</para>
        </listitem>
       </itemizedlist>
      </para><note>
       <para>
<!--
        For types used in system tables, it is critical that the size
        and alignment defined in <structname>pg_type</structname>
        agree with the way that the compiler will lay out the column in
        a structure representing a table row.
-->
システムテーブルで使用されている型については、<structname>pg_type</structname>システムカタログで定義されている大きさと整列は、コンパイラがテーブルの行を表現する構造体に対して位置決めを行うものと厳密に一致することを求められています。
       </para>
      </note></entry>
     </row>

     <row>
      <entry><structfield>typstorage</structfield></entry>
      <entry><type>char</type></entry>
      <entry></entry>
      <entry><para>
<!--
       <structfield>typstorage</structfield> tells for varlena
       types (those with <structfield>typlen</structfield> = -1) if
       the type is prepared for toasting and what the default strategy
       for attributes of this type should be.
       Possible values are
-->
<structfield>typstorage</structfield>は、varlena型（<structfield>typlen</structfield> = -1のもの）に対して型がTOASTに対応しているか、また、この型の属性のデフォルト戦略が何であるべきかを伝えます。
使用可能な値は以下の通りです。
       <itemizedlist>
        <listitem>
<!--
         <para><literal>p</>: Value must always be stored plain.</para>
-->
         <para><literal>p</>：値は必ずそのまま格納されなければいけません。</para>
        </listitem>
        <listitem>
         <para>
<!--
          <literal>e</>: Value can be stored in a <quote>secondary</quote>
          relation (if relation has one, see
          <literal>pg_class.reltoastrelid</literal>).
-->
          <literal>e</>：値は<quote>従属的</quote>リレーションに格納できます（リレーションに関しては<literal>pg_class.reltoastrelid</literal>を参照してください）。
         </para>
        </listitem>
        <listitem>
<!--
         <para><literal>m</>: Value can be stored compressed inline.</para>
-->
         <para><literal>m</>：値は圧縮されたインラインに格納することができます。</para>
        </listitem>
        <listitem>
<!--
         <para><literal>x</>: Value can be stored compressed inline or stored in <quote>secondary</quote> storage.</para>
-->
        <para><literal>x</>：値は圧縮されたインラインもしくは<quote>従属</quote>格納領域に格納することができます。</para>
        </listitem>
       </itemizedlist>
<!--
       Note that <literal>m</> columns can also be moved out to secondary
       storage, but only as a last resort (<literal>e</> and <literal>x</> columns are
       moved first).
-->
       <literal>m</>列も従属格納領域に移すことができますが、最後の切札としてでなければいけません（<literal>e</>と<literal>x</>列が先に移動されます）。
      </para></entry>
     </row>

     <row>
      <entry><structfield>typnotnull</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
      <entry><para>
<!--
       <structfield>typnotnull</structfield> represents a not-null
       constraint on a type.  Used for domains only.
-->
       <structfield>typnotnull</structfield>は型に対し非NULL制約を表します。
ドメインでのみ使用されます。
      </para></entry>
     </row>

     <row>
      <entry><structfield>typbasetype</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-type"><structname>pg_type</structname></link>.oid</literal></entry>
      <entry><para>
<!--
       If this is a domain (see <structfield>typtype</structfield>), then
       <structfield>typbasetype</structfield> identifies the type that this
       one is based on.  Zero if this type is not a domain.
-->
 もしこれがドメイン（<structfield>typtype</structfield>を参照）であれば、<structfield>typbasetype</structfield>はこれが基づいている型を指定します。
ドメインでない場合はゼロです。
      </para></entry>
     </row>

     <row>
      <entry><structfield>typtypmod</structfield></entry>
      <entry><type>int4</type></entry>
      <entry></entry>
      <entry><para>
<!--
       Domains use <structfield>typtypmod</structfield> to record the <literal>typmod</>
       to be applied to their base type (-1 if base type does not use a
       <literal>typmod</>).  -1 if this type is not a domain.
-->
ドメインは<structfield>typtypmod</structfield>を使用して、基本型に適用される<literal>typmod</>を記録します
（基本型が<literal>typmod</>を使用しない場合は-1）。
この型がドメインでない場合は-1です。
      </para></entry>
     </row>

     <row>
      <entry><structfield>typndims</structfield></entry>
      <entry><type>int4</type></entry>
      <entry></entry>
      <entry><para>
<!--
       <structfield>typndims</structfield> is the number of array dimensions
       for a domain over an array (that is, <structfield>typbasetype</> is
       an array type).
       Zero for types other than domains over array types.
-->
<structfield>typndims</structfield>は配列であるドメインの配列の次元数です
（つまり、<structfield>typbasetype</>は配列型です。）。
配列型のドメインでない場合はゼロです。
       </para></entry>
     </row>

     <row>
      <entry><structfield>typcollation</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-collation"><structname>pg_collation</structname></link>.oid</literal></entry>
      <entry><para>
<!--
       <structfield>typcollation</structfield> specifies the collation
       of the type.  If the type does not support collations, this will
       be zero.  A base type that supports collations will have
       <symbol>DEFAULT_COLLATION_OID</symbol> here.  A domain over a
       collatable type can have some other collation OID, if one was
       specified for the domain.
-->
<structfield>typcollation</structfield>は型の照合順序を指定します。
型が照合順序をサポートしない場合、ゼロになります。
照合順序をサポートする基本型はここで<symbol>DEFAULT_COLLATION_OID</symbol>を持ちます。
照合順序の設定可能な型全体のドメインは、そのドメインで照合順序が指定されていれば、他の照合順序OIDを持つことができます。
      </para></entry>
     </row>

     <row>
      <entry><structfield>typdefaultbin</structfield></entry>
      <entry><type>pg_node_tree</type></entry>
      <entry></entry>
      <entry><para>
<!--
       If <structfield>typdefaultbin</> is not null, it is the
       <function>nodeToString()</function>
       representation of a default expression for the type.  This is
       only used for domains.
-->
<structfield>typdefaultbin</>がNULLでない場合、これは型のデフォルト式の<function>nodeToString()</function>表現です。
ドメインでのみ使用されます。
      </para></entry>
     </row>

     <row>
      <entry><structfield>typdefault</structfield></entry>
      <entry><type>text</type></entry>
      <entry></entry>
      <entry><para>
<!--
       <structfield>typdefault</> is null if the type has no associated
       default value. If <structfield>typdefaultbin</> is not null,
       <structfield>typdefault</> must contain a human-readable version of the
       default expression represented by <structfield>typdefaultbin</>.  If
       <structfield>typdefaultbin</> is null and <structfield>typdefault</> is
       not, then <structfield>typdefault</> is the external representation of
       the type's default value, which can be fed to the type's input
       converter to produce a constant.
-->
関連するデフォルト値を持たない型であれば<structfield>typdefault</>はNULLです。
<structfield>typdefaultbin</>がNULLでない場合、<structfield>typdefault</>は、<structfield>typdefaultbin</>によって表される人間が見てわかる形式のデフォルト式を含む必要があります。
<structfield>typdefaultbin</>がNULLで<structfield>typdefault</>がNULLでない場合、<structfield>typdefault</>は型のデフォルト値の外部表現です。
これは、定数を生成するために型の入力変換処理に渡されることがあります。
      </para></entry>
     </row>

     <row>
      <entry><structfield>typacl</structfield></entry>
      <entry><type>aclitem[]</type></entry>
      <entry></entry>
      <entry>
<!--
       Access privileges; see
       <xref linkend="sql-grant"> and
       <xref linkend="sql-revoke">
       for details
-->
アクセス特権。詳細は<xref linkend="sql-grant">と<xref linkend="sql-revoke">を参照してください。
      </entry>
     </row>
     
    </tbody>
   </tgroup>
  </table>

<!--
  <para>
   <xref linkend="catalog-typcategory-table"> lists the system-defined values
   of <structfield>typcategory</>.  Any future additions to this list will
   also be upper-case ASCII letters.  All other ASCII characters are reserved
   for user-defined categories.
  </para>
-->
  <para>
<xref linkend="catalog-typcategory-table">はシステムで定義された<structfield>typcategory</>の値の一覧です。
今後この一覧に追加されるものは同様に大文字のASCII文字になります。
他のすべてのASCII文字はユーザ定義のカテゴリのために予約されています。
  </para>

  <table id="catalog-typcategory-table">
<!--
   <title><structfield>typcategory</> Codes</title>
-->
   <title><structfield>typcategory</>のコード</title>

   <tgroup cols="2">
    <thead>
     <row>

<!--
      <entry>Code</entry>
      <entry>Category</entry>
-->
      <entry>コード</entry>
      <entry>カテゴリ</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><literal>A</literal></entry>
<!--
      <entry>Array types</entry>
-->
      <entry>配列型</entry>
     </row>
     <row>
      <entry><literal>B</literal></entry>

<!--
      <entry>Boolean types</entry>
-->
      <entry>論理値型</entry>
     </row>
     <row>
      <entry><literal>C</literal></entry>
<!--
      <entry>Composite types</entry>
-->
      <entry>複合型</entry>
     </row>
     <row>
      <entry><literal>D</literal></entry>
<!--
      <entry>Date/time types</entry>
-->
      <entry>日付時刻型</entry>
     </row>
     <row>
      <entry><literal>E</literal></entry>
<!--
      <entry>Enum types</entry>
-->
      <entry>列挙型</entry>
     </row>
     <row>
      <entry><literal>G</literal></entry>
<!--
      <entry>Geometric types</entry>
-->
      <entry>幾何学型</entry>
     </row>
     <row>
      <entry><literal>I</literal></entry>
<!--
      <entry>Network address types</entry>
-->
      <entry>ネットワークアドレス型</entry>
     </row>
     <row>
      <entry><literal>N</literal></entry>
<!--
      <entry>Numeric types</entry>
-->
      <entry>数値型</entry>
     </row>
     <row>
      <entry><literal>P</literal></entry>
<!--
      <entry>Pseudo-types</entry>
-->
      <entry>仮想型</entry>
     </row>
     <row>
      <entry><literal>R</literal></entry>
<!--
      <entry>Range types</entry>
-->
      <entry>範囲型</entry>
     </row>
     <row>
      <entry><literal>S</literal></entry>
<!--
      <entry>String types</entry>
-->
      <entry>文字列型</entry>
     </row>
     <row>
      <entry><literal>T</literal></entry>
<!--
      <entry>Timespan types</entry>
-->
      <entry>時間間隔型</entry>
     </row>
     <row>
      <entry><literal>U</literal></entry>
<!--
      <entry>User-defined types</entry>
-->
      <entry>ユーザ定義型</entry>
     </row>
     <row>
      <entry><literal>V</literal></entry>
<!--
      <entry>Bit-string types</entry>
-->
      <entry>ビット列型</entry>
     </row>
     <row>
      <entry><literal>X</literal></entry>
<!--
      <entry><type>unknown</> type</entry>
-->
      <entry><type>unknown</>型</entry>
     </row>
    </tbody>
   </tgroup>
  </table>


 </sect1>


 <sect1 id="catalog-pg-user-mapping">
  <title><structname>pg_user_mapping</structname></title>

  <indexterm zone="catalog-pg-user-mapping">
   <primary>pg_user_mapping</primary>
  </indexterm>


<!--
  <para>
   The catalog <structname>pg_user_mapping</structname> stores
   the mappings from local user to remote.  Access to this catalog is
   restricted from normal users, use the view
   <link linkend="view-pg-user-mappings"><structname>pg_user_mappings</structname></link>
   instead.
  </para>
-->
  <para>
<structname>pg_user_mapping</structname>カタログはローカルのユーザから遠隔のユーザへのマッピングを保持します。
一般ユーザからのこのカタログへのアクセスは制限されています。
代わりに<link linkend="view-pg-user-mappings"><structname>pg_user_mappings</structname></link>を使用してください。
  </para>

  <table>
<!--
   <title><structname>pg_user_mapping</> Columns</title>
-->
   <title><structname>pg_user_mapping</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>oid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry></entry>
<!--
      <entry>Row identifier (hidden attribute; must be explicitly selected)</entry>
-->
      <entry>行識別子（隠し属性です。明示的に選択しなければなりません）</entry>
     </row>

     <row>
      <entry><structfield>umuser</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.oid</literal></entry>

<!--
      <entry>OID of the local role being mapped, 0 if the user mapping is public</entry>
-->
      <entry>マッピングされているローカルのロールのOID。
ユーザマッピングが公開されている場合は0になります。</entry>
     </row>

     <row>
      <entry><structfield>umserver</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-foreign-server"><structname>pg_foreign_server</structname></link>.oid</literal></entry>
<!--
      <entry>
       The OID of the foreign server that contains this mapping
      </entry>
-->
       <entry>
       マッピングを保持する外部サーバのOID
      </entry>
    </row>

     <row>
      <entry><structfield>umoptions</structfield></entry>
      <entry><type>text[]</type></entry>
      <entry></entry>
<!--
      <entry>
       User mapping specific options, as <quote>keyword=value</> strings
      </entry>
-->
      <entry>
       <quote>keyword=value</>文字列のようなユーザマッピングの特定のオプション
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect1>


 <sect1 id="views-overview">
<!--
  <title>System Views</title>
-->
  <title>システムビュー</title>

  <para>
<!--
   In addition to the system catalogs, <productname>PostgreSQL</productname>
   provides a number of built-in views.  Some system views provide convenient
   access to some commonly used queries on the system catalogs.  Other views
   provide access to internal server state.
-->
システムカタログに加え<productname>PostgreSQL</productname>は数多くの組み込みビューを提供しています。
システムビューはいくつかの一般的に使用されるシステムカタログに対する問い合わせに手近にアクセスできるようにします。
他のビューはサーバ状態内部へのアクセスを提供します。
  </para>

  <para>
<!--
   The information schema (<xref linkend="information-schema">) provides
   an alternative set of views which overlap the functionality of the system
   views.  Since the information schema is SQL-standard whereas the views
   described here are <productname>PostgreSQL</productname>-specific,
   it's usually better to use the information schema if it provides all
   the information you need.
-->
情報スキーマ（<xref linkend="information-schema">）はシステムビューと重複する、もう一方のビューの集合を提供しています。
ここで説明しているビューは<productname>PostgreSQL</productname>特有のものであるのに対し、情報スキーマはSQL標準であることから、もし情報スキーマが必要とする情報をすべて提供してくれるのであれば情報スキーマを使用する方が良いでしょう。
  </para>

  <para>
<!--
   <xref linkend="view-table"> lists the system views described here.
   More detailed documentation of each view follows below.
   There are some additional views that provide access to the results of
   the statistics collector; they are described in <xref
   linkend="monitoring-stats-views-table">.
-->
<xref linkend="view-table">は、ここで説明しているシステムビューの一覧です。
それぞれのビューのさらに詳細な説明は、これより後に述べられています。
統計情報の結果にアクセスするためのいくつかの追加のビューがあります。
それらは<xref linkend="monitoring-stats-views-table">で説明されています。
  </para>

  <para>
<!--
   Except where noted, all the views described here are read-only.
-->
注意書きがない限り、ここでのすべてのビューは読み取り専用です。
  </para>

  <table id="view-table">
<!--
   <title>System Views</title>
-->
   <title>システムビュー</title>

   <tgroup cols="2">
    <thead>
     <row>
<!--
      <entry>View Name</entry>
      <entry>Purpose</entry>
-->
      <entry>ビュー名</entry>
      <entry>目的</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><link linkend="view-pg-available-extensions"><structname>pg_available_extensions</structname></link></entry>
<!--
      <entry>available extensions</entry>
-->
      <entry>利用可能な拡張</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-available-extension-versions"><structname>pg_available_extension_versions</structname></link></entry>
<!--
      <entry>available versions of extensions</entry>
-->
      <entry>利用可能な拡張のバージョン</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-cursors"><structname>pg_cursors</structname></link></entry>
<!--
      <entry>open cursors</entry>
-->
      <entry>開いているカーソル</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-group"><structname>pg_group</structname></link></entry>
<!--
      <entry>groups of database users</entry>
-->
      <entry>データベースのユーザのグループ</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-indexes"><structname>pg_indexes</structname></link></entry>
<!--
      <entry>indexes</entry>
-->
      <entry>インデックス</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-locks"><structname>pg_locks</structname></link></entry>
<!--
      <entry>currently held locks</entry>
-->
      <entry>現在獲得されているロック</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-matviews"><structname>pg_matviews</structname></link></entry>
<!--
      <entry>materialized views</entry>
-->
      <entry>マテリアライズドビュー</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-prepared-statements"><structname>pg_prepared_statements</structname></link></entry>
<!--
      <entry>prepared statements</entry>
-->
      <entry>準備済みの文</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-prepared-xacts"><structname>pg_prepared_xacts</structname></link></entry>
<!--
      <entry>prepared transactions</entry>
-->
      <entry>準備済みのトランザクション</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-roles"><structname>pg_roles</structname></link></entry>
<!--
      <entry>database roles</entry>
-->
      <entry>データベースロール</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-rules"><structname>pg_rules</structname></link></entry>
<!--
      <entry>rules</entry>
-->
      <entry>ルール</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-seclabels"><structname>pg_seclabels</structname></link></entry>
<!--
      <entry>security labels</entry>
-->
      <entry>セキュリティラベル</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-settings"><structname>pg_settings</structname></link></entry>
<!--
      <entry>parameter settings</entry>
-->
      <entry>パラメータ設定</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-shadow"><structname>pg_shadow</structname></link></entry>
<!--
      <entry>database users</entry>
-->
      <entry>データベースのユーザ</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-stats"><structname>pg_stats</structname></link></entry>
<!--
      <entry>planner statistics</entry>
-->
      <entry>プランナの統計</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-tables"><structname>pg_tables</structname></link></entry>
<!--
      <entry>tables</entry>
-->
      <entry>テーブル</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-timezone-abbrevs"><structname>pg_timezone_abbrevs</structname></link></entry>
<!--
      <entry>time zone abbreviations</entry>
-->
      <entry>時間帯省略形</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-timezone-names"><structname>pg_timezone_names</structname></link></entry>
<!--
      <entry>time zone names</entry>
-->
      <entry>時間帯名</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-user"><structname>pg_user</structname></link></entry>
<!--
      <entry>database users</entry>
-->
      <entry>データベースのユーザ</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-user-mappings"><structname>pg_user_mappings</structname></link></entry>
<!--
      <entry>user mappings</entry>
-->
      <entry>ユーザマッピング</entry>
     </row>

     <row>
      <entry><link linkend="view-pg-views"><structname>pg_views</structname></link></entry>
<!--
      <entry>views</entry>
-->
      <entry>ビュー</entry>
     </row>

    </tbody>
   </tgroup>
  </table>
 </sect1>

 <sect1 id="view-pg-available-extensions">
  <title><structname>pg_available_extensions</structname></title>

  <indexterm zone="view-pg-available-extensions">
   <primary>pg_available_extensions</primary>
  </indexterm>

  <para>
<!--
   The <structname>pg_available_extensions</structname> view lists the
   extensions that are available for installation.
   See also the
   <link linkend="catalog-pg-extension"><structname>pg_extension</structname></link>
   catalog, which shows the extensions currently installed.
-->
<structname>pg_available_extensions</structname>ビューはインストレーションで利用可能な拡張を列挙します。
現在インストールされている拡張を表す<link linkend="catalog-pg-extension"><structname>pg_extension</structname></link>カタログも参照してください。
  </para>

  <table>
<!--
   <title><structname>pg_available_extensions</> Columns</title>
-->
   <title><structname>pg_available_extensions</>の列</title>

   <tgroup cols="3">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>name</structfield></entry>
      <entry><type>name</type></entry>
<!--
      <entry>Extension name</entry>
-->
      <entry>拡張名</entry>
     </row>

     <row>
      <entry><structfield>default_version</structfield></entry>
      <entry><type>text</type></entry>
<!--
      <entry>Name of default version, or <literal>NULL</literal> if none is
       specified</entry>
-->
      <entry>デフォルトのバージョン名称。何も指定がなければ<literal>NULL</literal></entry>
     </row>

     <row>
      <entry><structfield>installed_version</structfield></entry>
      <entry><type>text</type></entry>
<!--
      <entry>Currently installed version of the extension,
       or <literal>NULL</literal> if not installed</entry>
-->
      <entry>
現在インストールされている拡張のバージョン。インストールされていない場合は<literal>NULL</literal>
      </entry>
     </row>

     <row>
      <entry><structfield>comment</structfield></entry>
      <entry><type>text</type></entry>
<!--
      <entry>Comment string from the extension's control file</entry>
-->
      <entry>拡張の制御ファイルからのコメント文字列</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
<!--
   The <structname>pg_available_extensions</structname> view is read only.
-->
<structname>pg_available_extensions</structname>ビューは読み取り専用です。
  </para>
 </sect1>

 <sect1 id="view-pg-available-extension-versions">
  <title><structname>pg_available_extension_versions</structname></title>

  <indexterm zone="view-pg-available-extension-versions">
   <primary>pg_available_extension_versions</primary>
  </indexterm>

  <para>
<!--
   The <structname>pg_available_extension_versions</structname> view lists the
   specific extension versions that are available for installation.
   See also the <link
   linkend="catalog-pg-extension"><structname>pg_extension</structname></link>
   catalog, which shows the extensions currently installed.
-->
<structname>pg_available_extension_versions</structname>ビューはインストレーションで利用可能な特定の拡張のバージョンを列挙します。
現在インストールされている拡張を表す<link linkend="catalog-pg-extension"><structname>pg_extension</structname></link>カタログも参照してください。
  </para>

  <table>
<!--
   <title><structname>pg_available_extension_versions</> Columns</title>
-->
   <title><structname>pg_available_extension_versions</>の列</title>

   <tgroup cols="3">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>name</structfield></entry>
      <entry><type>name</type></entry>
<!--
      <entry>Extension name</entry>
-->
      <entry>拡張の名前</entry>
     </row>

     <row>
      <entry><structfield>version</structfield></entry>
      <entry><type>text</type></entry>
<!--
      <entry>Version name</entry>
-->
      <entry>バージョン名称</entry>
     </row>

     <row>
      <entry><structfield>installed</structfield></entry>
      <entry><type>bool</type></entry>
<!--
      <entry>True if this version of this extension is currently
       installed</entry>
-->
      <entry>
現在このバージョンの拡張がインストールされている場合に真
      </entry>
     </row>

     <row>
      <entry><structfield>superuser</structfield></entry>
      <entry><type>bool</type></entry>
<!--
      <entry>True if only superusers are allowed to install this extension</entry>
-->
      <entry>スーパーユーザのみがこの拡張をインストールできる場合に真</entry>
     </row>

     <row>
      <entry><structfield>relocatable</structfield></entry>
      <entry><type>bool</type></entry>
<!--
      <entry>True if extension can be relocated to another schema</entry>
-->
      <entry>拡張が他のスキーマに再配置可能である場合に真</entry>
     </row>

     <row>
      <entry><structfield>schema</structfield></entry>
      <entry><type>name</type></entry>
<!--
      <entry>Name of the schema that the extension must be installed into,
       or <literal>NULL</literal> if partially or fully relocatable</entry>
-->
      <entry>
拡張がインストールされなければならないスキーマの名前。
一部の再配置またはすべての再配置を行うことができる場合は<literal>NULL</literal>
      </entry>
     </row>

     <row>
      <entry><structfield>requires</structfield></entry>
      <entry><type>name[]</type></entry>
<!--
      <entry>Names of prerequisite extensions,
       or <literal>NULL</literal> if none</entry>
-->
      <entry>
前もって必要な拡張の名前。なければ<literal>NULL</literal>
      </entry>
     </row>

     <row>
      <entry><structfield>comment</structfield></entry>
      <entry><type>text</type></entry>
<!--
      <entry>Comment string from the extension's control file</entry>
-->
      <entry>拡張の制御ファイルからのコメント文字列</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
<!--
   The <structname>pg_available_extension_versions</structname> view is read
   only.
-->
<structname>pg_available_extension_versions</structname>ビューは読み取り専用です。
  </para>
 </sect1>

 <sect1 id="view-pg-cursors">
  <title><structname>pg_cursors</structname></title>

  <indexterm zone="view-pg-cursors">
   <primary>pg_cursors</primary>
  </indexterm>

  <para>
<!--
   The <structname>pg_cursors</structname> view lists the cursors that
   are currently available. Cursors can be defined in several ways:
-->
<structname>pg_cursors</structname>ビューは現在利用可能なカーソルを列挙します。
以下のようにカーソルは複数の方法で定義可能です。
   <itemizedlist>
    <listitem>
     <para>
<!--
      via the <xref linkend="sql-declare">
      statement in SQL
-->
SQLから<xref linkend="sql-declare">文経由。
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      via the Bind message in the frontend/backend protocol, as
      described in <xref linkend="protocol-flow-ext-query">
-->
<xref linkend="protocol-flow-ext-query">で説明する、フロントエンド/バックエンドプロトコルからBindメッセージ経由。
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      via the Server Programming Interface (SPI), as described in
      <xref linkend="spi-interface">
-->
<xref linkend="spi-interface">で説明する、サーバプログラミングインタフェース（SPI）経由。
     </para>
    </listitem>
   </itemizedlist>

<!--
   The <structname>pg_cursors</structname> view displays cursors
   created by any of these means. Cursors only exist for the duration
   of the transaction that defines them, unless they have been
   declared <literal>WITH HOLD</literal>. Therefore non-holdable
   cursors are only present in the view until the end of their
   creating transaction.
-->
<structname>pg_cursors</structname>ビューは、上のいずれかの方法で作成されたカーソルを表示します。
カーソルは、<literal>WITH HOLD</literal>と宣言されていない限り、それを定義したトランザクション期間しか存在しません。
したがって、保持不可能なカーソルは、作成元トランザクションが終わるまでの間のみ、このビューに現れます。

   <note>
    <para>
<!--
     Cursors are used internally to implement some of the components
     of <productname>PostgreSQL</>, such as procedural languages.
     Therefore, the <structname>pg_cursors</> view might include cursors
     that have not been explicitly created by the user.
-->
手続き言語など、一部の<productname>PostgreSQL</>の要素を実装するために内部的にカーソルが使用されています。
したがって、<structname>pg_cursors</>にはユーザが明示的に作成していないカーソルも含まれる可能性があります。
    </para>
   </note>
  </para>

  <table>
<!--
   <title><structname>pg_cursors</> Columns</title>
-->
   <title><structname>pg_cursors</>の列</title>

   <tgroup cols="3">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>name</structfield></entry>
      <entry><type>text</type></entry>
<!--
      <entry>The name of the cursor</entry>
-->
      <entry>カーソルの名前</entry>
     </row>

     <row>
      <entry><structfield>statement</structfield></entry>
      <entry><type>text</type></entry>
<!--
      <entry>The verbatim query string submitted to declare this cursor</entry>
-->
      <entry>カーソル宣言の際に投稿された逐語的問い合わせ文字列</entry>
     </row>

     <row>
      <entry><structfield>is_holdable</structfield></entry>
      <entry><type>boolean</type></entry>
      <entry>
<!--
       <literal>true</literal> if the cursor is holdable (that is, it
       can be accessed after the transaction that declared the cursor
       has committed); <literal>false</literal> otherwise
-->
保持可能カーソル（つまりカーソルを宣言したトランザクションがコミットされた後でもアクセス可能なカーソル）であれば<literal>true</literal>です。
さもなくば<literal>false</literal>です。
       </entry>
     </row>

     <row>
      <entry><structfield>is_binary</structfield></entry>
      <entry><type>boolean</type></entry>
      <entry>
<!--
       <literal>true</literal> if the cursor was declared
       <literal>BINARY</literal>; <literal>false</literal>
       otherwise
-->
カーソルが<literal>BINARY</literal>で宣言されていたら<literal>true</literal>、さもなくば<literal>false</literal>。
       </entry>
     </row>

     <row>
      <entry><structfield>is_scrollable</structfield></entry>
      <entry><type>boolean</type></entry>
      <entry>
<!--
       <literal>true</> if the cursor is scrollable (that is, it
       allows rows to be retrieved in a nonsequential manner);
       <literal>false</literal> otherwise
-->
カーソルがスクロール可能（順序通り以外の方法に行を取り出すことが可能）であれば<literal>true</>、さもなくば<literal>false</literal>。
       </entry>
     </row>

     <row>
      <entry><structfield>creation_time</structfield></entry>
      <entry><type>timestamptz</type></entry>
<!--
      <entry>The time at which the cursor was declared</entry>
-->
      <entry>カーソルが宣言された時間。</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
<!--
   The <structname>pg_cursors</structname> view is read only.
-->
<structname>pg_cursors</structname>ビューは読み取り専用です。
  </para>

 </sect1>

 <sect1 id="view-pg-group">
  <title><structname>pg_group</structname></title>

  <indexterm zone="view-pg-group">
   <primary>pg_group</primary>
  </indexterm>

  <para>
<!--
   The view <structname>pg_group</structname> exists for backwards
   compatibility: it emulates a catalog that existed in
   <productname>PostgreSQL</productname> before version 8.1.
   It shows the names and members of all roles that are marked as not
   <structfield>rolcanlogin</>, which is an approximation to the set
   of roles that are being used as groups.
-->
<structname>pg_group</structname>ビューは下位互換のために存在しています。
バージョン8.1以前の<productname>PostgreSQL</productname>のカタログを模擬しています。
このビューは、<structfield>rolcanlogin</>としてマークされていない、すべてのロールの名前とメンバを保持しています。
これはグループとして使用されているロールの集合と似ています。
  </para>

  <table>
<!--
   <title><structname>pg_group</> Columns</title>
-->
   <title><structname>pg_group</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>groname</structfield></entry>
      <entry><type>name</type></entry>
      <entry><literal><link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.rolname</literal></entry>
<!--
      <entry>Name of the group</entry>
-->
      <entry>グループの名前</entry>
     </row>

     <row>
      <entry><structfield>grosysid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.oid</literal></entry>
<!--
      <entry>ID of this group</entry>
-->
      <entry>グループのID</entry>
     </row>

     <row>
      <entry><structfield>grolist</structfield></entry>
      <entry><type>oid[]</type></entry>
      <entry><literal><link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.oid</literal></entry>
<!--
      <entry>An array containing the IDs of the roles in this group</entry>
-->
      <entry>このグループのロールIDを含む配列</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

 </sect1>

 <sect1 id="view-pg-indexes">
  <title><structname>pg_indexes</structname></title>

  <indexterm zone="view-pg-indexes">
   <primary>pg_indexes</primary>
  </indexterm>

  <para>
<!--
   The view <structname>pg_indexes</structname> provides access to
   useful information about each index in the database.
-->
<structname>pg_indexes</structname>ビューはデータベース内のそれぞれのインデックスについて有用な情報を提供します。
  </para>

  <table>
<!--
   <title><structname>pg_indexes</> Columns</title>
-->
   <title><structname>pg_indexes</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><structfield>schemaname</structfield></entry>
      <entry><type>name</type></entry>
      <entry><literal><link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.nspname</literal></entry>
<!--
      <entry>Name of schema containing table and index</entry>
-->
      <entry>テーブルとインデックスを含むスキーマの名前</entry>
     </row>
     <row>
      <entry><structfield>tablename</structfield></entry>
      <entry><type>name</type></entry>
      <entry><literal><link linkend="catalog-pg-class"><structname>pg_class</structname></link>.relname</literal></entry>
<!--
      <entry>Name of table the index is for</entry>
-->
      <entry>インデックスのついているテーブルの名前</entry>
     </row>
     <row>
      <entry><structfield>indexname</structfield></entry>
      <entry><type>name</type></entry>
      <entry><literal><link linkend="catalog-pg-class"><structname>pg_class</structname></link>.relname</literal></entry>
<!--
      <entry>Name of index</entry>
-->
      <entry>インデックスの名前</entry>
     </row>
     <row>
      <entry><structfield>tablespace</structfield></entry>
      <entry><type>name</type></entry>
      <entry><literal><link linkend="catalog-pg-tablespace"><structname>pg_tablespace</structname></link>.spcname</literal></entry>
<!--
      <entry>Name of tablespace containing index (null if default for database)</entry>
-->
      <entry>インデックスを含むテーブル空間の名前（データベースのデフォルトはNULL）</entry>
     </row>
     <row>
      <entry><structfield>indexdef</structfield></entry>
      <entry><type>text</type></entry>
      <entry></entry>
<!--
      <entry>Index definition (a reconstructed <command>CREATE INDEX</command>
      command)</entry>
-->
      <entry>インデックス定義（再作成用<command>CREATE INDEX</command>コマンド）</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

 </sect1>

 <sect1 id="view-pg-locks">
  <title><structname>pg_locks</structname></title>

  <indexterm zone="view-pg-locks">
   <primary>pg_locks</primary>
  </indexterm>

  <para>
<!--
   The view <structname>pg_locks</structname> provides access to
   information about the locks held by open transactions within the
   database server.  See <xref linkend="mvcc"> for more discussion
   of locking.
-->
<structname>pg_locks</structname>ビューはデータベースサーバ内で開いているトランザクションにより獲得されたロックに関する情報へのアクセスを提供します。
ロックに関するより詳細な説明は<xref linkend="mvcc">を参照してください。
  </para>

  <para>
<!--
   <structname>pg_locks</structname> contains one row per active lockable
   object, requested lock mode, and relevant transaction.  Thus, the same
   lockable object might
   appear many times, if multiple transactions are holding or waiting
   for locks on it.  However, an object that currently has no locks on it
   will not appear at all.
-->
<structname>pg_locks</structname>にはロック対象となる進行中のオブジェクト、要求されたロックモード、および関連するトランザクション毎に1つの行を持ちます。
ですから、もし複数のトランザクションがそのトランザクション上でロックを保持していたりロックを待機している場合には、同じロック対象オブジェクトが数多く出現することがあります。
しかし現在ロックされていないオブジェクトはまったく現れません。
  </para>

  <para>
<!--
   There are several distinct types of lockable objects:
   whole relations (e.g., tables), individual pages of relations,
   individual tuples of relations,
   transaction IDs (both virtual and permanent IDs),
   and general database objects (identified by class OID and object OID,
   in the same way as in <structname>pg_description</structname> or
   <structname>pg_depend</structname>).  Also, the right to extend a
   relation is represented as a separate lockable object.
   Also, <quote>advisory</> locks can be taken on numbers that have
   user-defined meanings.
-->
ロック対象オブジェクトには異なる型がいくつか存在します。
リレーション全体（例：テーブル）、リレーションの個別のページ、リレーションの個別のタプル、トランザクションID（仮想と永続の両方のID）、一般的なデータベースオブジェクト（これは<structname>pg_description</structname>や<structname>pg_depend</structname>と同様にクラスOIDとオブジェクトOIDで識別されます）。
さらに、リレーションを拡張する権利は、別のロック対象オブジェクトとして表現されます。
また<quote>勧告的</>ロックはユーザ定義の意味を持つ複数から形成されるかもしれません。
  </para>

  <table>
<!--
   <title><structname>pg_locks</> Columns</title>
-->
   <title><structname>pg_locks</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><structfield>locktype</structfield></entry>
      <entry><type>text</type></entry>
      <entry></entry>
      <entry>
<!--
       Type of the lockable object:
       <literal>relation</>,
       <literal>extend</>,
       <literal>page</>,
       <literal>tuple</>,
       <literal>transactionid</>,
       <literal>virtualxid</>,
       <literal>object</>,
       <literal>userlock</>, or
       <literal>advisory</>
-->
       ロック対象オブジェクトの種類。
       <literal>relation</>、
       <literal>extend</>、
       <literal>page</>、
       <literal>tuple</>、
       <literal>transactionid</>、
       <literal>virtualxid</>、
       <literal>object</>、
       <literal>userlock</>、
       <literal>advisory</>
      </entry>
     </row>
     <row>
      <entry><structfield>database</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-database"><structname>pg_database</structname></link>.oid</literal></entry>
      <entry>
<!--
       OID of the database in which the lock target exists, or
       zero if the target is a shared object, or
       null if the target is a transaction ID
-->
ロック対象が存在しているデータベースのOID。対象が共有オブジェクトの場合はゼロ。対象がトランザクションIDである場合はNULL。
      </entry>
     </row>
     <row>
      <entry><structfield>relation</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-class"><structname>pg_class</structname></link>.oid</literal></entry>
      <entry>
<!--
       OID of the relation targeted by the lock, or null if the target is not
       a relation or part of a relation
-->
ロックの対象となるリレーションのOID。対象がリレーションではない場合かリレーションの一部である場合はNULL。
      </entry>
     </row>
     <row>
      <entry><structfield>page</structfield></entry>
      <entry><type>integer</type></entry>
      <entry></entry>
      <entry>
<!--
       Page number targeted by the lock within the relation,
       or null if the target is not a relation page or tuple
-->
ロックの対象となるリレーション内のページ番号。対象がタプルもしくはリレーションページではない場合はNULL。
      </entry>
     </row>
     <row>
      <entry><structfield>tuple</structfield></entry>
      <entry><type>smallint</type></entry>
      <entry></entry>
      <entry>
<!--
       Tuple number targeted by the lock within the page,
       or null if the target is not a tuple
-->
ページ内のロックの対象となっているタプル番号。対象がタプルではない場合はNULL。
      </entry>
     </row>
     <row>
      <entry><structfield>virtualxid</structfield></entry>
      <entry><type>text</type></entry>
      <entry></entry>
<!--
      <entry>
       Virtual ID of the transaction targeted by the lock,
       or null if the target is not a virtual transaction ID
      </entry>
-->
      <entry>
ロックの対象となるトランザクションの仮想ID。対象が仮想トランザクションIDではない場合はNULL。
      </entry>
     </row>
     <row>
      <entry><structfield>transactionid</structfield></entry>
      <entry><type>xid</type></entry>
      <entry></entry>
      <entry>
<!--
       ID of the transaction targeted by the lock,
       or null if the target is not a transaction ID
-->
ロックの対象となるトランザクションのID。対象がトランザクションIDではない場合はNULL。
      </entry>
     </row>
     <row>
      <entry><structfield>classid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-class"><structname>pg_class</structname></link>.oid</literal></entry>
      <entry>
<!--
       OID of the system catalog containing the object, or null if the
       object is not a general database object
       
       OID of the system catalog containing the lock target, or null if the
       target is not a general database object
-->
ロックの対象を含むシステムカタログのOID。対象が一般的なデータベースオブジェクトではない場合はNULL。
      </entry>
     </row>
     <row>
      <entry><structfield>objid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry>any OID column</entry>
      <entry>
<!--
       OID of the lock target within its system catalog, or null if the
       target is not a general database object
-->
システムカタログ内のロックの対象のOID。
対象が一般的なデータベースオブジェクトでない場合はNULL。
      </entry>
     </row>
     <row>
      <entry><structfield>objsubid</structfield></entry>
      <entry><type>smallint</type></entry>
      <entry></entry>
      <entry>
<!--
       Column number targeted by the lock (the
       <structfield>classid</> and <structfield>objid</> refer to the
       table itself),
       or zero if the target is some other general database object,
       or null if the target is not a general database object
-->
ロック対象の列番号（<structfield>classid</>と<structfield>objid</>はテーブル自身を参照します）、その他の一般的なデータベースオブジェクトではゼロ、一般的ではないデータベースオブジェクトではNULLです。
      </entry>
     </row>
     <row>
      <entry><structfield>virtualtransaction</structfield></entry>
      <entry><type>text</type></entry>
      <entry></entry>
      <entry>
<!--
       Virtual ID of the transaction that is holding or awaiting this lock
-->
      ロックを保持、もしくは待っている仮想トランザクションID。
      </entry>
     </row>
     <row>
      <entry><structfield>pid</structfield></entry>
      <entry><type>integer</type></entry>
      <entry></entry>
      <entry>
<!--
       Process ID of the server process holding or awaiting this
       lock, or null if the lock is held by a prepared transaction
-->
ロックを保持、もしくは待っているサーバプロセスのプロセスID。
ただしプリペアードトランザクションによりロックが保持されている場合はNULL。
      </entry>
     </row>
     <row>
      <entry><structfield>mode</structfield></entry>
      <entry><type>text</type></entry>
      <entry></entry>
<!--
      <entry>Name of the lock mode held or desired by this process (see <xref
      linkend="locking-tables"> and <xref linkend="xact-serializable">)</entry>
-->
      <entry>
このプロセスで保持または要求するロックモードの名称。
（<xref linkend="locking-tables"> and <xref linkend="xact-serializable">参照）
      </entry>
     </row>
     <row>
      <entry><structfield>granted</structfield></entry>
      <entry><type>boolean</type></entry>
      <entry></entry>
<!--
      <entry>True if lock is held, false if lock is awaited</entry>
-->
      <entry>ロックが保持されている場合は真、ロックが待ち状態の場合は偽</entry>
     </row>
     
     <row>
      <entry><structfield>fastpath</structfield></entry>
      <entry><type>boolean</type></entry>
      <entry></entry>
<!--      
      <entry>True if lock was taken via fast path, false if taken via main
       lock table</entry>
-->
      <entry>
      ファストパス経由でロックが獲得されている場合は真、メインロックテーブル経由で獲得されている場合は偽。
      </entry>
     </row>
     
    </tbody>
   </tgroup>
  </table>

  <para>
<!--
   <structfield>granted</structfield> is true in a row representing a lock
   held by the indicated transaction.  False indicates that this transaction is
   currently waiting to acquire this lock, which implies that some other
   transaction is holding a conflicting lock mode on the same lockable object.
   The waiting transaction will sleep until the other lock is released (or a
   deadlock situation is detected). A single transaction can be waiting to
   acquire at most one lock at a time.
-->
指定されたトランザクションにより所有されているロックを表す行内では<structfield>granted</structfield>は真です。
偽の場合はこのロックを獲得するため現在トランザクションが待機中であることを示しています。
つまり、同じロック対象のオブジェクトに対して何らかの他のトランザクションが競合するロックを獲得していることを意味します。
待機中のトランザクションはその別のトランザクションがロックを解放するまで活動を控えます
（もしくはデッドロック状態が検出されることになります）。
単一トランザクションでは一度に多くても1つのロックを獲得するために待機します。
  </para>

  <para>
<!--
   Every transaction holds an exclusive lock on its virtual transaction ID for
   its entire duration.  If a permanent ID is assigned to the transaction
   (which normally happens only if the transaction changes the state of the
   database), it also holds an exclusive lock on its permanent transaction ID
   until it ends.  When one transaction finds it necessary to wait specifically
   for another transaction, it does so by attempting to acquire share lock on
   the other transaction ID (either virtual or permanent ID depending on the
   situation). That will succeed only when the other transaction
   terminates and releases its locks.

-->
すべてのトランザクションはそのすべての過程完了までその仮想トランザクションID上に排他的ロックをかけます。
もしある永続IDがトランザクションに割り当てられる（普通はトランザクションがデータベースの状態を変化させるときのみに発生します）と、トランザクションは終了するまで永続トランザクションIDに対して排他ロックを保持します。
あるトランザクションが他のトランザクションを特定して待機しなければならないと判断した場合、他とみなしたトランザクションのIDに対し共有ロックを獲得するように試み、目的を達します
（仮想IDであるか永続IDであるかは、その状況によります）。
これは、他とみなしたトランザクションが完了し、そしてロックを解放した場合のみ成功します。
  </para>

  <para>
<!--
   Although tuples are a lockable type of object,
   information about row-level locks is stored on disk, not in memory,
   and therefore row-level locks normally do not appear in this view.
   If a transaction is waiting for a
   row-level lock, it will usually appear in the view as waiting for the
   permanent transaction ID of the current holder of that row lock.
-->
タプルはロック対象のオブジェクト種類ですが、行レベルロックについての情報はメモリではなく、ディスクに保存されます。
よって行レベルロックは通常、このビューには現れません。
もしトランザクションが行レベルロックの待ち状態である場合は、その行ロックを保持している永続トランザクションIDを待つ状態で、そのトランザクションはビューに現れます。
  </para>

  <para>
<!--
   Advisory locks can be acquired on keys consisting of either a single
   <type>bigint</type> value or two integer values.
   A <type>bigint</type> key is displayed with its
   high-order half in the <structfield>classid</> column, its low-order half
   in the <structfield>objid</> column, and <structfield>objsubid</> equal
   to 1. The original <type>bigint</type> value can be reassembled with the
   expression <literal>(classid::bigint &lt;&lt; 32) |
   objid::bigint</literal>. Integer keys are displayed with the
   first key in the
   <structfield>classid</> column, the second key in the <structfield>objid</>
   column, and <structfield>objsubid</> equal to 2.  The actual meaning of
   the keys is up to the user.  Advisory locks are local to each database,
   so the <structfield>database</> column is meaningful for an advisory lock.
-->
勧告的ロックは、単一の<type>bigint</type>値、または、2つの整数値をキーとして獲得することができます。
<type>bigint</type>の場合は、その上位半分が<structfield>classid</>列内に表示され、残りの下位半分は<structfield>objid</>列内に表示されます。
また、<structfield>objsubid</>は1となります。
元の<type>bigint</type>値を<literal>(classid::bigint &lt;&lt; 32) | objid::bigint</literal>という式で再構成することができます。
整数値キーでは、最初のキーが<structfield>classid</>列に、2番目のキーが<structfield>objid</>列に表示され、<structfield>objsubid</>は2となります。
キーの実際の意味はユーザに任されています。
勧告的ロックはデータベースに対して局所的ですので、勧告的ロックでは<structfield>database</>列が意味を持ちます。
  </para>

  <para>
<!--
   <structname>pg_locks</structname> provides a global view of all locks
   in the database cluster, not only those relevant to the current database.
   Although its <structfield>relation</structfield> column can be joined
   against <structname>pg_class</>.<structfield>oid</> to identify locked
   relations, this will only work correctly for relations in the current
   database (those for which the <structfield>database</structfield> column
   is either the current database's OID or zero).
-->
<structname>pg_locks</structname>は現行のデータベースに関連するロックのみならず、データベースクラスタ内のすべてのロックに関する全体的なビューを提供します。
<structfield>relation</structfield>列はロックされたリレーションを識別するために<structname>pg_class</>.<structfield>oid</>と結合することができますが、これは現行のデータベース内のリレーション（<structfield>database</structfield>列が現行のデータベースのOIDまたはゼロとなっているもの）に対してのみ正常に動作します。
  </para>

  <para>
<!--
   The <structfield>pid</structfield> column can be joined to the
   <structfield>pid</structfield> column of the <link
   linkend="pg-stat-activity-view"><structname>pg_stat_activity</structname></link>
   view to get more
   information on the session holding or waiting to hold each lock,
   for example
<programlisting>
SELECT * FROM pg_locks pl LEFT JOIN pg_stat_activity psa
    ON pl.pid = psa.pid;
</programlisting>
   Also, if you are using prepared transactions, the
   <structfield>virtualtransaction</> column can be joined to the
   <structfield>transaction</structfield> column of the <link
   linkend="view-pg-prepared-xacts"><structname>pg_prepared_xacts</structname></link>
   view to get more information on prepared transactions that hold locks.
   (A prepared transaction can never be waiting for a lock,
   but it continues to hold the locks it acquired while running.)
   For example:
<programlisting>
SELECT * FROM pg_locks pl LEFT JOIN pg_prepared_xacts ppx
    ON pl.virtualtransaction = '-1/' || ppx.transaction;
</programlisting>
-->
ロック保持もしくは保持を待機しているセッションのさらなる情報を入手するため
<link linkend="pg-stat-activity-view"><structname>pg_stat_activity</structname></link>ビューの
<structfield>pid</structfield>列と<structfield>pid</structfield>列を結合することができます。
例えば、このような感じです。
<programlisting>
SELECT * FROM pg_locks pl LEFT JOIN pg_stat_activity psa
    ON pl.pid = psa.pid;
</programlisting>
また、プリペアードトランザクションを使用している場合には、ロックを保持しているプリペアードトランザクションに関してより多くの情報を得るため、
<structfield>virtualtransaction</>列は、<link linkend="view-pg-prepared-xacts"><structname>pg_prepared_xacts</structname></link>ビューの
<structfield>transaction</structfield>列と結合することができます。
 （プリペアードトランザクションはロックを待つことはありませんが、実行時に獲得したロックを保持し続けます。） 
 例えば、このような感じです。
<programlisting>
SELECT * FROM pg_locks pl LEFT JOIN pg_prepared_xacts ppx
    ON pl.virtualtransaction = '-1/' || ppx.transaction;
</programlisting>
  </para>

  <para>
<!--
   The <structname>pg_locks</structname> view displays data from both the
   regular lock manager and the predicate lock manager, which are
   separate systems; in addition, the regular lock manager subdivides its
   locks into regular and <firstterm>fast-path</> locks.
   This data is not guaranteed to be entirely consistent.
   When the view is queried,
   data on fast-path locks (with <structfield>fastpath</> = <literal>true</>)
   is gathered from each backend one at a time, without freezing the state of
   the entire lock manager, so it is possible for locks to be taken or
   released while information is gathered.  Note, however, that these locks are
   known not to conflict with any other lock currently in place.  After
   all backends have been queried for fast-path locks, the remainder of the
   regular lock manager is locked as a unit, and a consistent snapshot of all
   remaining locks is collected as an atomic action.  After unlocking the
   regular lock manager, the predicate lock manager is similarly locked and all
   predicate locks are collected as an atomic action.  Thus, with the exception
   of fast-path locks, each lock manager will deliver a consistent set of
   results, but as we do not lock both lock managers simultaneously, it is
   possible for locks to be taken or released after we interrogate the regular
   lock manager and before we interrogate the predicate lock manager.
-->
<structname>pg_locks</structname>ビューは、異なるシステムにおける、通常のロックマネージャと
述部ロックマネージャの両方からのデータを表示します。
さらに通常のロックマネージャではロックを通常ロックと<firstterm>近道</>ロックに細分化します。
このデータが完全に一貫性があることは保証されません。
ビューが問い合わせられると、近道ロック（<structfield>fastpath</> = <literal>true</>が真）は、ロックマネージャ全体の状態を凍結することなく、各バックエンドからひとつひとつ収集されます。
このため情報収集期間中にロックが獲得されたり解放されたりされる可能性があります。
しかし、これらのロックはその時点で存在する他のロックと競合することがないことが分かっていることに注意してください。
近道ロックについてすべてのバックエンドを問い合わせた後、通常のロックマネージャの残りは１つの単位としてロックされ、残りすべてのロックの一貫性があるスナップショットを原子的な処理で収集します。
ロックマネージャのロックを解除した後、述部ロックマネージャは同様にロックされ、すべての述部ロックを原子的な処理で収集します。
このように、近道ロックという例外がありますが、各ロックマネージャは一貫性をもった結果セットを生成します。
しかし、両方のロックマネージャを同時にロックしませんので、通常のロックマネージャを問い合わせた後と述部ロックマネージャを問い合わせる前の間にロックが獲得されたり解放されたりされる可能性があります。
  </para>

  <para>
<!--
   Locking the regular and/or predicate lock manager could have some
   impact on database performance if this view is very frequently accessed.
   The locks are held only for the minimum amount of time necessary to
   obtain data from the lock managers, but this does not completely eliminate
   the possibility of a performance impact.
-->
このビューが頻繁にアクセスされている場合は、通常もしくは述部ロックマネージャをロックするとデータベースのパフォーマンスに影響があります。
ロックマネージャからデータを取得するために、ロックは必要最低限の時間だけ保持されますが、パフォーマンスに影響がある可能性を全くないわけではありません。
  </para>

 </sect1>

 <sect1 id="view-pg-matviews">
  <title><structname>pg_matviews</structname></title>

  <indexterm zone="view-pg-matviews">
   <primary>pg_matviews</primary>
  </indexterm>

  <indexterm zone="view-pg-matviews">
   <primary>materialized views</primary>
  </indexterm>

  <para>
<!--
   The view <structname>pg_matviews</structname> provides access to
   useful information about each materialized view in the database.
-->
<structname>pg_matviews</structname>ビューは、データベース内のマテリアライズドビューそれぞれに関する有用な情報へのアクセスを提供します。
  </para>

  <table>
<!--
   <title><structname>pg_matviews</> Columns</title>
-->
   <title><structname>pg_matviews</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><structfield>schemaname</structfield></entry>
      <entry><type>name</type></entry>
      <entry><literal><link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.nspname</literal></entry>
<!--
      <entry>Name of schema containing materialized view</entry>
-->
      <entry>マテリアライズドビューを含むスキーマの名前</entry>
     </row>
     <row>
      <entry><structfield>matviewname</structfield></entry>
      <entry><type>name</type></entry>
      <entry><literal><link linkend="catalog-pg-class"><structname>pg_class</structname></link>.relname</literal></entry>
<!--
      <entry>Name of materialized view</entry>
-->
      <entry>マテリアライズドビューの名前</entry>
     </row>
     <row>
      <entry><structfield>matviewowner</structfield></entry>
      <entry><type>name</type></entry>
      <entry><literal><link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.rolname</literal></entry>
<!--
      <entry>Name of materialized view's owner</entry>
-->
      <entry>マテリアライズドビューの所有者の名前</entry>
     </row>
     <row>
      <entry><structfield>tablespace</structfield></entry>
      <entry><type>name</type></entry>
      <entry><literal><link linkend="catalog-pg-tablespace"><structname>pg_tablespace</structname></link>.spcname</literal></entry>
<!--
      <entry>Name of tablespace containing materialized view (null if default for database)</entry>
-->
      <entry>マテリアライズドビューを含むテーブル空間の名前（データベースのデフォルトであればNULL）</entry>
     </row>
     <row>
      <entry><structfield>hasindexes</structfield></entry>
      <entry><type>boolean</type></entry>
      <entry></entry>
<!--
      <entry>True if materialized view has (or recently had) any indexes</entry>
-->
      <entry>マテリアライズドビューがインデックスを持つ（または最近まで持っていた）場合に真</entry>
     </row>
     <row>
      <entry><structfield>ispopulated</structfield></entry>
      <entry><type>boolean</type></entry>
      <entry></entry>
<!--
      <entry>True if materialized view is currently populated</entry>
-->
      <entry>マテリアライズドビューが現在データ投入されている場合に真</entry>
     </row>
     <row>
      <entry><structfield>definition</structfield></entry>
      <entry><type>text</type></entry>
      <entry></entry>
<!--
      <entry>Materialized view definition (a reconstructed <command>SELECT</command> query)</entry>
-->
      <entry>マテリアライズドビューの定義（再構成された<command>SELECT</command>問い合わせ）</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

 </sect1>

 <sect1 id="view-pg-prepared-statements">
  <title><structname>pg_prepared_statements</structname></title>

  <indexterm zone="view-pg-prepared-statements">
   <primary>pg_prepared_statements</primary>
  </indexterm>

  <para>
<!--
   The <structname>pg_prepared_statements</structname> view displays
   all the prepared statements that are available in the current
   session. See <xref linkend="sql-prepare"> for more information about prepared
   statements.
-->
<structname>pg_prepared_statements</structname>ビューは現在のセッションで利用可能な準備済み文をすべて表示します。
準備済み文についての詳細は<xref linkend="sql-prepare">を参照してください。
  </para>

  <para>
<!--
   <structname>pg_prepared_statements</structname> contains one row
   for each prepared statement. Rows are added to the view when a new
   prepared statement is created and removed when a prepared statement
   is released (for example, via the <xref linkend="sql-deallocate"> command).
-->
<structname>pg_prepared_statements</structname>には、1つの準備済み文に対して一行が存在します。
新しい準備済み文が作成されると行が追加され、準備済み文が解放される（例えば<xref linkend="sql-deallocate">を使用）と行が削除されます。
  </para>

  <table>
<!--
   <title><structname>pg_prepared_statements</> Columns</title>
-->
   <title><structname>pg_prepared_statements</>の列</title>

   <tgroup cols="3">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>説明</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><structfield>name</structfield></entry>
      <entry><type>text</type></entry>
      <entry>
<!--
       The identifier of the prepared statement
-->
準備済み文の識別子
      </entry>
     </row>
     <row>
      <entry><structfield>statement</structfield></entry>
      <entry><type>text</type></entry>
      <entry>
<!--
       The query string submitted by the client to create this
       prepared statement. For prepared statements created via SQL,
       this is the <command>PREPARE</command> statement submitted by
       the client. For prepared statements created via the
       frontend/backend protocol, this is the text of the prepared
       statement itself.
-->
この準備済み文を作成するためにクライアントが送付した問い合わせ文字列。
SQL経由で作成された準備済み文では、これはクライアントが送信した<command>PREPARE</command>文です。
フロントエンド/バックエンドプロトコル経由で作成された準備済み文では、これは準備済み文自身のテキストです。
      </entry>
     </row>
     <row>
      <entry><structfield>prepare_time</structfield></entry>
      <entry><type>timestamptz</type></entry>
      <entry>
<!--
       The time at which the prepared statement was created
-->
準備済み文が作成された時間
      </entry>
     </row>
     <row>
      <entry><structfield>parameter_types</structfield></entry>
      <entry><type>regtype[]</type></entry>
      <entry>
<!--
       The expected parameter types for the prepared statement in the
       form of an array of <type>regtype</type>. The OID corresponding
       to an element of this array can be obtained by casting the
       <type>regtype</type> value to <type>oid</type>.
-->
<type>regtype</type>配列形式の準備済み文が想定しているパラメータ型。
配列要素に対応するOIDは、<type>regtype</type>から<type>oid</type>へのキャストを行うことで取り出すことができます。
      </entry>
     </row>
     <row>
      <entry><structfield>from_sql</structfield></entry>
      <entry><type>boolean</type></entry>
      <entry>
<!--
       <literal>true</literal> if the prepared statement was created
       via the <command>PREPARE</command> SQL statement;
       <literal>false</literal> if the statement was prepared via the
       frontend/backend protocol
-->
準備済み文が<command>PREPARE</command> SQL文経由で作成された場合は<literal>true</literal>、フロントエンド/バックエンドプロトコル経由で文が準備された場合は<literal>false</literal>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
<!--
   The <structname>pg_prepared_statements</structname> view is read only.
-->
<structname>pg_prepared_statements</structname>ビューは読み取り専用です。
  </para>
 </sect1>

 <sect1 id="view-pg-prepared-xacts">
  <title><structname>pg_prepared_xacts</structname></title>

  <indexterm zone="view-pg-prepared-xacts">
   <primary>pg_prepared_xacts</primary>
  </indexterm>

  <para>
<!--
   The view <structname>pg_prepared_xacts</structname> displays
   information about transactions that are currently prepared for two-phase
   commit (see <xref linkend="sql-prepare-transaction"> for details).
-->
<structname>pg_prepared_xacts</structname>ビューは、現状で2相コミットのためにプリペアードトランザクションについての情報を表示します
（詳細は<xref linkend="sql-prepare-transaction">を参照してください）。
  </para>

  <para>
<!--
   <structname>pg_prepared_xacts</structname> contains one row per prepared
   transaction.  An entry is removed when the transaction is committed or
   rolled back.
-->
<structname>pg_prepared_xacts</structname>は、プリペアードトランザクション毎に1つの行を含みます。
この項目はトランザクションがコミットもしくはロールバックされたときに削除されます。
  </para>

  <table>
<!--
   <title><structname>pg_prepared_xacts</> Columns</title>
-->
   <title><structname>pg_prepared_xacts</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><structfield>transaction</structfield></entry>
      <entry><type>xid</type></entry>
      <entry></entry>
      <entry>
<!--
       Numeric transaction identifier of the prepared transaction
-->
       プリペアードトランザクションに対する数値のトランザクション識別子
      </entry>
     </row>
     <row>
      <entry><structfield>gid</structfield></entry>
      <entry><type>text</type></entry>
      <entry></entry>
      <entry>
<!--
       Global transaction identifier that was assigned to the transaction
-->
       トランザクションに割り当てられたグローバルのトランザクション識別子
      </entry>
     </row>
     <row>
      <entry><structfield>prepared</structfield></entry>
      <entry><type>timestamp with time zone</type></entry>
      <entry></entry>
      <entry>
<!--
       Time at which the transaction was prepared for commit
-->
       トランザクションがコミットのために準備された時間
      </entry>
     </row>
     <row>
      <entry><structfield>owner</structfield></entry>
      <entry><type>name</type></entry>
      <entry><literal><link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.rolname</literal></entry>
      <entry>
<!--
       Name of the user that executed the transaction
-->
       トランザクションを実行したユーザ名
      </entry>
     </row>
     <row>
      <entry><structfield>database</structfield></entry>
      <entry><type>name</type></entry>
      <entry><literal><link linkend="catalog-pg-database"><structname>pg_database</structname></link>.datname</literal></entry>
      <entry>
<!--
       Name of the database in which the transaction was executed
-->
       トランザクションを実行したデータベース名
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
<!--
   When the <structname>pg_prepared_xacts</structname> view is accessed, the
   internal transaction manager data structures are momentarily locked, and
   a copy is made for the view to display.  This ensures that the
   view produces a consistent set of results, while not blocking
   normal operations longer than necessary.  Nonetheless
   there could be some impact on database performance if this view is
   frequently accessed.
-->
<structname>pg_prepared_xacts</structname>ビューにアクセスすると、内部のトランザクション管理データ構造が一時的にロックされます。
そして表示用にコピーが作成されます。
これは、必要以上に長く通常の操作をブロックさせずに、ビューが一貫性のある結果を生成することを保証します。
このビューが頻繁にアクセスされると、データベースの性能になんらかの影響を及ぼします。
  </para>

 </sect1>

 <sect1 id="view-pg-roles">
  <title><structname>pg_roles</structname></title>

  <indexterm zone="view-pg-roles">
   <primary>pg_roles</primary>
  </indexterm>

  <para>
<!--
   The view <structname>pg_roles</structname> provides access to
   information about database roles.  This is simply a publicly
   readable view of

   <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>
   that blanks out the password field.
-->
<structname>pg_roles</structname>ビューはデータベースのロールに関する情報を提供します。
これは単に一般に公開されている<link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>のビューですが、パスワード列が空白になっています。
  </para>

  <para>
<!--
   This view explicitly exposes the OID column of the underlying table,
   since that is needed to do joins to other catalogs.
-->
このビューは、他のカタログに対して結合を行う必要があるため、明示的に基礎となっているテーブルのOID列を表示します。
  </para>

  <table>
<!--
   <title><structname>pg_roles</> Columns</title>
-->
   <title><structname>pg_roles</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>rolname</structfield></entry>
      <entry><type>name</type></entry>
      <entry></entry>
<!--
      <entry>Role name</entry>
-->
      <entry>ロール名</entry>
     </row>

     <row>
      <entry><structfield>rolsuper</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
<!--
      <entry>Role has superuser privileges</entry>
-->
      <entry>ロールはスーパーユーザの権限を持っています。</entry>
     </row>

     <row>
      <entry><structfield>rolinherit</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
<!--
      <entry>Role automatically inherits privileges of roles it is a
       member of</entry>
-->
      <entry>ロールは自動的にメンバであるロールの権限を継承します。</entry>
     </row>

     <row>
      <entry><structfield>rolcreaterole</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
<!--
      <entry>Role can create more roles</entry>
-->
      <entry>ロールはさらにロールを作成することができます。</entry>
     </row>

     <row>
      <entry><structfield>rolcreatedb</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
<!--
      <entry>Role can create databases</entry>
-->
      <entry>ロールはデータベースを作成することができます。</entry>
     </row>

     <row>
      <entry><structfield>rolcatupdate</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
      <entry>
<!--
       Role can update system catalogs directly.  (Even a superuser cannot do
       this unless this column is true)
-->
       ロールは直接システムカタログを更新することができます。（この列が真でない限り、スーパーユーザでも更新できません。）
      </entry>
     </row>

     <row>
      <entry><structfield>rolcanlogin</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
      <entry>
<!--
       Role can log in. That is, this role can be given as the initial
       session authorization identifier
-->
       ロールはログイン可能です。
このロールは初期セッションの識別子として与えることができます。
      </entry>
     </row>

     <row>
      <entry><structfield>rolreplication</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
      <entry>
<!--
       Role is a replication role. That is, this role can initiate streaming
       replication (see <xref linkend="streaming-replication">) and set/unset
       the system backup mode using <function>pg_start_backup</> and
       <function>pg_stop_backup</>
-->
ロールはレプリケーション用のロールです。
つまり、このロールはストリーミングレプリケーションを初期化し、<function>pg_start_backup</>と<function>pg_stop_backup</>を用いてシステムバックアップモードを設定、解除することができます。
      </entry>
     </row>

     <row>
      <entry><structfield>rolconnlimit</structfield></entry>
      <entry><type>int4</type></entry>
      <entry></entry>
      <entry>
<!--
       For roles that can log in, this sets maximum number of concurrent
       connections this role can make.  -1 means no limit.
-->
       ログイン可能なロールでは、このロールが確立可能な同時接続の最大数を設定します。
-1は無制限を意味します。
      </entry>
     </row>

     <row>
      <entry><structfield>rolpassword</structfield></entry>
      <entry><type>text</type></entry>
      <entry></entry>
<!--
      <entry>Not the password (always reads as <literal>********</>)</entry>
-->
      <entry>パスワードでありません（常に<literal>********</>のように読まれます）</entry>
     </row>

     <row>
      <entry><structfield>rolvaliduntil</structfield></entry>
      <entry><type>timestamptz</type></entry>
      <entry></entry>
<!--
      <entry>Password expiry time (only used for password authentication);
       null if no expiration</entry>
-->
      <entry>パスワード有効期限（パスワード認証でのみ使用）。有効期限がない場合はNULLとなります。</entry>
     </row>

     <row>
      <entry><structfield>rolconfig</structfield></entry>
      <entry><type>text[]</type></entry>
      <entry></entry>
<!--
      <entry>Role-specific defaults for run-time configuration variables</entry>
-->
      <entry>実行時設定変数に関するロール固有のデフォルト</entry>
     </row>

     <row>
      <entry><structfield>oid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.oid</literal></entry>
<!--
      <entry>ID of role</entry>
-->
      <entry>ロールのID</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

 </sect1>

 <sect1 id="view-pg-rules">
  <title><structname>pg_rules</structname></title>

  <indexterm zone="view-pg-rules">
   <primary>pg_rules</primary>
  </indexterm>

  <para>
<!--
   The view <structname>pg_rules</structname> provides access to
   useful information about query rewrite rules.
-->
   <structname>pg_rules</structname>ビューは問い合わせ書き換えルールについての有用な情報へのアクセスを提供します。
  </para>

  <table>
<!--
   <title><structname>pg_rules</> Columns</title>
-->
   <title><structname>pg_rules</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><structfield>schemaname</structfield></entry>
      <entry><type>name</type></entry>
      <entry><literal><link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.nspname</literal></entry>
<!--
      <entry>Name of schema containing table</entry>
-->
      <entry>テーブルを含むスキーマ名</entry>
     </row>
     <row>
      <entry><structfield>tablename</structfield></entry>
      <entry><type>name</type></entry>
      <entry><literal><link linkend="catalog-pg-class"><structname>pg_class</structname></link>.relname</literal></entry>
<!--
      <entry>Name of table the rule is for</entry>
-->
      <entry>ルールの対象のテーブル名</entry>
     </row>
     <row>
      <entry><structfield>rulename</structfield></entry>
      <entry><type>name</type></entry>
      <entry><literal><link linkend="catalog-pg-rewrite"><structname>pg_rewrite</structname></link>.rulename</literal></entry>
<!--
      <entry>Name of rule</entry>
-->
      <entry>ルール名</entry>
     </row>
     <row>
      <entry><structfield>definition</structfield></entry>
      <entry><type>text</type></entry>
      <entry></entry>
<!--
      <entry>Rule definition (a reconstructed creation command)</entry>
-->
      <entry>ルール定義（再構築された生成コマンド）</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
<!--
   The <structname>pg_rules</> view excludes the <literal>ON SELECT</> rules
   of views and materialized views; those can be seen in
   <structname>pg_views</> and <structname>pg_matviews</>.
-->
<structname>pg_rules</structname>ビューは、ビューおよびマテリアライズドビューに対する<literal>ON SELECT</>ルールを除外します。
これらは<structname>pg_views</structname>および<structname>pg_matviews</>にあります。 
  </para>

 </sect1>

 <sect1 id="view-pg-seclabels">
  <title><structname>pg_seclabels</structname></title>

  <indexterm zone="view-pg-seclabels">
   <primary>pg_seclabels</primary>
  </indexterm>

  <para>
<!--
   The view <structname>pg_seclabels</structname> provides information about
   security labels.  It as an easier-to-query version of the
   <link linkend="catalog-pg-seclabel"><structname>pg_seclabel</></> catalog.
-->
<structname>pg_seclabels</structname>ビューはセキュリティラベルに関する情報を提供します。
これは<link linkend="catalog-pg-seclabel"><structname>pg_seclabel</></>カタログをより問い合わせし易くしたものです。
  </para>

  <table>
<!--
   <title><structname>pg_seclabels</> Columns</title>
-->
   <title><structname>pg_seclabels</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><structfield>objoid</structfield></entry>
      <entry><type>oid</type></entry>
<!--
      <entry>any OID column</entry>
      <entry>The OID of the object this security label pertains to</entry>
-->
      <entry>任意のOID列</entry>
      <entry>このセキュリティラベルが付属するオブジェクトのOID</entry>
     </row>
     <row>
      <entry><structfield>classoid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-class"><structname>pg_class</structname></link>.oid</literal></entry>
<!--
      <entry>The OID of the system catalog this object appears in</entry>
-->
      <entry>このオブジェクトが存在するシステムカタログのOID</entry>
     </row>
     <row>
      <entry><structfield>objsubid</structfield></entry>
      <entry><type>int4</type></entry>
      <entry></entry>
      <entry>
<!--
       For a security label on a table column, this is the column number (the
       <structfield>objoid</> and <structfield>classoid</> refer to
       the table itself).  For all other object types, this column is
       zero.
-->
テーブル列上のセキュリティラベルでは、これは列番号です（<structfield>objoid</>および<structfield>classoid</>はテーブル自身を参照します）。
他のすべての種類のオブジェクトでは、この列はゼロです。
      </entry>
     </row>
     <row>
      <entry><structfield>objtype</structfield></entry>
      <entry><type>text</type></entry>
      <entry></entry>
      <entry>
<!--
         The type of object to which this label applies, as text.
-->
このラベルが適用されるオブジェクトの種類のテキスト表現
      </entry>
     </row>
     <row>
      <entry><structfield>objnamespace</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.oid</literal></entry>
      <entry>
<!--
       The OID of the namespace for this object, if applicable;
       otherwise NULL.
-->
もし適用可能であればこのオブジェクト用の名前空間のOID。さもなければNULL
      </entry>
     </row>
     <row>
      <entry><structfield>objname</structfield></entry>
      <entry><type>text</type></entry>
      <entry></entry>
      <entry>
<!--
       The name of the object to which this label applies, as text.
-->
このラベルが適用されるオブジェクト名称のテキスト表現
      </entry>
     </row>
     <row>
      <entry><structfield>provider</structfield></entry>
      <entry><type>text</type></entry>
      <entry><literal><link linkend="catalog-pg-seclabel"><structname>pg_seclabel</structname></link>.provider</literal></entry>
<!--
      <entry>The label provider associated with this label.</entry>
-->
      <entry>このレベルに関連付いたラベルプロバイダ</entry>
     </row>
     <row>
      <entry><structfield>label</structfield></entry>
      <entry><type>text</type></entry>
      <entry><literal><link linkend="catalog-pg-seclabel"><structname>pg_seclabel</structname></link>.label</literal></entry>
<!--
      <entry>The security label applied to this object.</entry>
-->
      <entry>このオブジェクトに適用されるセキュリティラベル</entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect1>

 <sect1 id="view-pg-settings">
  <title><structname>pg_settings</structname></title>

  <indexterm zone="view-pg-settings">
   <primary>pg_settings</primary>
  </indexterm>

  <para>
<!--
   The view <structname>pg_settings</structname> provides access to
   run-time parameters of the server.  It is essentially an alternative
   interface to the <xref linkend="sql-show">
   and <xref linkend="sql-set"> commands.
   It also provides access to some facts about each parameter that are
   not directly available from <command>SHOW</>, such as minimum and
   maximum values.
-->
<structname>pg_settings</structname>ビューはサーバの実行時パラメータへのアクセスを提供します。
基本的に<xref linkend="sql-show">と<xref linkend="sql-set">コマンドの代わりとなるインタフェースです。
同時に最大・最小値などのように<command>SHOW</>コマンドでは直接入手できないそれぞれのパラメータのいくつかの実状にアクセスする機能を提供します。
  </para>

  <table>
<!--
   <title><structname>pg_settings</> Columns</title>
-->
   <title><structname>pg_settings</>の列</title>

   <tgroup cols="3">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>説明</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><structfield>name</structfield></entry>
      <entry><type>text</type></entry>
<!--
      <entry>Run-time configuration parameter name</entry>
-->
      <entry>実行時設定パラメータ名</entry>
     </row>
     <row>
      <entry><structfield>setting</structfield></entry>
      <entry><type>text</type></entry>
<!--
      <entry>Current value of the parameter</entry>
-->
      <entry>パラメータの現在値</entry>
     </row>
     <row>
      <entry><structfield>unit</structfield></entry>
      <entry><type>text</type></entry>
<!--
      <entry>Implicit unit of the parameter</entry>
-->
      <entry>暗黙的なパラメータの単位</entry>
     </row>
     <row>
      <entry><structfield>category</structfield></entry>
      <entry><type>text</type></entry>
<!--
      <entry>Logical group of the parameter</entry>
-->
      <entry>パラメータの論理グループ</entry>
     </row>
     <row>
      <entry><structfield>short_desc</structfield></entry>
      <entry><type>text</type></entry>
<!--
      <entry>A brief description of the parameter</entry>
-->
      <entry>パラメータの簡潔な説明</entry>
     </row>
     <row>
      <entry><structfield>extra_desc</structfield></entry>
      <entry><type>text</type></entry>
<!--
      <entry>Additional, more detailed, description of the parameter</entry>

-->
      <entry>追加で、より詳細なパラメータについての説明</entry>
     </row>
     <row>
      <entry><structfield>context</structfield></entry>
      <entry><type>text</type></entry>
<!--
      <entry>Context required to set the parameter's value (see below)</entry>
-->
      <entry>パラメータ値を設定するために必要な文脈（後述）</entry>
     </row>
     <row>
      <entry><structfield>vartype</structfield></entry>
      <entry><type>text</type></entry>
<!--
      <entry>Parameter type (<literal>bool</>, <literal>enum</>,

       <literal>integer</>, <literal>real</>, or <literal>string</>)

      </entry>
-->
      <entry>パラメータの型（<literal>bool</>、<literal>enum</>、<literal>integer</>、<literal>real</>もしくは<literal>string</>）
      </entry>
     </row>
     <row>
      <entry><structfield>source</structfield></entry>
      <entry><type>text</type></entry>
<!--
      <entry>Source of the current parameter value</entry>
-->
      <entry>現在のパラメータ値のソース</entry>
     </row>
     <row>
      <entry><structfield>min_val</structfield></entry>
      <entry><type>text</type></entry>
<!--
      <entry>Minimum allowed value of the parameter (null for non-numeric
      values)</entry>
-->
      <entry>容認されている最小のパラメータ値（数値でない場合はNULL）</entry>
     </row>
     <row>
      <entry><structfield>max_val</structfield></entry>
      <entry><type>text</type></entry>
<!--
      <entry>Maximum allowed value of the parameter (null for non-numeric
      values)</entry>
-->
      <entry>容認されている最大のパラメータ値（数値でない場合はNULL）</entry>
     </row>
     <row>
      <entry><structfield>enumvals</structfield></entry>
      <entry><type>text[]</type></entry>
<!--
      <entry>Allowed values of an enum parameter (null for non-enum
      values)</entry>
-->
      <entry>許可された列挙パラメータの値(列挙型ではない場合はNULL)</entry>
     </row>
     <row>
      <entry><structfield>boot_val</structfield></entry>
      <entry><type>text</type></entry>

<!--
      <entry>Parameter value assumed at server startup if the parameter is
      not otherwise set</entry>
-->
      <entry>パラメータが設定されていなかったとした場合に仮定されるサーバ起動時のパラメータ値</entry>
     </row>
     <row>
      <entry><structfield>reset_val</structfield></entry>
      <entry><type>text</type></entry>

<!--
      <entry>Value that <command>RESET</command> would reset the parameter to
      in the current session</entry>
-->
      <entry>現状のセッションにおいて<command>RESET</command>によって戻されるパラメータの値</entry>
     </row>
     <row>
      <entry><structfield>sourcefile</structfield></entry>
      <entry><type>text</type></entry>
<!--
      <entry>Configuration file the current value was set in (null for
      values set from sources other than configuration files, or when
      examined by a non-superuser);
      helpful when using <literal>include</> directives in configuration files</entry>
-->
      <entry>
現状の値が設定されている設定ファイル(設定ファイル以外のソースから設定された値の場合とスーパーユーザ以外から検査された時はNULLとなります)。
設定ファイル内で<literal>include</>指示子を使用する時に役に立ちます。</entry>
     </row>
     <row>
      <entry><structfield>sourceline</structfield></entry>
      <entry><type>integer</type></entry>
<!--
      <entry>Line number within the configuration file the current value was
      set at (null for values set from sources other than configuration files,
      or when examined by a non-superuser)
      </entry>
-->
      <entry>現状の値が設定されている設定ファイル内の行番号(設定ファイル以外のソースから設定された値の場合とスーパーユーザ以外から検査された時はNULLとなります。)
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
  
  <para>
<!--
   There are several possible values of <structfield>context</structfield>.
   In order of decreasing difficulty of changing the setting, they are:
-->
<structfield>context</structfield>が取り得る値は複数あります。
この設定の変更の困難さを軽くするために、以下に示します。
  </para>

  <variablelist>
   <varlistentry>
    <term><literal>internal</literal></term>
    <listitem>
     <para>
<!--
      These settings cannot be changed directly; they reflect internally
      determined values.  Some of them may be adjustable by rebuilding the
      server with different configuration options, or by changing options
      supplied to <command>initdb</command>.
-->
これらの設定は直接変更できません。
これらは内部で決定された値を反映するものです。
一部は異なる設定オプションでサーバを細構築する、または、<command>initdb</command>に与えるオプションを変更することで調整することができます。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>postmaster</literal></term>
    <listitem>
     <para>
<!--
      These settings can only be applied when the server starts, so any change
      requires restarting the server.  Values for these settings are typically
      stored in the <filename>postgresql.conf</filename> file, or passed on
      the command line when starting the server.  Of course, settings with any
      of the lower <structfield>context</structfield> types can also be
      set at server start time.
-->
これらの設定はサーバ起動時にのみ適用することができます。
このため何かを変更するためにはサーバを再起動しなければなりません。
これらの設定用の値は通常<filename>postgresql.conf</filename>ファイル内に格納されている、あるいは、サーバを起動する際のコマンドラインから渡されます。
当然ながら、より低い種類の<structfield>context</structfield>を持つ設定もサーバ起動時に設定することができます。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>sighup</literal></term>
    <listitem>
     <para>
<!--
      Changes to these settings can be made in
      <filename>postgresql.conf</filename> without restarting the server.
      Send a <systemitem>SIGHUP</systemitem> signal to the postmaster to
      cause it to re-read <filename>postgresql.conf</filename> and apply
      the changes.  The postmaster will also forward the
      <systemitem>SIGHUP</systemitem> signal to its child processes so that
      they all pick up the new value.
-->
これらの設定は、サーバを再起動することなく<filename>postgresql.conf</filename>内を変更することで行うことができます。
<filename>postgresql.conf</filename>を再度読み込み、変更を適用させるためには、postmasterに<systemitem>SIGHUP</systemitem>シグナルを送信してください。
すべての子プロセスが新しい値を選択するように、postmasterは同時に子プロセスに<systemitem>SIGHUP</systemitem>シグナルを転送します。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>backend</literal></term>
    <listitem>
     <para>
<!--
      Changes to these settings can be made in
      <filename>postgresql.conf</filename> without restarting the server;
      they can also be set for a particular session in the connection request
      packet (for example, via <application>libpq</>'s <literal>PGOPTIONS</>
      environment variable).  However, these settings never change in a
      session after it is started.  If you change them in
      <filename>postgresql.conf</filename>, send a
      <systemitem>SIGHUP</systemitem> signal to the postmaster to cause it to
      re-read <filename>postgresql.conf</filename>.  The new values will only
      affect subsequently-launched sessions.
-->
これらの設定は、サーバを再起動することなく<filename>postgresql.conf</filename>内を変更することで行うことができます。
また、接続要求パケットの中で特定のセッション向けに設定することもできます（例えば<application>libpq</>の<literal>PGOPTIONS</>環境変数）。
しかし、これらの設定はセッションが開始してから、そのセッションの中で変更することはできません。
<filename>postgresql.conf</filename>内でそれらを変更した場合は、<filename>postgresql.conf</filename>を再度読み込ませるために、postmasterに<systemitem>SIGHUP</systemitem>シグナルを送信してください。
新しい値はその後で始まったセッションにのみ影響を与えます。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>superuser</literal></term>
    <listitem>
     <para>
<!--
      These settings can be set from <filename>postgresql.conf</filename>,
      or within a session via the <command>SET</> command; but only superusers
      can change them via <command>SET</>.  Changes in
      <filename>postgresql.conf</filename> will affect existing sessions
      only if no session-local value has been established with <command>SET</>.
-->
これらの設定は<filename>postgresql.conf</filename>、または、セッションの中で<command>SET</>コマンドを使用することで設定することができます。
しかし<command>SET</>経由で変更できるのはスーパーユーザのみです。
<filename>postgresql.conf</filename>内の変更は、セッション独自の値が<command>SET</>で設定されていない場合にのみ、既存のセッションに影響を与えます。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>user</literal></term>
    <listitem>
     <para>
<!--
      These settings can be set from <filename>postgresql.conf</filename>,
      or within a session via the <command>SET</> command.  Any user is
      allowed to change his session-local value.  Changes in
      <filename>postgresql.conf</filename> will affect existing sessions
      only if no session-local value has been established with <command>SET</>.
-->
これらの設定は<filename>postgresql.conf</filename>、または、セッションの中で<command>SET</>コマンドを使用することで設定することができます。
任意のユーザが自身のセッション独自の値を変更することが許されています。
<filename>postgresql.conf</filename>内の変更は、セッション独自の値が<command>SET</>で設定されていない場合にのみ、既存のセッションに影響を与えます。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
<!--
   See <xref linkend="config-setting"> for more information about the various
   ways to change these parameters.
-->
これらのパラメータを変更する各種方法に関する情報については<xref linkend="config-setting">を参照してください。
  </para>

  <para>
<!--
   The <structname>pg_settings</structname> view cannot be inserted into or
   deleted from, but it can be updated.  An <command>UPDATE</command> applied
   to a row of <structname>pg_settings</structname> is equivalent to executing
   the <xref linkend="sql-set"> command on that named
   parameter. The change only affects the value used by the current
   session. If an <command>UPDATE</command> is issued within a transaction
   that is later aborted, the effects of the <command>UPDATE</command> command
   disappear when the transaction is rolled back. Once the surrounding
   transaction is committed, the effects will persist until the end of the
   session, unless overridden by another <command>UPDATE</command> or
   <command>SET</command>.
-->
<structname>pg_settings</structname>ビューには挿入も削除もできませんが、更新することは可能です。
<structname>pg_settings</structname>行に適用される<command>UPDATE</command>は名前付きのパラメータに対して<xref linkend="sql-set">コマンドを実行することと同値です。
変更は現在のセッションで使用されている値にのみ有効です。
もしも後に中止されるトランザクション内で<command>UPDATE</command>が発行されると、トランザクションがロールバックされた時点で<command>UPDATE</command>コマンドは効力を失います。
排他制御中のトランザクションがひとたびコミットされると、その効果は他の<command>UPDATE</command>もしくは<command>SET</command>コマンドで上書きされない限りセッションの完了まで保たれます。
  </para>

 </sect1>

 <sect1 id="view-pg-shadow">
  <title><structname>pg_shadow</structname></title>

  <indexterm zone="view-pg-shadow">
   <primary>pg_shadow</primary>
  </indexterm>

  <para>
<!--
   The view <structname>pg_shadow</structname> exists for backwards
   compatibility: it emulates a catalog that existed in
   <productname>PostgreSQL</productname> before version 8.1.
   It shows properties of all roles that are marked as
   <structfield>rolcanlogin</> in
   <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.
-->
<structname>pg_shadow</structname>ビューは下位互換のために存在しています。
バージョン8.1以前の<productname>PostgreSQL</productname>に存在していたカタログを模擬します。
<link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>内で<structfield>rolcanlogin</>のマークがついた全てのロールの属性を保持します。
  </para>

  <para>
<!--
   The name stems from the fact that this table
   should not be readable by the public since it contains passwords.
   <link linkend="view-pg-user"><structname>pg_user</structname></link>
   is a publicly readable view on
   <structname>pg_shadow</structname> that blanks out the password field.
-->
名前の由来は、このテーブルがパスワードを含むため、一般的には読めないことから来ています。
<link linkend="view-pg-user"><structname>pg_user</structname></link>は、<structname>pg_shadow</structname>のビューですが、パスワードの列が空白となっているため一般に読むことが可能です。
  </para>

  <table>
<!--
   <title><structname>pg_shadow</> Columns</title>
-->
   <title><structname>pg_shadow</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>usename</structfield></entry>
      <entry><type>name</type></entry>
      <entry><literal><link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.rolname</literal></entry>
<!--
      <entry>User name</entry>
-->
      <entry>ユーザ名</entry>
     </row>

     <row>
      <entry><structfield>usesysid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.oid</literal></entry>
<!--
      <entry>ID of this user</entry>
-->
      <entry>ユーザID</entry>
     </row>

     <row>
      <entry><structfield>usecreatedb</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
<!--
      <entry>User can create databases</entry>
-->
      <entry>ユーザはデータベースを作成可能です。</entry>
     </row>

     <row>
      <entry><structfield>usesuper</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
<!--
      <entry>User is a superuser</entry>
-->
      <entry>ユーザはスーパーユーザです。</entry>
     </row>

     <row>
      <entry><structfield>usecatupd</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
      <entry>
<!--
       User can update system catalogs.  (Even a superuser cannot do
       this unless this column is true.)
-->
       ユーザはシステムカタログを更新可能です。（スーパーユーザであってもここが真でなければ更新できません。）
      </entry>
     </row>
     
     <row>
      <entry><structfield>userepl</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
      <entry>
<!--      
       User can initiate streaming replication and put the system in and
       out of backup mode.
-->
ユーザはストリーミングレプリケーションを開始することができ、システムをバックアップモードにしたり、戻したりできます。
      </entry>
     </row>

     <row>
      <entry><structfield>passwd</structfield></entry>
      <entry><type>text</type></entry>
      <entry></entry>
<!--
      <entry>Password (possibly encrypted); null if none.  See
      <link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>
      for details of how encrypted passwords are stored.</entry>
-->
      <entry>（おそらく暗号化された）パスワード。
存在しない場合はNULLです。
暗号化されたパスワードの格納方法については<link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>を参照してください。
</entry>
     </row>

     <row>
      <entry><structfield>valuntil</structfield></entry>
      <entry><type>abstime</type></entry>
      <entry></entry>
<!--
      <entry>Password expiry time (only used for password authentication)</entry>
-->
      <entry>パスワード有効期限（パスワード認証でのみ使用）</entry>
     </row>

     <row>
      <entry><structfield>useconfig</structfield></entry>
      <entry><type>text[]</type></entry>
      <entry></entry>
<!--
      <entry>Session defaults for run-time configuration variables</entry>
-->
      <entry>実行時設定変数のセッションデフォルト</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

 </sect1>

 <sect1 id="view-pg-stats">
  <title><structname>pg_stats</structname></title>

  <indexterm zone="view-pg-stats">
   <primary>pg_stats</primary>
  </indexterm>

  <para>
<!--
   The view <structname>pg_stats</structname> provides access to
   the information stored in the <link
   linkend="catalog-pg-statistic"><structname>pg_statistic</structname></link>
   catalog.  This view allows access only to rows of
   <structname>pg_statistic</structname> that correspond to tables the
   user has permission to read, and therefore it is safe to allow public
   read access to this view.
-->
<structname>pg_stats</structname>ビューは<link linkend="catalog-pg-statistic"><structname>pg_statistic</structname></link>カタログの情報にアクセスするためのビューです。
このビューは、ユーザが読み込み権限を持つテーブルに一致する<structname>pg_statistic</structname>の行に対してのみアクセスを許可しています。
よって、このビューに対して一般に読み込みを許可しても安全です。
  </para>

  <para>
<!--
   <structname>pg_stats</structname> is also designed to present the
   information in a more readable format than the underlying catalog
   &mdash; at the cost that its schema must be extended whenever new slot types
   are defined for <structname>pg_statistic</structname>.
-->
<structname>pg_stats</structname>も、その基礎となっているカタログよりも、より読みやすい書式で情報を提供するように設計されています。
しかし、これは、もし<structname>pg_statistic</structname>に対して新しいスロット型が定義されるたびに、スキーマが拡張されなくてはならない、という犠牲を払っています。
  </para>

  <table>
<!--
   <title><structname>pg_stats</> Columns</title>
-->
   <title><structname>pg_stats</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><structfield>schemaname</structfield></entry>
      <entry><type>name</type></entry>
      <entry><literal><link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.nspname</literal></entry>
<!--
      <entry>Name of schema containing table</entry>
-->
      <entry>テーブルを持つスキーマ名</entry>
     </row>

     <row>
      <entry><structfield>tablename</structfield></entry>
      <entry><type>name</type></entry>
      <entry><literal><link linkend="catalog-pg-class"><structname>pg_class</structname></link>.relname</literal></entry>
<!--
      <entry>Name of table</entry>
-->
      <entry>テーブル名</entry>
     </row>

     <row>
      <entry><structfield>attname</structfield></entry>
      <entry><type>name</type></entry>
      <entry><literal><link linkend="catalog-pg-attribute"><structname>pg_attribute</structname></link>.attname</literal></entry>
<!--
      <entry>Name of the column described by this row</entry>
-->
      <entry>この行が記述する列名</entry>
     </row>

     <row>
      <entry><structfield>inherited</structfield></entry>
      <entry><type>bool</type></entry>
      <entry></entry>
<!--
      <entry>If true, this row includes inheritance child columns, not just the
       values in the specified table</entry>
-->
      <entry>
真の場合、この行には指定されたテーブルの値だけではなく、継承関係の子の列が含まれます。
      </entry>
     </row>

     <row>
      <entry><structfield>null_frac</structfield></entry>
      <entry><type>real</type></entry>
      <entry></entry>
<!--
      <entry>Fraction of column entries that are null</entry>
-->
      <entry>NULLとなっている列項目の割合</entry>
     </row>

     <row>
      <entry><structfield>avg_width</structfield></entry>
      <entry><type>integer</type></entry>
      <entry></entry>
<!--
      <entry>Average width in bytes of column's entries</entry>
-->
      <entry>列項目のバイト単位による平均幅</entry>
     </row>

     <row>
      <entry><structfield>n_distinct</structfield></entry>
      <entry><type>real</type></entry>
      <entry></entry>
      <entry>
<!--
       If greater than zero, the estimated number of distinct values in the
       column.  If less than zero, the negative of the number of distinct
       values divided by the number of rows.  (The negated form is used when
       <command>ANALYZE</> believes that the number of distinct values is
       likely to increase as the table grows; the positive form is used when
       the column seems to have a fixed number of possible values.)  For
       example, -1 indicates a unique column in which the number of distinct
       values is the same as the number of rows.
-->
ゼロより大きい値は列内の個別値の推定数です。
ゼロより小さければ行数で個別値を割算した数字の負数です。
（テーブルが肥大するにつれ固有値の増大があり得ると<command>ANALYZE</>が判断した場合に負変換形式が使われます。
正変換形式は列の取り得る値が固定数を持つと思われる場合に使用されます）。
例えば-1は個別値の数が行数と等しいような、一意な列を表します。
      </entry>
     </row>

     <row>
      <entry><structfield>most_common_vals</structfield></entry>
      <entry><type>anyarray</type></entry>
      <entry></entry>
      <entry>
<!--
       A list of the most common values in the column. (Null if
       no values seem to be more common than any others.)
-->
列の中の最も共通した値のリストです（他の値よりもより共通している値がない場合はNULLとなります）。
      </entry>
     </row>

     <row>
      <entry><structfield>most_common_freqs</structfield></entry>
      <entry><type>real[]</type></entry>
      <entry></entry>
      <entry>
<!--
       A list of the frequencies of the most common values,
       i.e., number of occurrences of each divided by total number of rows.
       (Null when <structfield>most_common_vals</structfield> is.)
       For some data types such as <type>tsvector</>, it can also store some
       additional information, making it longer than the
       <structfield>most_common_vals</> array.
-->
最も一般的な値の出現頻度のリストで、つまり行の総数で出現数を割算した数字です（<structfield>most_common_vals</structfield>がNULLの時はNULLとなります）。
      </entry>
     </row>

     <row>
      <entry><structfield>histogram_bounds</structfield></entry>
      <entry><type>anyarray</type></entry>
      <entry></entry>
      <entry>
<!--
       A list of values that divide the column's values into groups of
       approximately equal population.  The values in
       <structfield>most_common_vals</>, if present, are omitted from this
       histogram calculation.  (This column is null if the column data type
       does not have a <literal>&lt;</> operator or if the
       <structfield>most_common_vals</> list accounts for the entire
       population.)
-->
列の値を満遍なく似たような数でグループに分配した値のリストです。
<structfield>most_common_vals</>の値がもし存在すればこの度数分布計算は行われません
（列データ型が<literal>&lt;</>演算子を所有しない場合、もしくは<structfield>most_common_vals</>が全体の構成要素アカウントをリストしている場合、この列はNULLとなります）。
      </entry>
     </row>

     <row>
      <entry><structfield>correlation</structfield></entry>
      <entry><type>real</type></entry>
      <entry></entry>
      <entry>
<!--
       Statistical correlation between physical row ordering and
       logical ordering of the column values.  This ranges from -1 to +1.
       When the value is near -1 or +1, an index scan on the column will
       be estimated to be cheaper than when it is near zero, due to reduction
       of random access to the disk.  (This column is null if the column data
       type does not have a <literal>&lt;</> operator.)
-->
物理的な[訳注：ディスク上の]行の並び順と論理的な列の値の並び順に関する統計的相関です。
この値は-1から+1の範囲です。
値が-1もしくは+1の近辺にある時、ディスクにランダムアクセスする必要が少なくなるためこの列に対してのインデックススキャンは0近辺にある場合に比較して安価であると推定されます
（列データ型に<literal>&lt;</>演算子がない場合、この列はNULLとなります）。
      </entry>
     </row>


     <row>
      <entry><structfield>most_common_elems</structfield></entry>
      <entry><type>anyarray</type></entry>
      <entry></entry>
      <entry>
      <!--
       A list of non-null element values most often appearing within values of
       the column. (Null for scalar types.)
       -->
列の値の中で最もよく出現する非NULLの要素値のリストです。（スカラ型の場合はNULLです。）
      </entry>
     </row>

     <row>
      <entry><structfield>most_common_elem_freqs</structfield></entry>
      <entry><type>real[]</type></entry>
      <entry></entry>
      <entry>
      <!--
       A list of the frequencies of the most common element values, i.e., the
       fraction of rows containing at least one instance of the given value.
       Two or three additional values follow the per-element frequencies;
       these are the minimum and maximum of the preceding per-element
       frequencies, and optionally the frequency of null elements.
       (Null when <structfield>most_common_elems</structfield> is.)
       -->
最も一般的な要素値の出現頻度のリストで、与えられた値の少なくとも1つのインスタンスを含む行の断片です。
2つもしくは3つの追加の値が1つの要素ごとの出現頻度に続きます。
最小で最大の要素ごとの出現頻度があります。さらにオプションとしてNULL要素の出現頻度もあります。
(<structfield>most_common_elems</structfield>の場合はNULLになります。)
      </entry>
     </row>

     <row>
      <entry><structfield>elem_count_histogram</structfield></entry>
      <entry><type>real[]</type></entry>
      <entry></entry>
      <entry>
      <!--
       A histogram of the counts of distinct non-null element values within the
       values of the column, followed by the average number of distinct
       non-null elements.  (Null for scalar types.)
       -->
       列の値でNULLではない要素値の個別数のヒストグラム。これは個別のNULLではない平均値が後に続きます。(スカラ型の場合はNULLです。)
      </entry>
     </row>
     
    </tbody>
   </tgroup>
  </table>

  <para>
<!--
   The maximum number of entries in the array fields can be controlled on a
   column-by-column basis using the <command>ALTER TABLE SET STATISTICS</>
   command, or globally by setting the
   <xref linkend="guc-default-statistics-target"> run-time parameter.
-->
配列の最大項目数は<command>ALTER TABLE SET STATISTICS</>コマンドで列ごとに設定されるか、
もしくは<xref linkend="guc-default-statistics-target">実行時パラメータで包括的に設定されるかのいずれかです。
  </para>

 </sect1>

 <sect1 id="view-pg-tables">
  <title><structname>pg_tables</structname></title>

  <indexterm zone="view-pg-tables">
   <primary>pg_tables</primary>
  </indexterm>

  <para>
<!--
   The view <structname>pg_tables</structname> provides access to
   useful information about each table in the database.
-->
   <structname>pg_tables</structname>ビューはデータベース内のそれぞれのテーブルに関する有用な情報へのアクセスを提供します。
  </para>

  <table>
<!--
   <title><structname>pg_tables</> Columns</title>
-->
   <title><structname>pg_tables</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><structfield>schemaname</structfield></entry>
      <entry><type>name</type></entry>
      <entry><literal><link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.nspname</literal></entry>
<!--
      <entry>Name of schema containing table</entry>
-->
      <entry>テーブルを持つスキーマ名</entry>
     </row>
     <row>
      <entry><structfield>tablename</structfield></entry>
      <entry><type>name</type></entry>
      <entry><literal><link linkend="catalog-pg-class"><structname>pg_class</structname></link>.relname</literal></entry>
<!--
      <entry>Name of table</entry>
-->
      <entry>テーブル名</entry>
     </row>
     <row>
      <entry><structfield>tableowner</structfield></entry>
      <entry><type>name</type></entry>
      <entry><literal><link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.rolname</literal></entry>
<!--
      <entry>Name of table's owner</entry>
-->
      <entry>テーブルの所有者</entry>
     </row>
     <row>
      <entry><structfield>tablespace</structfield></entry>
      <entry><type>name</type></entry>
      <entry><literal><link linkend="catalog-pg-tablespace"><structname>pg_tablespace</structname></link>.spcname</literal></entry>
<!--
      <entry>Name of tablespace containing table (null if default for database)</entry>
-->
      <entry>テーブルを含むテーブル空間の名前（データベースのデフォルトの場合はNULL）</entry>
     </row>
     <row>
      <entry><structfield>hasindexes</structfield></entry>
      <entry><type>boolean</type></entry>
      <entry><literal><link linkend="catalog-pg-class"><structname>pg_class</structname></link>.relhasindex</literal></entry>
<!--
      <entry>True if table has (or recently had) any indexes</entry>
-->
      <entry>テーブルがインデックスを持っている（もしくは最近まで持っていた）なら真</entry>
     </row>
     <row>
      <entry><structfield>hasrules</structfield></entry>
      <entry><type>boolean</type></entry>
      <entry><literal><link linkend="catalog-pg-class"><structname>pg_class</structname></link>.relhasrules</literal></entry>
<!--
      <entry>True if table has (or once had) rules</entry>
-->
      <entry>テーブルにルールがある（もしくは以前あった）時は真</entry>
     </row>
     <row>
      <entry><structfield>hastriggers</structfield></entry>
      <entry><type>boolean</type></entry>
      <entry><literal><link linkend="catalog-pg-class"><structname>pg_class</structname></link>.relhastriggers</literal></entry>

<!--
      <entry>True if table has (or once had) triggers</entry>
-->
      <entry>テーブルにトリガがある（もしくは以前あった）時は真</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

 </sect1>

 <sect1 id="view-pg-timezone-abbrevs">
  <title><structname>pg_timezone_abbrevs</structname></title>

  <indexterm zone="view-pg-timezone-abbrevs">
   <primary>pg_timezone_abbrevs</primary>
  </indexterm>

  <para>
<!--
   The view <structname>pg_timezone_abbrevs</structname> provides a list
   of time zone abbreviations that are currently recognized by the datetime
   input routines.  The contents of this view change when the
   <xref linkend="guc-timezone-abbreviations"> run-time parameter is modified.
-->
<structname>pg_timezone_abbrevs</structname>ビューは、現在日付時間の入力処理で認識されている、時間帯省略形のリストを提供します。
このビューの内容は、<xref linkend="guc-timezone-abbreviations">実行時パラメータが変更された時に変わります。
  </para>

  <table>
<!--
   <title><structname>pg_timezone_abbrevs</> Columns</title>
-->
   <title><structname>pg_timezone_abbrevs</>の列</title>

   <tgroup cols="3">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>説明</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><structfield>abbrev</structfield></entry>
      <entry><type>text</type></entry>
<!--
      <entry>Time zone abbreviation</entry>
-->
      <entry>時間帯省略形</entry>
     </row>
     <row>
      <entry><structfield>utc_offset</structfield></entry>
      <entry><type>interval</type></entry>
<!--
      <entry>Offset from UTC (positive means east of Greenwich)</entry>
-->
      <entry>UTCからのオフセット(正はグリニッジより西側を意味する)</entry>

     </row>
     <row>
      <entry><structfield>is_dst</structfield></entry>
      <entry><type>boolean</type></entry>
<!--
      <entry>True if this is a daylight-savings abbreviation</entry>
-->
      <entry>夏時間省略形の場合は真</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

 </sect1>

 <sect1 id="view-pg-timezone-names">
  <title><structname>pg_timezone_names</structname></title>

  <indexterm zone="view-pg-timezone-names">
   <primary>pg_timezone_names</primary>
  </indexterm>

  <para>
<!--
   The view <structname>pg_timezone_names</structname> provides a list
   of time zone names that are recognized by <command>SET TIMEZONE</>,
   along with their associated abbreviations, UTC offsets,
   and daylight-savings status.  (Technically,
    <productname>PostgreSQL</productname> uses <acronym>UT1</> rather
   than UTC because leap seconds are not handled.)
   Unlike the abbreviations shown in <link
   linkend="view-pg-timezone-abbrevs"><structname>pg_timezone_abbrevs</structname></link>, many of these names imply a set of daylight-savings transition
   date rules.  Therefore, the associated information changes across local DST
   boundaries.  The displayed information is computed based on the current
   value of <function>CURRENT_TIMESTAMP</>.
-->
<structname>pg_timezone_names</structname>は、<command>SET TIMEZONE</>で認識される時間帯名称の一覧を提供します。
ここには、その関連付けされた省略形、UTCオフセット、夏時間状況などが含まれます。
（<productname>PostgreSQL</productname>は技術的には、うるう秒を扱いませんので、UTCではなく<acronym>UT1</>を使用します。）
<link linkend="view-pg-timezone-abbrevs"><structname>pg_timezone_abbrevs</structname></link>で示した省略形とは異なり、名前の多くが夏時間変換規則を意味しています。
したがって、関連する情報はローカルなDST境界によって異なります。
表示される情報は、現在の<function>CURRENT_TIMESTAMP</>に基づいて計算されたものです。
  </para>

  <table>
<!--
   <title><structname>pg_timezone_names</> Columns</title>
-->
   <title><structname>pg_timezone_names</>の列</title>

   <tgroup cols="3">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>説明</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><structfield>name</structfield></entry>
      <entry><type>text</type></entry>
<!--
      <entry>Time zone name</entry>
-->
      <entry>時間帯名</entry>
     </row>
     <row>
      <entry><structfield>abbrev</structfield></entry>
      <entry><type>text</type></entry>
<!--
      <entry>Time zone abbreviation</entry>
-->
      <entry>時間帯省略形</entry>
     </row>
     <row>
      <entry><structfield>utc_offset</structfield></entry>
      <entry><type>interval</type></entry>
<!--
      <entry>Offset from UTC (positive means east of Greenwich)</entry>
-->
      <entry>UTCからのオフセット(正はグリニッジより西側を意味する)</entry>
     </row>
     <row>
      <entry><structfield>is_dst</structfield></entry>
      <entry><type>boolean</type></entry>
<!--
      <entry>True if currently observing daylight savings</entry>
-->
      <entry>現在夏時間である場合に真</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

 </sect1>

 <sect1 id="view-pg-user">
  <title><structname>pg_user</structname></title>

  <indexterm zone="view-pg-user">
   <primary>pg_user</primary>
  </indexterm>

  <para>
<!--
   The view <structname>pg_user</structname> provides access to
   information about database users.  This is simply a publicly
   readable view of
   <link linkend="view-pg-shadow"><structname>pg_shadow</structname></link>
   that blanks out the password field.
-->
<structname>pg_user</structname>ビューはデータベースユーザに関する情報へのアクセスを提供します。
これはパスワードフィールドを隠蔽した<link linkend="view-pg-shadow"><structname>pg_shadow</structname></link>を公に読めるようにしたビューです。
  </para>

  <table>
<!--
   <title><structname>pg_user</> Columns</title>
-->
    <title><structname>pg_user</>の列</title>

  <tgroup cols="3">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>説明</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><structfield>usename</structfield></entry>
      <entry><type>name</type></entry>
<!--
      <entry>User name</entry>
-->
      <entry>ユーザ名</entry>
     </row>

     <row>
      <entry><structfield>usesysid</structfield></entry>
      <entry><type>oid</type></entry>
<!--
      <entry>ID of this user</entry>
-->
      <entry>このユーザのID</entry>
     </row>

     <row>
      <entry><structfield>usecreatedb</structfield></entry>
      <entry><type>bool</type></entry>
<!--
      <entry>User can create databases</entry>
-->
      <entry>ユーザはデータベースを作成可能です。</entry>
     </row>

     <row>
      <entry><structfield>usesuper</structfield></entry>
      <entry><type>bool</type></entry>
<!--
      <entry>User is a superuser</entry>
-->
      <entry>ユーザはスーパーユーザです。</entry>
     </row>

     <row>
      <entry><structfield>usecatupd</structfield></entry>
      <entry><type>bool</type></entry>
      <entry>
<!--
       User can update system catalogs.  (Even a superuser cannot do
       this unless this column is true.)
-->
       ユーザはシステムカタログを更新可能です。（スーパーユーザであってもこの列が真でなければ更新はできません。）
      </entry>
     </row>

     <row>
      <entry><structfield>userepl</structfield></entry>
      <entry><type>bool</type></entry>
      <entry>
<!--
       User can initiate streaming replication and put the system in and
       out of backup mode.
-->
ユーザはストリーミングレプリケーションを開始することができ、システムをバックアップモードにしたり、戻したりできます。
      </entry>
     </row>

     <row>
      <entry><structfield>passwd</structfield></entry>
      <entry><type>text</type></entry>
<!--
      <entry>Not the password (always reads as <literal>********</>)</entry>
-->
      <entry>パスワードでありません（常に<literal>********</>のように読まれます）</entry>
     </row>

     <row>
      <entry><structfield>valuntil</structfield></entry>
      <entry><type>abstime</type></entry>
<!--
      <entry>Password expiry time (only used for password authentication)</entry>
-->
      <entry>パスワードの有効期限（パスワード認証時のみ使用）</entry>
     </row>

     <row>
      <entry><structfield>useconfig</structfield></entry>
      <entry><type>text[]</type></entry>
<!--
      <entry>Session defaults for run-time configuration variables</entry>
-->
       <entry>実行時設定変数に対するセッションデフォルト</entry>  
     </row>
    </tbody>
   </tgroup>
  </table>

 </sect1>

 <sect1 id="view-pg-user-mappings">
  <title><structname>pg_user_mappings</structname></title>

  <indexterm zone="view-pg-user-mappings">
   <primary>pg_user_mappings</primary>
  </indexterm>


<!--
  <para>
   The view <structname>pg_user_mappings</structname> provides access
   to information about user mappings.  This is essentially a publicly
   readable view of
   <link linkend="catalog-pg-user-mapping"><structname>pg_user_mapping</structname></link>
   that leaves out the options field if the user has no rights to use
   it.
  </para>
-->
  <para>
<structname>pg_user_mappings</structname>ビューはユーザマッピングについての情報へのアクセスを提供します。
これはユーザが使用する権利を持っていないオプションフィールドを取り除いた、基本的には公開されていて読み取り可能な<link linkend="catalog-pg-user-mapping"><structname>pg_user_mapping</structname></link>のビューです。
  </para>

  <table>
   <title><structname>pg_user_mappings</> Columns</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structfield>umid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-user-mapping"><structname>pg_user_mapping</structname></link>.oid</literal></entry>

<!--
      <entry>OID of the user mapping</entry>

-->
      <entry>ユーザマッピングのOID</entry>
     </row>

     <row>
      <entry><structfield>srvid</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-foreign-server"><structname>pg_foreign_server</structname></link>.oid</literal></entry>
<!--
      <entry>
       The OID of the foreign server that contains this mapping
      </entry>
-->
      <entry>
       マッピングを含んでいる外部サーバのOID
      </entry>
     </row>

     <row>
      <entry><structfield>srvname</structfield></entry>
      <entry><type>name</type></entry>
      <entry><literal><link linkend="catalog-pg-foreign-server"><structname>pg_foreign_server</structname></link>.srvname</literal></entry>
<!--
      <entry>
       Name of the foreign server
      </entry>
-->
      <entry>
       外部サーバの名称
      </entry>
     </row>

     <row>
      <entry><structfield>umuser</structfield></entry>
      <entry><type>oid</type></entry>
      <entry><literal><link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.oid</literal></entry>
<!--
      <entry>OID of the local role being mapped, 0 if the user mapping is public</entry>
-->
      <entry>ローカルのマッピングされているロールのOID。ユーザマッピングが公開されている場合は0となります。</entry>
     </row>

     <row>
      <entry><structfield>usename</structfield></entry>
      <entry><type>name</type></entry>
      <entry></entry>
<!--
      <entry>Name of the local user to be mapped</entry>
-->
      <entry>マッピングされているローカルユーザの名前</entry>
     </row>

     <row>
      <entry><structfield>umoptions</structfield></entry>
      <entry><type>text[]</type></entry>
      <entry></entry>
<!--
      <entry>
       User mapping specific options, as <quote>keyword=value</>
       strings, if the current user is the owner of the foreign
       server, else null
      </entry>
-->
      <entry>
       もし現状のユーザが外部サーバの所有者であれば<quote>keyword=value</>文字列のようなユーザマッピングの特定オプション。他の場合はNULLとなります。</entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect1>


 <sect1 id="view-pg-views">
  <title><structname>pg_views</structname></title>

  <indexterm zone="view-pg-views">
   <primary>pg_views</primary>
  </indexterm>

  <para>
<!--
   The view <structname>pg_views</structname> provides access to
   useful information about each view in the database.
-->
   <structname>pg_views</structname>ビューはデータベース内のそれぞれのビューに関する有用な情報へのアクセスを提供します。
  </para>

  <table>
<!--
   <title><structname>pg_views</> Columns</title>
-->
   <title><structname>pg_views</>の列</title>

   <tgroup cols="4">
    <thead>
     <row>
<!--
      <entry>Name</entry>
      <entry>Type</entry>
      <entry>References</entry>
      <entry>Description</entry>
-->
      <entry>名前</entry>
      <entry>型</entry>
      <entry>参照先</entry>
      <entry>説明</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><structfield>schemaname</structfield></entry>
      <entry><type>name</type></entry>
      <entry><literal><link linkend="catalog-pg-namespace"><structname>pg_namespace</structname></link>.nspname</literal></entry>
<!--
      <entry>Name of schema containing view</entry>
-->
      <entry>ビューを持つスキーマ名</entry>
     </row>
     <row>
      <entry><structfield>viewname</structfield></entry>
      <entry><type>name</type></entry>
      <entry><literal><link linkend="catalog-pg-class"><structname>pg_class</structname></link>.relname</literal></entry>
<!--
      <entry>Name of view</entry>
-->
      <entry>ビュー名</entry>
     </row>
     <row>
      <entry><structfield>viewowner</structfield></entry>
      <entry><type>name</type></entry>
      <entry><literal><link linkend="catalog-pg-authid"><structname>pg_authid</structname></link>.rolname</literal></entry>
<!--
      <entry>Name of view's owner</entry>
-->
      <entry>ビューの所有者</entry>
     </row>
     <row>
      <entry><structfield>definition</structfield></entry>
      <entry><type>text</type></entry>
      <entry></entry>
<!--
      <entry>View definition (a reconstructed <command>SELECT</command> query)</entry>
-->
      <entry>ビュー定義（再構築されたSELECT問い合わせ）</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

 </sect1>

</chapter>
