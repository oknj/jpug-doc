<!-- doc/src/sgml/pgstandby.sgml -->

<refentry id="pgstandby">
 <indexterm zone="pgstandby">
  <primary>pg_standby</primary>
 </indexterm>

 <refmeta>
  <refentrytitle><application>pg_standby</application></refentrytitle>
  <manvolnum>1</manvolnum>
<!--
  <refmiscinfo>Application</refmiscinfo>
-->
  <refmiscinfo>アプリケーション</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>pg_standby</refname>
<!--
  <refpurpose>supports the creation of a <productname>PostgreSQL</productname> warm standby server</refpurpose>
-->
<refpurpose><productname>PostgreSQL</productname>ウォームスタンバイサーバの作成をサポートする</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
  <cmdsynopsis>
   <command>pg_standby</command>
   <arg rep="repeat"><replaceable>option</replaceable></arg>
   <arg choice="plain"><replaceable>archivelocation</replaceable></arg>
   <arg choice="plain"><replaceable>nextwalfile</replaceable></arg>
   <arg choice="plain"><replaceable>xlogfilepath</replaceable></arg>
   <arg choice="opt"><replaceable>restartwalfile</replaceable></arg>
  </cmdsynopsis>
 </refsynopsisdiv>

 <refsect1>
<!--
  <title>Description</title>
-->
  <title>説明</title>

 <para>
<!--
  <application>pg_standby</> supports creation of a <quote>warm standby</>
  database server.  It is designed to be a production-ready program, as well
  as a customizable template should you require specific modifications.
-->
<application>pg_standby</>は<quote>ウォームスタンバイ</>データベースサーバの作成をサポートします。
これは、特定の変更が必要となるカスタマイズ可能なテンプレートを持ち、実運用環境で利用可能なプログラムとして設計されています。
 </para>

 <para>
<!--
  <application>pg_standby</> is designed to be a waiting
  <varname>restore_command</>, which is needed to turn a standard
  archive recovery into a warm standby operation.  Other
  configuration is required as well, all of which is described in the main
  server manual (see <xref linkend="warm-standby">).
-->
<application>pg_standby</>は、標準のアーカイブリカバリからウォームスタンバイに切り替えるために必要な待機コマンド<varname>restore_command</>として設計されています。
他の設定も必要ですが、それらはすべてメインのサーバマニュアルで説明されています（<xref linkend="warm-standby">を参照してください）。
 </para>

  <para>
<!--
   To configure a standby
   server to use <application>pg_standby</>, put this into its
   <filename>recovery.conf</filename> configuration file:
-->
<application>pg_standby</>を使用して待機サーバを構築するには、<filename>recovery.conf</filename>設定ファイルに以下を追加します。
<programlisting>
restore_command = 'pg_standby <replaceable>archiveDir</> %f %p %r'
</programlisting>
<!--
   where <replaceable>archiveDir</> is the directory from which WAL segment
   files should be restored.
-->
ここで<replaceable>archiveDir</>は、リストアすべきWALセグメントファイルが存在するディレクトリです。
  </para>
  <para>
<!--
   If <replaceable>restartwalfile</> is specified, normally by using the
   <literal>%r</literal> macro, then all WAL files logically preceding this
   file will be removed from <replaceable>archivelocation</>. This minimizes
   the number of files that need to be retained, while preserving
   crash-restart capability.  Use of this parameter is appropriate if the
   <replaceable>archivelocation</> is a transient staging area for this
   particular standby server, but <emphasis>not</> when the
   <replaceable>archivelocation</> is intended as a long-term WAL archive area.
-->
通常、<literal>%r</literal>マクロを使用して<replaceable>restartwalfile</>が指定された場合、このファイルより論理的に前のすべてのWALファイルは<replaceable>archivelocation</>から削除されます。
これによってクラッシュからの再起動ができることを担保しつつ、保持する必要があるファイルの数を最小化します。
<replaceable>archivelocation</>が、この特定の待機サーバで一時使用用の領域である場合、このパラメータの使用は適切です。
しかし、<replaceable>archivelocation</>が長期間のWAL保管を目的とした領域である場合には、<emphasis>不適切</>となります。
  </para>
  <para>
<!--
   <application>pg_standby</application> assumes that
   <replaceable>archivelocation</> is a directory readable by the
   server-owning user.  If <replaceable>restartwalfile</> (or <literal>-k</>)
   is specified,
   the <replaceable>archivelocation</> directory must be writable too.
-->
<application>pg_standby</application>は、<replaceable>archivelocation</>がサーバを所有するユーザから読み取り可能なディレクトリであることを前提とします。
また、<replaceable>restartwalfile</>（または<literal>-k</>）が指定される場合、<replaceable>archivelocation</>ディレクトリは書き込み可能である必要があります。
  </para>
  <para>
<!--
   There are two ways to fail over to a <quote>warm standby</> database server
   when the master server fails:
-->
マスタサーバが失敗した時の<quote>ウォームスタンバイ</>データベースサーバへフェイルオーバーする方法には、以下の2つがあります。

   <variablelist>
    <varlistentry>
<!--
     <term>Smart Failover</term>
-->
     <term>スマートフェイルオーバー</term>
     <listitem>
      <para>
<!--
       In smart failover, the server is brought up after applying all WAL
       files available in the archive. This results in zero data loss, even if
       the standby server has fallen behind, but if there is a lot of
       unapplied WAL it can be a long time before the standby server becomes
       ready. To trigger a smart failover, create a trigger file containing
       the word <literal>smart</>, or just create it and leave it empty.
-->
スマートフェイルオーバーは、アーカイブとして利用可能なすべてのWALファイルを適用した後に、待機サーバが準備完了となります。
待機サーバが遅れてもデータロスとなることは全くありませんが、適用されていないWALが大量にある場合、待機サーバが利用可能になるまでには長時間かかるかもしれません。
スマートフェイルオーバーのトリガとなるためには、単語<literal>smart</>を含むトリガファイルを作成するか、単に空のファイルを作成してください。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
<!--
     <term>Fast Failover</term>
-->
     <term>ファストフェイルオーバー</term>
     <listitem>
      <para>
<!--
       In fast failover, the server is brought up immediately. Any WAL files
       in the archive that have not yet been applied will be ignored, and
       all transactions in those files are lost. To trigger a fast failover,
       create a trigger file and write the word <literal>fast</> into it.
       <application>pg_standby</> can also be configured to execute a fast
       failover automatically if no new WAL file appears within a defined
       interval.
-->
ファストフェイルオーバーでは、待機サーバはすぐに準備完了となります。
アーカイブ内の未適用のWALファイルは無視され、それらのファイルに記録されていたすべてのトランザクションは失われます。
ファストフェイルオーバーのトリガとなるためには、トリガファイルを作成し、単語<literal>fast</>を書き込んでください。
また、指定した時間内に新しいWALファイルが出現しない場合に、自動的にファストフェイルオーバーを実行するように<application>pg_standby</>を設定することもできます。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>

 </refsect1>

 <refsect1>
<!--
  <title>Options</title>
-->
  <title>オプション</title>

   <para>
<!--
    <application>pg_standby</application> accepts the following command-line arguments:
-->
<application>pg_standby</application>は、以下のコマンドライン引数を受け付けます。

    <variablelist>

     <varlistentry>
      <term><option>-c</option></term>
      <listitem>
       <para>
<!--
        Use <literal>cp</> or <literal>copy</> command to restore WAL files
        from archive.  This is the only supported behavior so this option is useless.
-->
アーカイブからWALファイルをリストアするために <literal>cp</>または<literal>copy</>コマンドを使用します。
これが唯一サポートされている動作ですので、このオプションには意味はありません。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-d</option></term>
      <listitem>
       <para>
<!--
        Print lots of debug logging output on <filename>stderr</>.
-->
<filename>stderr</>に大量のデバッグログを出力します。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-k</option></term>
      <listitem>
       <para>
<!--
        Remove files from <replaceable>archivelocation</replaceable> so that
        no more than this many WAL files before the current one are kept in the
        archive.  Zero (the default) means not to remove any files from
        <replaceable>archivelocation</replaceable>.
        This parameter will be silently ignored if
        <replaceable>restartwalfile</replaceable> is specified, since that
        specification method is more accurate in determining the correct
        archive cut-off point.
        Use of this parameter is <emphasis>deprecated</> as of
        <productname>PostgreSQL</> 8.3; it is safer and more efficient to
        specify a <replaceable>restartwalfile</replaceable> parameter.  A too
        small setting could result in removal of files that are still needed
        for a restart of the standby server, while a too large setting wastes
        archive space.
-->
<replaceable>archivelocation</replaceable>からファイルを削除することによって、現在のWALファイルよりも古いWALファイルが、ここで指定した数以上アーカイブ内に保持されないようにします。
ゼロ（デフォルト）は<replaceable>archivelocation</replaceable>からファイルをまったく削除しないことを意味します。
<replaceable>restartwalfile</replaceable>が指定された場合、このパラメータは警告なく無視されます。
アーカイブ内の正確な切り捨て点を決定する際には、そちらの指定方法の方がより正確だからです。
<productname>PostgreSQL</> 8.3の時点では、<replaceable>restartwalfile</replaceable>パラメータによる指定の方が安全、かつ効率的であるため、このパラメータの使用は<emphasis>廃止予定</>です。
あまりにも小さな値を設定すると、待機サーバの再起動に必要とするファイルも削除されてしまう可能性があり、一方であまりに大きな値を設定するとアーカイブ領域を無駄に消費します。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-r</option> <replaceable>maxretries</></term>
      <listitem>
       <para>
<!--
        Set the maximum number of times to retry the copy command if
        it fails (default 3). After each failure, we wait for
        <replaceable>sleeptime</> * <replaceable>num_retries</>
        so that the wait time increases progressively.  So by default,
        we will wait 5 secs, 10 secs, then 15 secs before reporting
        the failure back to the standby server. This will be
        interpreted as end of recovery and the standby will come
        up fully as a result.
-->
コピーが失敗した場合のリトライ回数の最大値を設定します（デフォルトは3です）。
失敗する度に、失敗回数に比例して待ち時間が増加するように<replaceable>sleeptime</> * <replaceable>num_retries</>秒間待機します。
そのため、デフォルトでは待機サーバに失敗を返す前に、5秒、10秒、15秒待機することになります。
これはリカバリの完了と解釈され、その結果としてスタンバイが完全に起動するでしょう。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-s</option> <replaceable>sleeptime</></term>
      <listitem>
       <para>
<!--
        Set the number of seconds (up to 60, default 5) to sleep between
        tests to see if the WAL file to be restored is available in
        the archive yet.  The default setting is not necessarily
        recommended; consult <xref linkend="warm-standby"> for discussion.
-->
リストアすべきWALがアーカイブ内で見つかるかどうか、その確認をする間隔を秒単位で設定します（最大60秒、デフォルト5秒）。
デフォルト設定は必ずしも推奨するものではありません。
<xref linkend="warm-standby">を参考に検討してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-t</option> <replaceable>triggerfile</></term>
      <listitem>
       <para>
<!--
        Specify a trigger file whose presence should cause failover.
        It is recommended that you use a structured file name to
        avoid confusion as to which server is being triggered
        when multiple servers exist on the same system; for example
        <filename>/tmp/pgsql.trigger.5432</>.
-->
存在すればフェイルオーバー発生のきっかけとなるトリガファイルを指定します。
同一システムに複数のサーバが存在する場合、たとえば<filename>/tmp/pgsql.trigger.5432</>などのように構造を持ったファイル名を使用して、どのサーバのトリガか混乱しないようにすることを推奨します。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-V</></term>
      <term><option>--version</></term>
      <listitem>
       <para>
<!--
        Print the <application>pg_standby</application> version and exit.
-->
<application>pg_standby</application>のバージョンを表示して終了します。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-w</option> <replaceable>maxwaittime</></term>
      <listitem>
       <para>
<!--
        Set the maximum number of seconds to wait for the next WAL file,
        after which a fast failover will be performed.
        A setting of zero (the default) means wait forever.
        The default setting is not necessarily recommended;
        consult <xref linkend="warm-standby"> for discussion.
-->
ファストフェイルオーバー実行後に、次のWALファイルを待機する最大秒数を設定します。
ゼロ（デフォルト）に設定することは永久に待機することを意味します。
デフォルトの設定は必ずしも推奨されません。
<xref linkend="warm-standby">を参考にして検討してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-?</></term>
      <term><option>--help</></term>
      <listitem>
       <para>
<!--
        Show help about <application>pg_standby</application> command line
        arguments, and exit.
-->
<application>pg_standby</application>のコマンドライン引数に関するヘルプを表示して終了します。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>

 </refsect1>

 <refsect1>
<!--
  <title>Notes</title>
-->
  <title>注釈</title>

  <para>
<!--
   <application>pg_standby</application> is designed to work with
   <productname>PostgreSQL</> 8.2 and later.
-->
<application>pg_standby</application>は、<productname>PostgreSQL</> 8.2以降で動作するよう設計されています。
  </para>
  <para>
<!--
   <productname>PostgreSQL</> 8.3 provides the <literal>%r</literal> macro,
   which is designed to let <application>pg_standby</application> know the
   last file it needs to keep.  With <productname>PostgreSQL</> 8.2, the
   <literal>-k</literal> option must be used if archive cleanup is
   required.  This option remains available in 8.3, but its use is deprecated.
-->
<productname>PostgreSQL</> 8.3は、保持しておく必要がある最後のWALファイルを<application>pg_standby</application>に渡すための<literal>%r</literal>マクロを提供しています。
<productname>PostgreSQL</> 8.2では、アーカイブファイルの削除が必要な場合<literal>-k</literal>オプションを使用しなければなりません。
このオプションは8.3でもまだ利用可能ですが、非推奨です。
  </para>
  <para>
<!--
   <productname>PostgreSQL</> 8.4 provides the
   <varname>recovery_end_command</> option.  Without this option
   a leftover trigger file can be hazardous.
-->
<productname>PostgreSQL</> 8.4は、<varname>recovery_end_command</>オプションを提供しています。
このオプションを指定しないと、残ったトリガファイルが問題を引き起こす可能性があります。
  </para>

  <para>
<!--
   <application>pg_standby</application> is written in C and has an
   easy-to-modify source code, with specifically designated sections to modify
   for your own needs
-->
<application>pg_standby</application>はC言語で書かれており、必要に応じて修正すべき部分が明確に示されているので、修正の容易なソースコードとなっています。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>Examples</title>
-->
  <title>例</title>

<!--
  <para>On Linux or Unix systems, you might use:
-->
  <para>LinuxまたはUnixシステムでは以下のように使用できます。

<programlisting>
archive_command = 'cp %p .../archive/%f'

restore_command = 'pg_standby -d -s 2 -t /tmp/pgsql.trigger.5442 .../archive %f %p %r 2>>standby.log'

recovery_end_command = 'rm -f /tmp/pgsql.trigger.5442'
</programlisting>
<!--
   where the archive directory is physically located on the standby server,
   so that the <varname>archive_command</> is accessing it across NFS,
   but the files are local to the standby (enabling use of <literal>ln</>).
   This will:
-->
ここでは、アーカイブディレクトリは物理的には待機サーバ上にあります。
そのため、<varname>archive_command</>はNFS経由でアーカイブディレクトリにアクセスします。
しかし、このファイルは（<literal>ln</>の使用を有効にした）待機サーバではローカルです。
そのため、以下のようになります。
  <itemizedlist>
   <listitem>
    <para>
<!--
     produce debugging output in <filename>standby.log</>
-->
<filename>standby.log</>にデバッグ用の出力を書き出します。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     sleep for 2 seconds between checks for next WAL file availability
-->
次のWALファイルが利用可能になったかどうかを確認するまで2秒間待機します。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     stop waiting only when a trigger file called
     <filename>/tmp/pgsql.trigger.5442</> appears,
     and perform failover according to its content
-->
<filename>/tmp/pgsql.trigger.5442</>というトリガファイルが出現すると待機状態を解除し、トリガファイルの内容に従ってフェイルオーバーを実行します。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     remove the trigger file when recovery ends
-->
復旧が終了した時点で、トリガファイルを削除します。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     remove no-longer-needed files from the archive directory
-->
必要なくなったファイルをアーカイブディレクトリから削除します。
    </para>
   </listitem>
  </itemizedlist>
  </para>

<!--
  <para>On Windows, you might use:
-->
  <para>Windowsでは以下のように使用できます。

<programlisting>
archive_command = 'copy %p ...\\archive\\%f'

restore_command = 'pg_standby -d -s 5 -t C:\pgsql.trigger.5442 ...\archive %f %p %r 2>>standby.log'

recovery_end_command = 'del C:\pgsql.trigger.5442'
</programlisting>
<!--
   Note that backslashes need to be doubled in the
   <varname>archive_command</>, but <emphasis>not</emphasis> in the
   <varname>restore_command</> or <varname>recovery_end_command</>.
   This will:
-->
<varname>archive_command</>ではバックスラッシュを二重にする必要がありますが、<varname>restore_command</>や<varname>recovery_end_command</>では<emphasis>必要ない</emphasis>ことに注意してください。
これは以下のような内容になります。
  <itemizedlist>
   <listitem>
    <para>
<!--
     use the <literal>copy</> command to restore WAL files from archive
-->
アーカイブからWALファイルをリストアするために<literal>copy</>コマンドを使用します。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     produce debugging output in <filename>standby.log</>
-->
<filename>standby.log</>にデバッグ用の出力を書き出します。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     sleep for 5 seconds between checks for next WAL file availability
-->
次のWALファイルが利用可能になったかどうかを確認するまで5秒間待機します。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     stop waiting only when a trigger file called
     <filename>C:\pgsql.trigger.5442</> appears,
     and perform failover according to its content
-->
<filename>C:\pgsql.trigger.5442</>というトリガファイルが出現すると待機を中止し、トリガファイルの内容に従ってフェイルオーバーを実行します。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     remove the trigger file when recovery ends
-->
復旧が終了した時点で、トリガファイルを削除します。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     remove no-longer-needed files from the archive directory
-->
必要なくなったファイルをアーカイブディレクトリから削除します。
    </para>
   </listitem>
  </itemizedlist>
  </para>

  <para>
<!--
   The <literal>copy</> command on Windows sets the final file size
   before the file is completely copied, which would ordinarily confuse
   <application>pg_standby</application>.  Therefore
   <application>pg_standby</application> waits <literal>sleeptime</>
   seconds once it sees the proper file size.  GNUWin32's <literal>cp</>
   sets the file size only after the file copy is complete.
-->
Windowsの<literal>copy</>コマンドは、ファイルが完全にコピーされる前に、最終的なファイルサイズを設定します。
これは通常<application>pg_standby</application>を誤動作させます。
したがって、<application>pg_standby</application>は適切なファイルサイズを見てから、いったん<literal>sleeptime</>秒待ちます。
GNUWin32の<literal>cp</>は、ファイルコピーが完了した後にだけ、ファイルサイズを設定します。
  </para>

  <para>
<!--
   Since the Windows example uses <literal>copy</> at both ends, either
   or both servers might be accessing the archive directory across the
   network.
-->
Windowsの例では両方のサーバで<literal>copy</>を使用していますので、どちらか一方、または両サーバがネットワーク経由でアーカイブディレクトリにアクセスすることになります。
  </para>

 </refsect1>

 <refsect1>
<!--
  <title>Author</title>
-->
  <title>作者</title>

  <para>
   Simon Riggs <email>simon@2ndquadrant.com</email>
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>See Also</title>
-->
  <title>関連項目</title>

  <simplelist type="inline">
   <member><xref linkend="pgarchivecleanup"></member>
  </simplelist>
 </refsect1>
</refentry>
