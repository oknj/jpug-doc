<!-- doc/src/sgml/pgbench.sgml -->

<refentry id="pgbench">
 <indexterm zone="pgbench">
  <primary>pgbench</primary>
 </indexterm>

 <refmeta>
  <refentrytitle><application>pgbench</application></refentrytitle>
<!--
  <refmiscinfo>Application</refmiscinfo>
-->
  <refmiscinfo>アプリケーション</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>pgbench</refname>
<!--
  <refpurpose>run a benchmark test on <productname>PostgreSQL</productname></refpurpose>
-->
  <refpurpose><productname>PostgreSQL</productname>に対してベンチマーク試験を行う</refpurpose>
 </refnamediv>

 <indexterm zone="pgbench">
  <primary>pgbench</primary>
 </indexterm>

 <refsynopsisdiv>
  <cmdsynopsis>
   <command>pgbench</command>
   <arg choice="plain"><option>-i</option></arg>
   <arg rep="repeat"><replaceable>option</replaceable></arg>
   <arg choice="opt"><replaceable>dbname</replaceable></arg>
  </cmdsynopsis>
  <cmdsynopsis>
   <command>pgbench</command>
   <arg rep="repeat"><replaceable>option</replaceable></arg>
   <arg choice="opt"><replaceable>dbname</replaceable></arg>
  </cmdsynopsis>
 </refsynopsisdiv>

 <refsect1>
<!--
  <title>Description</title>
-->
  <title>説明</title>
 <para>
<!--
  <application>pgbench</application> is a simple program for running benchmark
  tests on <productname>PostgreSQL</>.  It runs the same sequence of SQL
  commands over and over, possibly in multiple concurrent database sessions,
  and then calculates the average transaction rate (transactions per second).
  By default, <application>pgbench</application> tests a scenario that is
  loosely based on TPC-B, involving five <command>SELECT</>,
  <command>UPDATE</>, and <command>INSERT</> commands per transaction.
  However, it is easy to test other cases by writing your own transaction
  script files.
-->
<application>pgbench</application>は<productname>PostgreSQL</>上でベンチマーク試験を行う単純なプログラムです。
これは同一のSQLコマンドの並びを何度も実行します。複数の同時実行データベースセッションで実行することもできます。
そして、トランザクションの速度（1秒当たりのトランザクション数）の平均を計算します。
デフォルトで<application>pgbench</application>は、1トランザクション当たり5つの<command>SELECT</>、<command>UPDATE</>、<command>INSERT</>コマンドを含むおおよそTPC-Bに基いたシナリオを試験します。
しかし、独自のトランザクションスクリプトファイルを作成することで他の試験ケースを簡単に実行することができます。
 </para>

 <para>
<!--
  Typical output from pgbench looks like:
-->
pgbenchの典型的な出力を以下に示します。

<screen>
transaction type: TPC-B (sort of)
scaling factor: 10
query mode: simple
number of clients: 10
number of threads: 1
number of transactions per client: 1000
number of transactions actually processed: 10000/10000
tps = 85.184871 (including connections establishing)
tps = 85.296346 (excluding connections establishing)
</screen>

<!--
  The first six lines report some of the most important parameter
  settings.  The next line reports the number of transactions completed
  and intended (the latter being just the product of number of clients
  and number of transactions per client); these will be equal unless the run
  failed before completion.  (In <option>-T</> mode, only the actual
  number of transactions is printed.)
  The last two lines report the number of transactions per second,
  figured with and without counting the time to start database sessions.
-->
最初の6行はいくつかの最重要パラメータの設定を表示しています。
次行が完了トランザクション数と予定トランザクション数です（後者は単なるクライアント数とクライアント毎のトランザクション数の積算結果です。）
実行が完了する前に失敗しない限りこれは等しくなります。
(<option>-T</>モードでは、トランザクションの実際の数が表示されます)
最後の2行は、データベースセッションを開始するための時間を含める場合と含めない場合の1秒当たりのトランザクション数を示します。
 </para>

  <para>
<!--
   The default TPC-B-like transaction test requires specific tables to be
   set up beforehand.  <application>pgbench</> should be invoked with
   the <option>-i</> (initialize) option to create and populate these
   tables.  (When you are testing a custom script, you don't need this
   step, but will instead need to do whatever setup your test needs.)
   Initialization looks like:
-->
デフォルトのTPC-Bと似たトランザクション試験では、あらかじめ設定する特定のテーブルが必要です。
これらのテーブルを作成し、データを投入するためには、<option>-i</>(初期化)オプションを付けて<application>pgbench</>を呼び出さなければなりません。
(独自スクリプトを試験する場合、この手順は必要ありません。
しかし代わりに試験に必要な何らかの設定を行わなければならないでしょう。)
初期化は以下のようになります。

<programlisting>
pgbench -i <optional> <replaceable>other-options</> </optional> <replaceable>dbname</>
</programlisting>

<!--
   where <replaceable>dbname</> is the name of the already-created
   database to test in.  (You may also need <option>-h</>,
   <option>-p</>, and/or <option>-U</> options to specify how to
   connect to the database server.)
-->
ここで<replaceable>dbname</>は試験用に前もって作成されたデータベースの名前です。
（またデータベースサーバの接続方法を指定するために、<option>-h</>、<option>-p</>、<option>-U</>が必要になるかもしれません。）
  </para>

  <caution>
   <para>
<!--
    <literal>pgbench -i</> creates four tables <structname>pgbench_accounts</>,
    <structname>pgbench_branches</>, <structname>pgbench_history</>, and
    <structname>pgbench_tellers</>,
    destroying any existing tables of these names.
    Be very careful to use another database if you have tables having these
    names!
-->
<literal>pgbench -i</>は4つのテーブル<structname>pgbench_accounts</>、<structname>pgbench_branches</>、<structname>pgbench_history</>、<structname>pgbench_tellers</>を作成します。
もしあればこうした名前のテーブルは破壊されます。
もし同じ名前のテーブルが存在する場合にはよく注意してください。
   </para>
  </caution>

  <para>
<!--
   At the default <quote>scale factor</> of 1, the tables initially
   contain this many rows:
-->
デフォルトの<quote>倍数</>の1では、テーブルは初期状態で以下の行数を含みます。
<screen>
table                   # of rows
---------------------------------
pgbench_branches        1
pgbench_tellers         10
pgbench_accounts        100000
pgbench_history         0
</screen>
<!--
   You can (and, for most purposes, probably should) increase the number
   of rows by using the <option>-s</> (scale factor) option.  The
   <option>-F</> (fillfactor) option might also be used at this point.
-->
<option>-s</>（倍数）オプションを使用して行数を増加させることができます（また、ほとんどの目的ではおそらく増加させるべきです）。
また、<option>-F</> （フィルファクタ）オプションをここで使用しても構いません。
  </para>

  <para>
<!--
   Once you have done the necessary setup, you can run your benchmark
   with a command that doesn't include <option>-i</>, that is
-->
一度この必要な設定を行った後、以下のように<option>-i</>を持たないコマンドでベンチマークを行うことができます。

<programlisting>
pgbench <optional> <replaceable>options</> </optional> <replaceable>dbname</>
</programlisting>

<!--
   In nearly all cases, you'll need some options to make a useful test.
   The most important options are <option>-c</> (number of clients),
   <option>-t</> (number of transactions), <option>-T</> (time limit),
   and <option>-f</> (specify a custom script file).
   See below for a full list.
-->
ほとんどすべての場合、有用な試験とするためにいくつかのオプションが必要になります。
最重要オプションは<option>-c</>（クライアント数）、<option>-t</>（トランザクション数）、<option>-T</> (制限時間)、<option>-f</>（独自スクリプトファイルの指定）です。
以下の全一覧を参照してください。
  </para>

 </refsect1>

 <refsect1>
<!--
  <title>Options</title>
-->
  <title>オプション</title>

  <para>
<!--
   The following is divided into three subsections: Different options are used
   during database initialization and while running benchmarks, some options
   are useful in both cases.
-->
以下では、データベース初期化時に使用されるオプション、ベンチマーク実行時に使用されるオプション、どちらの場合でも使われるオプションの３つに分けて説明します。
  </para>

 <refsect2 id="pgbench-init-options">
<!--
  <title>Initialization Options</title>
-->
  <title>初期化用のオプション</title>

   <para>
<!--
    <application>pgbench</application> accepts the following command-line
    initialization arguments:
-->
<application>pgbench</application>は以下の初期化用のコマンドライン引数を受け付けます。

    <variablelist>

     <varlistentry>
      <term><option>-i</option></term>
      <term><option>--initialize</option></term>
      <listitem>
       <para>
<!--
        Required to invoke initialization mode.
-->
初期化モードを呼び出すために必要です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-F</option> <replaceable>fillfactor</></term>
      <term><option>--fillfactor=</option><replaceable>fillfactor</></term>
      <listitem>
       <para>
<!--
        Create the <structname>pgbench_accounts</>,
        <structname>pgbench_tellers</> and
        <structname>pgbench_branches</> tables with the given fillfactor.
        Default is 100.
-->
指定したフィルファクタで<structname>pgbench_accounts</>、<structname>pgbench_tellers</>、<structname>pgbench_branches</>テーブルを作成します。
デフォルトは100です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-n</option></term>
      <term><option>--no-vacuum</option></term>
      <listitem>
       <para>
<!--
        Perform no vacuuming after initialization.
-->
初期化の後にバキューム処理を行いません。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-q</option></term>
      <term><option>--quiet</option></term>
      <listitem>
       <para>
<!--
        Switch logging to quiet mode, producing only one progress message per 5
        seconds. The default logging prints one message each 100000 rows, which
        often outputs many lines per second (especially on good hardware).
-->
ログ処理を、5秒に１つの進行メッセージのみを生成する静寂モードに切り替えます。
デフォルトのログ処理では、10000行毎にメッセージを１つ出力し、（特に優れたハードウェアでは）1秒当たりに多くのメッセージを出力します。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-s</option> <replaceable>scale_factor</></term>
      <term><option>--scale=</option><replaceable>scale_factor</></term>
      <listitem>
       <para>
<!--
        Multiply the number of rows generated by the scale factor.
        For example, <literal>-s 100</> will create 10,000,000 rows
        in the <structname>pgbench_accounts</> table. Default is 1.
        When the scale is 20,000 or larger, the columns used to
        hold account identifiers (<structfield>aid</structfield> columns)
        will switch to using larger integers (<type>bigint</type>),
        in order to be big enough to hold the range of account
        identifiers.
-->
この倍率で生成される行数を積算します。
例えば、<literal>-s 100</>は <structname>pgbench_accounts</>テーブルに10,000,000行を生成することを意味します。
デフォルトは1です。
この倍率が20000以上になると、アカウント識別子の範囲を保持できる程度に大きくなるように、アカウント識別子を保持するために使用される列（<structfield>aid</structfield>列）はより大きな整数（<type>bigint</type>）を使用するように切り替わります。

       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--foreign-keys</option></term>
      <listitem>
       <para>
<!--
        Create foreign key constraints between the standard tables.
-->
標準テーブル間で外部キー制約を作成します。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--index-tablespace=<replaceable>index_tablespace</replaceable></option></term>
      <listitem>
       <para>
<!--
        Create indexes in the specified tablespace, rather than the default
        tablespace.
-->
デフォルトのテーブル空間ではなく、指定したテーブル空間の中にインデックスを作成します。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--tablespace=<replaceable>tablespace</replaceable></option></term>
      <listitem>
       <para>
<!--
        Create tables in the specified tablespace, rather than the default
        tablespace.
-->
デフォルトのテーブル空間ではなく、指定したテーブル空間の中にテーブルを作成します。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--unlogged-tables</option></term>
      <listitem>
       <para>
<!--
        Create all tables as unlogged tables, rather than permanent tables.
-->
永続テーブルではなくログを取らないテーブルとしてテーブルを作成します。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--unlogged-tables</option></term>
      <listitem>
       <para>
        Create all tables as unlogged tables, rather than permanent tables.
       </para>
      </listitem>
     </varlistentry>

    </variablelist>
   </para>

 </refsect2>

 <refsect2 id="pgbench-run-options">
<!--
  <title>Benchmarking Options</title>
-->
  <title>ベンチマーク用オプション</title>

   <para>
<!--
    <application>pgbench</application> accepts the following command-line
    benchmarking arguments:
-->
<application>pgbench</application>は以下のベンチマーク用コマンドライン引数を受け付けます。

    <variablelist>

     <varlistentry>
      <term><option>-c</option> <replaceable>clients</></term>
      <term><option>--client=</option><replaceable>clients</></term>
      <listitem>
       <para>
<!--
        Number of clients simulated, that is, number of concurrent database
        sessions.  Default is 1.
-->
模擬するクライアント数、つまり、同時に実行されるデータベースセッション数です。
デフォルトは1です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-C</option></term>
      <term><option>--connect</option></term>
      <listitem>
       <para>
<!--
        Establish a new connection for each transaction, rather than
        doing it just once per client session.
        This is useful to measure the connection overhead.
-->
各クライアントセッションが一度だけ接続を確立するのではなく、各トランザクションが新しい接続を確立します。
これは接続オーバーヘッドを測定する場合に有用です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-d</option></term>
      <term><option>--debug</option></term>
      <listitem>
       <para>
<!--
        Print debugging output.
-->
デバッグ用出力を表示します。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-D</option> <replaceable>varname</><literal>=</><replaceable>value</></term>
      <term><option>--define=</option><replaceable>varname</><literal>=</><replaceable>value</></term>
      <listitem>
       <para>
<!--
        Define a variable for use by a custom script (see below).
        Multiple <option>-D</> options are allowed.
-->
独自スクリプト（後述）で使用される変数を定義します。
複数の<option>-D</>オプションを使用することができます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-f</option> <replaceable>filename</></term>
      <term><option>--file=</option><replaceable>filename</></term>
      <listitem>
       <para>
<!--
        Read transaction script from <replaceable>filename</>.
        See below for details.
        <option>-N</option>, <option>-S</option>, and <option>-f</option>
        are mutually exclusive.
-->
トランザクションスクリプトを<replaceable>filename</>から読み取ります。
詳細は後で説明します。
<option>-N</option>、<option>-S</option>、<option>-f</option>は互いに排他的です。

       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-j</option> <replaceable>threads</></term>
      <term><option>--jobs=</option><replaceable>threads</></term>
      <listitem>
       <para>
<!--
        Number of worker threads within <application>pgbench</application>.
        Using more than one thread can be helpful on multi-CPU machines.
        The number of clients must be a multiple of the number of threads,
        since each thread is given the same number of client sessions to manage.
        Default is 1.
-->
<application>pgbench</application>内のワーカスレッド数です。
複数のスレッドを使用することはマルチCPUマシンで有用になります。
各スレッドには管理するクライアントセッションを同じ数与えられますので、クライアント数はスレッド数の倍数でなければなりません。
デフォルトは1です。

       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-l</option></term>
      <term><option>--log</option></term>
      <listitem>
       <para>
<!--
        Write the time taken by each transaction to a log file.
        See below for details.
-->
各トランザクションで費やした時間をログファイルに書き出します。
後で詳細を説明します。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-M</option> <replaceable>querymode</></term>
      <term><option>--protocol=</option><replaceable>querymode</></term>
      <listitem>
       <para>
<!--
        Protocol to use for submitting queries to the server:
-->
サーバへ問い合わせを送信するために使用するプロトコルです。
          <itemizedlist>
           <listitem>
<!--
            <para><literal>simple</>: use simple query protocol.</para>
-->
           <para><literal>simple</>: 簡易問い合わせプロトコルを使用します。</para>
           </listitem>
           <listitem>
<!--
            <para><literal>extended</>: use extended query protocol.</para>
-->
           <para><literal>extended</>: 拡張問い合わせプロトコルを使用します。</para>
           </listitem>
           <listitem>
<!--
            <para><literal>prepared</>: use extended query protocol with prepared statements.</para>
-->
<para>プリペアドステートメントを伴う拡張問い合わせプロトコルを使用します。</para>
           </listitem>
          </itemizedlist>
<!--
        The default is simple query protocol.  (See <xref linkend="protocol">
        for more information.)
-->
デフォルトは簡易問い合わせプロトコルです。
（詳しい情報は<xref linkend="protocol">を参照してください）
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-n</option></term>
      <term><option>--no-vacuum</option></term>
      <listitem>
       <para>
<!--
        Perform no vacuuming before running the test.
        This option is <emphasis>necessary</>
        if you are running a custom test scenario that does not include
        the standard tables <structname>pgbench_accounts</>,
        <structname>pgbench_branches</>, <structname>pgbench_history</>, and
        <structname>pgbench_tellers</>.
-->
試験を実行する前にバキュームを行いません。
<structname>pgbench_accounts</>、<structname>pgbench_branches</>、<structname>pgbench_history</>、
<structname>pgbench_tellers</>標準テーブルを含まない独自試験シナリオを実行する場合、このオプションは<emphasis>必要</>です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-N</option></term>
      <term><option>--skip-some-updates</option></term>
      <listitem>
       <para>
<!--
        Do not update <structname>pgbench_tellers</> and
        <structname>pgbench_branches</>.
        This will avoid update contention on these tables, but
        it makes the test case even less like TPC-B.
-->
<structname>pgbench_tellers</>と<structname>pgbench_branches</>を更新しません。
これは両テーブル上の重度の更新の競合を防ぎますが、TPC-Bのような試験ケースを行わなくなります。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-P</option> <replaceable>sec</></term>
      <term><option>--progress=</option><replaceable>sec</></term>
      <listitem>
       <para>
<!--
        Show progress report every <literal>sec</> seconds.  The report
        includes the time since the beginning of the run, the tps since the
        last report, and the transaction latency average and standard
        deviation since the last report.  Under throttling (<option>-R</>),
        the latency is computed with respect to the transaction scheduled
        start time, not the actual transaction beginning time, thus it also
        includes the average schedule lag time.
-->
<literal>sec</>秒毎の進捗レポートを表示します。レポートには起動からの経過時間、前回レポート時からのtps、前回レポート時からのトランザクションの平均待ち時間、標準偏差を含んでいます。
(<option>-R</>)オプションによる制限下では、待ち時間はトランザクションの実開始時間ではなく、予定開始時間で算出されていますので、平均予定遅延時間が含まれています。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-r</option></term>
      <term><option>--report-latencies</option></term>
      <listitem>
       <para>
<!--
        Report the average per-statement latency (execution time from the
        perspective of the client) of each command after the benchmark
        finishes.  See below for details.
-->
ベンチマーク完了後の各コマンドにおけるステートメント毎の平均レイテンシ(クライアントから見た実行時間)を報告します。詳しくは下を参照してください。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-R</option> <replaceable>rate</></term>
      <term><option>--rate=</option><replaceable>rate</></term>
      <listitem>
       <para>
<!--
        Execute transactions targeting the specified rate instead of running
        as fast as possible (the default).  The rate is given in transactions
        per second.  If the targeted rate is above the maximum possible rate,
        the rate limit won't impact the results.
-->
トランザクションを可能な限り高速（デフォルト）で実行するのではなく、指定された目標レートで実行します。
レートは1秒あたりのトランザクション数で与えられます。目標レートが実施可能な最大レートを越えている場合、レート制限は結果に影響を与えません。
       </para>
       <para>
<!--
        The rate is targeted by starting transactions along a
        Poisson-distributed schedule time line.  The expected start time
        schedule moves forward based on when the client first started, not
        when the previous transaction ended.  That approach means that when
        transactions go past their original scheduled end time, it is
        possible for later ones to catch up again.
-->
レートはトランザクションの開始予定タイムラインがポアソン分布に沿う事を目標としています。
期待される開始時刻の予定は、前トランザクションの終了時ではなくクライアントの初期起動時に基づいて動かします。
このアプローチはトランザクションがオリジナルの終了予定時刻を過ぎた場合でも、後でまた追い付けることを意味します。
       </para>
       <para>
<!--
        When throttling is active, the transaction latency reported at the
        end of the run is calculated from the scheduled start times, so it
        includes the time each transaction had to wait for the previous
        transaction to finish. The wait time is called the schedule lag time,
        and its average and maximum are also reported separately. The
        transaction latency with respect to the actual transaction start time,
        i.e. the time spent executing the transaction in the database, can be
        computed by subtracting the schedule lag time from the reported
        latency.
-->
制限がアクティブになると、実行終了時に報告されるトランザクション待ち時間は、予定開始時刻から計算されますので、
各トランザクションが前トランザクションの終了を待たねばならなかった時間を含んでいます。
この待ち時間はスケジュールラグタイムと呼ばれ、平均と最大値も別々に報告されます。
実トランザクション開始時刻についてのトランザクション待ち時間、つまりデータベース内でトランザクションの実行に要した時間は、
報告された待ち時間からスケジュールラグタイムを減算することで算出することができます。
       </para>

       <para>
<!--
        A high schedule lag time is an indication that the system cannot
        process transactions at the specified rate, with the chosen number of
        clients and threads. When the average transaction execution time is
        longer than the scheduled interval between each transaction, each
        successive transaction will fall further behind, and the schedule lag
        time will keep increasing the longer the test run is. When that
        happens, you will have to reduce the specified transaction rate.
-->
スケジュールラグタイムの高い値は、システムが選択されたクライアント数とスレッド数で、指定されたレートでトランザクションを処理できなかったことを示しています。
トランザクションの平均実行時間が各トランザクション間で予定されていた間隔より長い場合、各逐次トランザクションは更に遅くなり、
スケジュールラグタイムはテスト実行がより長く増加し続けます。
これが起こる場合、指定トランザクションレートを減らす必要があります。
       </para>

      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-s</option> <replaceable>scale_factor</></term>
      <term><option>--scale=</option><replaceable>scale_factor</></term>
      <listitem>
       <para>
<!--
        Report the specified scale factor in <application>pgbench</>'s
        output.  With the built-in tests, this is not necessary; the
        correct scale factor will be detected by counting the number of
        rows in the <structname>pgbench_branches</> table.  However, when testing
        custom benchmarks (<option>-f</> option), the scale factor
        will be reported as 1 unless this option is used.
-->
<application>pgbench</>の出力で指定した倍率を報告します。
これは組み込みの試験では必要ありません。
正確な倍率が<structname>pgbench_branches</>テーブルの行数を数えることで検出されます。
しかし、独自ベンチマーク（<option>-f</>オプション）を試験している場合、このオプションを使用しない限り、倍率は1として報告されます。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-S</option></term>
      <term><option>--select-only</option></term>
      <listitem>
       <para>
<!--
        Perform select-only transactions instead of TPC-B-like test.
-->
TPC-Bのような試験ではなく読み取りのみのトランザクションを実行します。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-t</option> <replaceable>transactions</></term>
      <term><option>--transactions=</option><replaceable>transactions</></term>
      <listitem>
       <para>
<!--
        Number of transactions each client runs.  Default is 10.
-->
各クライアントが実行するトランザクション数です。
デフォルトは10です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-T</option> <replaceable>seconds</></term>
      <term><option>--time=</option><replaceable>seconds</></term>
      <listitem>
       <para>
<!--
        Run the test for this many seconds, rather than a fixed number of
        transactions per client. <option>-t</option> and
        <option>-T</option> are mutually exclusive.
-->
クライアントあたりのトランザクション数を固定で指定するよりも長くテストを実行したい場合、ここに指定した秒数でテストを実行します。
<option>-t</option>と<option>-T</option>は互いに排他的です。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-v</option></term>
      <term><option>--vacuum-all</option></term>
      <listitem>
       <para>
<!--
        Vacuum all four standard tables before running the test.
        With neither <option>-n</> nor <option>-v</>, pgbench will vacuum the
        <structname>pgbench_tellers</> and <structname>pgbench_branches</>
        tables, and will truncate <structname>pgbench_history</>.
-->
試験前に4つの標準テーブルすべてをバキュームを行います。
<option>-n</>も<option>-v</>もなければ、pgbenchは<structname>pgbench_tellers</>と<structname>pgbench_branches</>テーブルをバキュームし、<structname>pgbench_history</>内のデータをすべて消去します。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--aggregate-interval=<replaceable>seconds</></option></term>
      <listitem>
       <para>
<!--
        Length of aggregation interval (in seconds). May be used only together
        with <application>-l</application> - with this option, the log contains
        per-interval summary (number of transactions, min/max latency and two
        additional fields useful for variance estimation).
-->
集約間隔の長さ（秒単位）です。
これは<application>-l</application>と一緒でのみ使用される可能性があります。
このオプションを付けると、ログには指定間隔単位の要約（トランザクション数、最大レイテンシ、最小レイテンシ、分散の推定に役に立つ2つの追加フィールド）が含まれます。

       </para>
       <para>
<!--
        This option is not currently supported on Windows.
-->
現在このオプションはWindowsではサポートされていません。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>--sampling-rate=<replaceable>rate</></option></term>
      <listitem>
       <para>
<!--
        Sampling rate, used when writing data into the log, to reduce the
        amount of log generated. If this option is given, only the specified
        fraction of transactions are logged. 1.0 means all transactions will
        be logged, 0.05 means only 5% of the transactions will be logged.
-->
データをログに書き出す際に使用される、生成されるログの量を減少するためのサンプリング割合です。
このオプションが指定された場合、指定された割合のトランザクションがログに残ります。
1.0はすべてのトランザクションが、0.05はトランザクションの5%のみがログに残ることを意味します。
       </para>
       <para>
<!--
        Remember to take the sampling rate into account when processing the
        log file. For example, when computing tps values, you need to multiply
        the numbers accordingly (e.g. with 0.01 sample rate, you'll only get
        1/100 of the actual tps).
-->
ログファイルを処理する際にはこのサンプリング割合を考慮することを忘れないでください。
例えば、tps値を計算する際には、比例した数を掛け合わせなければなりません（例：サンプリング割合が0.01の場合実際のtpsの1/100を得るだけです。）
        Vacuum all four standard tables before running the test.
        With neither <option>-n</> nor <option>-v</>, pgbench will vacuum the
        <structname>pgbench_tellers</> and <structname>pgbench_branches</>
        tables, and will truncate <structname>pgbench_history</>.
       </para>
      </listitem>
     </varlistentry>

    </variablelist>
   </para>

 </refsect2>

 <refsect2 id="pgbench-common-options">
<!--
  <title>Common Options</title>
-->
  <title>共通オプション</title>

   <para>
<!--
    <application>pgbench</application> accepts the following command-line
    common arguments:
-->
<application>pgbench</application>は以下の共通コマンドライン引数を受け付けます。
    <variablelist>

     <varlistentry>
      <term><option>-h</option> <replaceable>hostname</></term>
      <term><option>--host=</option><replaceable>hostname</></term>
      <listitem>
       <para>
<!--
        The database server's host name
-->
      データベースサーバのホスト名
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-p</option> <replaceable>port</></term>
      <term><option>--port=</option><replaceable>port</></term>
      <listitem>
       <para>
<!--
        The database server's port number
-->
データベースサーバのポート番号
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-U</option> <replaceable>login</></term>
      <term><option>--username=</option><replaceable>login</></term>
      <listitem>
       <para>
<!--
        The user name to connect as
-->
      接続ユーザ名
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-V</></term>
      <term><option>--version</></term>
      <listitem>
       <para>
<!--
        Print the <application>pgbench</application> version and exit.
-->
<application>pgbench</application>のバージョンを表示し、終了します。
       </para>
      </listitem>
     </varlistentry>

     <varlistentry>
      <term><option>-?</></term>
      <term><option>--help</></term>
      <listitem>
       <para>
<!--
        Show help about <application>pgbench</application> command line
        arguments, and exit.
-->
<application>pgbench</application>のコマンドライン引数の説明を表示し、終了します。
       </para>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>

 </refsect2>
 </refsect1>

 <refsect1>
<!--
  <title>Notes</title>
-->
  <title>注釈</title>

 <refsect2>
<!--
  <title>What is the <quote>Transaction</> Actually Performed in pgbench?</title>
-->
  <title>pgbenchで実際に実行される<quote>トランザクション</>は何か?</title>

  <para>
<!--
   The default transaction script issues seven commands per transaction:
-->
デフォルトのトランザクションスクリプトは、1トランザクションで以下の7コマンドを発行します。
  </para>

  <orderedlist>
   <listitem><para><literal>BEGIN;</literal></para></listitem>
   <listitem><para><literal>UPDATE pgbench_accounts SET abalance = abalance + :delta WHERE aid = :aid;</literal></para></listitem>
   <listitem><para><literal>SELECT abalance FROM pgbench_accounts WHERE aid = :aid;</literal></para></listitem>
   <listitem><para><literal>UPDATE pgbench_tellers SET tbalance = tbalance + :delta WHERE tid = :tid;</literal></para></listitem>
   <listitem><para><literal>UPDATE pgbench_branches SET bbalance = bbalance + :delta WHERE bid = :bid;</literal></para></listitem>
   <listitem><para><literal>INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES (:tid, :bid, :aid, :delta, CURRENT_TIMESTAMP);</literal></para></listitem>
   <listitem><para><literal>END;</literal></para></listitem>
  </orderedlist>

  <para>
<!--
   If you specify <option>-N</>, steps 4 and 5 aren't included in the
   transaction.  If you specify <option>-S</>, only the <command>SELECT</> is
   issued.
-->
<option>-N</>を指定した場合、第4コマンドと第5コマンドはトランザクションに含まれません。
<option>-S</>を指定した場合、<command>SELECT</>のみが発行されます。
  </para>
 </refsect2>

 <refsect2>
<!--
  <title>Custom Scripts</title>
-->
  <title>独自スクリプト</title>

  <para>
<!--
   <application>pgbench</application> has support for running custom
   benchmark scenarios by replacing the default transaction script
   (described above) with a transaction script read from a file
   (<option>-f</option> option).  In this case a <quote>transaction</>
   counts as one execution of a script file.  You can even specify
   multiple scripts (multiple <option>-f</option> options), in which
   case a random one of the scripts is chosen each time a client session
   starts a new transaction.
-->
<application>pgbench</application>は、ファイルから読み込んだトランザクションスクリプト（<option>-f</option>オプション）でデフォルトのトランザクションスクリプト（上述）を置き換えて独自のベンチマークシナリオを実行する機能をサポートします。
この場合、<quote>トランザクション</>はスクリプトファイルの1回の実行として数えられます。
複数のスクリプトを指定する（複数の<option>-f</option>オプション）ことさえ可能です。
この場合、クライアントセッションが新しいトランザクションを開始する時にランダムにスクリプトの1つが選択されます。

  </para>

  <para>
<!--
   The format of a script file is one SQL command per line; multiline
   SQL commands are not supported.  Empty lines and lines beginning with
   <literal>&#045;&#045;</> are ignored.  Script file lines can also be
   <quote>meta commands</>, which are interpreted by <application>pgbench</>
   itself, as described below.
-->
スクリプトファイルの書式は、1行1 SQLコマンドという形で、複数行に跨るSQLコマンドはサポートされません。
空行および<literal>--</>から始まる行は無視されます。
スクリプトファイルの行には、<application>pgbench</>自身が解釈する<quote>メタコマンド</>（後述）も記述することができます。
  </para>

  <para>
<!--
   There is a simple variable-substitution facility for script files.
   Variables can be set by the command-line <option>-D</> option,
   explained above, or by the meta commands explained below.
   In addition to any variables preset by <option>-D</> command-line options,
   there are a few variables that are preset automatically, listed in
   <xref linkend="pgbench-automatic-variables">. A value specified for these
   variables using <option>-D</> takes precedence over the automatic presets.
   Once set, a variable's
   value can be inserted into a SQL command by writing
   <literal>:</><replaceable>variablename</>.  When running more than
   one client session, each session has its own set of variables.
-->
スクリプトファイル向けの簡単な変数置換機能があります。
上で説明したように変数を<option>-D</>コマンドラインオプションで設定することができます。
また、後で説明するようにメタコマンドで設定することもできます。
<option>-D</>コマンドラインオプションで設定された変数の他に、<xref linkend="pgbench-automatic-variables">に記載されているように、自動的に設定される変数がいくつかあります。
<option>-D</> を使ってこれらの変数に設定された値は、自動設定の値より優先されます。
一度設定すると、変数の値は、<literal>:</><replaceable>variablename</>と書かれてSQLコマンドに挿入されます。
1つ以上のクライアントセッションが実行される場合、セッション毎に独自の変数群を持ちます。
  </para>

   <table id="pgbench-automatic-variables">
<!--
    <title>Automatic variables</title>
-->
    <title>自動変数</title>
    <tgroup cols="2">
     <thead>
      <row>
<!--
       <entry>Variable</entry>
       <entry>Description</entry>
-->
       <entry>変数</entry>
       <entry>説明</entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry> <literal>scale</literal> </entry>
<!--
       <entry>current scale factor</entry>
-->
       <entry>現在のスケールファクタ</entry>
      </row>

      <row>
       <entry> <literal>client_id</literal> </entry>
<!--
       <entry>unique number identifying the client session (starts from zero)</entry>
-->
       <entry>クライアントセッションを識別する一意の数値（ゼロから始まる）</entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  <para>
<!--
   Script file meta commands begin with a backslash (<literal>\</>).
   Arguments to a meta command are separated by white space.
   These meta commands are supported:
-->
スクリプトファイルメタコマンドはバックスラッシュ（<literal>\</>）から始まります。
メタコマンドへの引数は空白文字で区切られます。
以下のメタコマンドがサポートされています。
  </para>

  <variablelist>
   <varlistentry>
    <term>
     <literal>\set <replaceable>varname</> <replaceable>operand1</> [ <replaceable>operator</> <replaceable>operand2</> ]</literal>
    </term>

    <listitem>
     <para>
<!--
      Sets variable <replaceable>varname</> to a calculated integer value.
      Each <replaceable>operand</> is either an integer constant or a
      <literal>:</><replaceable>variablename</> reference to a variable
      having an integer value.  The <replaceable>operator</> can be
      <literal>+</>, <literal>-</>, <literal>*</>, or <literal>/</>.
-->
<replaceable>varname</>変数を計算された整数値に設定します。
各<replaceable>operand</>は整数定数か整数値を持つ変数への<literal>:</><replaceable>variablename</>参照のいずれかです。
<replaceable>operator</>は<literal>+</>、<literal>-</>、<literal>*</>、<literal>/</>を取ることができます。
     </para>

     <para>
<!--
      Example:
-->
例
<programlisting>
\set ntellers 10 * :scale
</programlisting></para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <literal>\setrandom <replaceable>varname</> <replaceable>min</> <replaceable>max</></literal>
    </term>

    <listitem>
     <para>
<!--
      Sets variable <replaceable>varname</> to a random integer value
      between the limits <replaceable>min</> and <replaceable>max</> inclusive.
      Each limit can be either an integer constant or a
      <literal>:</><replaceable>variablename</> reference to a variable
      having an integer value.
-->
<replaceable>varname</>変数を<replaceable>min</>から<replaceable>max</>までの範囲のランダムな整数値に設定します。
各制限は整数定数か整数値を持つ変数への<literal>:</><replaceable>variablename</>参照のいずれかです。
     </para>

     <para>
<!--
      Example:
-->
例
<programlisting>
\setrandom aid 1 :naccounts
</programlisting></para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <literal>\sleep <replaceable>number</> [ us | ms | s ]</literal>
    </term>

    <listitem>
     <para>
<!--
      Causes script execution to sleep for the specified duration in
      microseconds (<literal>us</>), milliseconds (<literal>ms</>) or seconds
      (<literal>s</>).  If the unit is omitted then seconds are the default.
      <replaceable>number</> can be either an integer constant or a
      <literal>:</><replaceable>variablename</> reference to a variable
      having an integer value.
-->
スクリプトの実行をマイクロ秒（<literal>us</>）、ミリ秒（<literal>ms</>）、秒（<literal>s</>）単位で指定した間待機させます。
単位を省略した場合、デフォルトは秒です。
<replaceable>number</>は整数定数か整数値を持つ変数への<literal>:</><replaceable>variablename</>参照のいずれかです。
     </para>

     <para>
<!--
      Example:
-->
例
<programlisting>
\sleep 10 ms
</programlisting></para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <literal>\setshell <replaceable>varname</> <replaceable>command</> [ <replaceable>argument</> ... ]</literal>
    </term>

    <listitem>
     <para>
<!--
      Sets variable <replaceable>varname</> to the result of the shell command
      <replaceable>command</>. The command must return an integer value
      through its standard output.
-->
<replaceable>command</>シェルコマンドの結果を<replaceable>varname</>変数に設定します。
このコマンドは標準出力を通して整数値を返さなければなりません。
     </para>

<!--
     <para><replaceable>argument</> can be either a text constant or a
      <literal>:</><replaceable>variablename</> reference to a variable of
      any types. If you want to use <replaceable>argument</> starting with
      colons, you need to add an additional colon at the beginning of
      <replaceable>argument</>.
-->
     <para>
<replaceable>argument</>は、テキスト定数または任意の型の変数を参照する<literal>:</><replaceable>variablename</>とすることができます。
コロンから始まる<replaceable>argument</>を使用したい場合、<replaceable>argument</>の先頭にさらにコロンを付けなければなりません。
     </para>

     <para>
<!--
      Example:
-->
例:
<programlisting>
\setshell variable_to_be_assigned command literal_argument :variable ::literal_starting_with_colon
</programlisting></para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term>
     <literal>\shell <replaceable>command</> [ <replaceable>argument</> ... ]</literal>
    </term>

    <listitem>
     <para>
<!--
      Same as <literal>\setshell</literal>, but the result is ignored.
-->
<literal>\setshell</literal>と同じですが、結果は無視されます。
     </para>

     <para>
<!--
      Example:
-->
例:
<programlisting>
\shell command literal_argument :variable ::literal_starting_with_colon
</programlisting></para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
<!--
   As an example, the full definition of the built-in TPC-B-like
   transaction is:
-->
例えば、組込みのTPC-Bのようなトランザクションの完全な定義を示します。

<programlisting>
\set nbranches :scale
\set ntellers 10 * :scale
\set naccounts 100000 * :scale
\setrandom aid 1 :naccounts
\setrandom bid 1 :nbranches
\setrandom tid 1 :ntellers
\setrandom delta -5000 5000
BEGIN;
UPDATE pgbench_accounts SET abalance = abalance + :delta WHERE aid = :aid;
SELECT abalance FROM pgbench_accounts WHERE aid = :aid;
UPDATE pgbench_tellers SET tbalance = tbalance + :delta WHERE tid = :tid;
UPDATE pgbench_branches SET bbalance = bbalance + :delta WHERE bid = :bid;
INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES (:tid, :bid, :aid, :delta, CURRENT_TIMESTAMP);
END;
</programlisting>

<!--
   This script allows each iteration of the transaction to reference
   different, randomly-chosen rows.  (This example also shows why it's
   important for each client session to have its own variables &mdash;
   otherwise they'd not be independently touching different rows.)
-->
 このスクリプトにより、トランザクションを繰り返す度に異なる、ランダムに選ばれた行を参照することができます。
 （この例はまた、各クライアントセッションがなぜ独自の変数を持つことが重要なのかも表しています。
 これがないと、異なる行を独立して参照することができないのです。）
  </para>

 </refsect2>

 <refsect2>
<!--
  <title>Per-Transaction Logging</title>
-->
  <title>トランザクション毎のログ処理</title>

  <para>
<!--
   With the <option>-l</> option but without the <option>&#045;&#045;aggregate-interval</option>,
   <application>pgbench</> writes the time taken by each transaction
   to a log file.  The log file will be named
   <filename>pgbench_log.<replaceable>nnn</></filename>, where
   <replaceable>nnn</> is the PID of the pgbench process.
   If the <option>-j</> option is 2 or higher, creating multiple worker
   threads, each will have its own log file. The first worker will use the
   same name for its log file as in the standard single worker case.
   The additional log files for the other workers will be named
   <filename>pgbench_log.<replaceable>nnn</>.<replaceable>mmm</></filename>,
   where <replaceable>mmm</> is a sequential number for each worker starting
   with 1.
-->
<option>--aggregate-interval</option>を付けずに<option>-l</>オプションを使用すると、
<application>pgbench</>は各トランザクションで要した時間をログファイルに書き出します。
ログファイルの名前は<filename>pgbench_log.<replaceable>nnn</></filename>です。
ここで<replaceable>nnn</>はpgbenchプロセスのPIDです。
<option>-j</>オプションが2以上の場合、それぞれ独自のログファイルを持つ複数のワーカスレッドが生成されます。
最初のワーカは標準的な単一ワーカの場合と同じ名前を持つログファイルを使用します。
他のワーカ用の追加のログファイルは<filename>pgbench_log.<replaceable>nnn</>.<replaceable>mmm</></filename>のように命名されます。
ここで<replaceable>mmm</>は1から始まる各ワーカの連番です。
  </para>

  <para>
<!--
   The format of the log is:
-->
ログの書式は以下の通りです。

<synopsis>
<replaceable>client_id</> <replaceable>transaction_no</> <replaceable>time</> <replaceable>file_no</> <replaceable>time_epoch</> <replaceable>time_us</> [<replaceable>schedule_lag</replaceable>]
</synopsis>

<!--
   where <replaceable>time</> is the total elapsed transaction time in microseconds,
   <replaceable>file_no</> identifies which script file was used
   (useful when multiple scripts were specified with <option>-f</>),
   and <replaceable>time_epoch</>/<replaceable>time_us</> are a
   UNIX epoch format timestamp and an offset
   in microseconds (suitable for creating an ISO 8601
   timestamp with fractional seconds) showing when
   the transaction completed. The last field, <replaceable>schedule_lag</>, is
   the difference between the transaction's scheduled start time, and the
   time it actually started, in microseconds. It is only present when the
   <option>&#045;&#045;rate</> option is used.

-->
ここで<replaceable>time</>はマイクロ秒単位の総トランザクション処理時間、
<replaceable>file_no</>は使用されたスクリプトファイルを識別するもの（<option>-f</>により複数のスクリプトが指定された場合に有用）、
<replaceable>time_epoch</>/<replaceable>time_us</>はマイクロ秒のオフセットを持つUNIXエポック書式のタイムスタンプ（少数秒付きのISO 8601タイムスタンプの作成に適します）
でトランザクションの完了時刻を示します。
最後のフィールド<replaceable>schedule_lag</>は、マイクロ秒単位のトランザクションの予定開始時刻と実開始時刻の差です。
これは<option>--rate</>オプションを使用した時だけ表示されます。

  </para>

  <para>
<!--
   Here are example outputs:
-->
以下に出力例を示します。
<screen>
 0 199 2241 0 1175850568 995598
 0 200 2465 0 1175850568 998079
 0 201 2513 0 1175850569 608
 0 202 2038 0 1175850569 2663
</screen></para>

  <para>
<!--
   When running a long test on hardware that can handle a lot of transactions,
   the log files can become very large.  The <option>&#045;&#045;sampling-rate</> option
   can be used to log only a random sample of transactions.
-->
大量のトランザクションを処理することができるハードウェアで長時間試験を実行する場合、ログファイルは非常に大きくなる可能性があります。
<option>--sampling-rate</>オプションを使用して、トランザクションのランダムなサンプルだけをログに記録することができます。
  </para>
 </refsect2>

 <refsect2>
<!--
  <title>Aggregated Logging</title>
-->
  <title>ログ処理の集約</title>

  <para>
<!--
   With the <option>&#045;&#045;aggregate-interval</option> option, the logs use a bit different format:
-->
<option>--aggregate-interval</option>オプションを付ける場合、以下のようにログの書式が多少異なります。

<synopsis>
<replaceable>interval_start</> <replaceable>num_of_transactions</> <replaceable>latency_sum</> <replaceable>latency_2_sum</> <replaceable>min_latency</> <replaceable>max_latency</> [<replaceable>lag_sum</> <replaceable>lag_2_sum</> <replaceable>min_lag</> <replaceable>max_lag</>]
</synopsis>
<!--
   where <replaceable>interval_start</> is the start of the interval (UNIX epoch
   format timestamp), <replaceable>num_of_transactions</> is the number of transactions
   within the interval, <replaceable>latency_sum</replaceable> is a sum of latencies
   (so you can compute average latency easily). The following two fields are useful
   for variance estimation - <replaceable>latency_sum</> is a sum of latencies and
   <replaceable>latency_2_sum</> is a sum of 2nd powers of latencies. The last two
   fields are <replaceable>min_latency</> - a minimum latency within the interval, and
   <replaceable>max_latency</> - maximum latency within the interval. A transaction is
   counted into the interval when it was committed.
    The last four fields, 
   <replaceable>lag_sum</>, <replaceable>lag_2_sum</>, <replaceable>min_lag</>, and <replaceable>max_lag</>, are only present if the &#045;&#045;rate option is used.
   They are calculated from the time each transaction had to wait for the
   previous one to finish, i.e. the difference between each transaction's
   scheduled start time and the time it actually started.
-->
ここで、<replaceable>interval_start</>はインターバルの開始時刻（UNIXエポック書式のタイムスタンプ）、
<replaceable>num_of_transactions</>はインターバル内のトランザクション数、
<replaceable>latency_sum</replaceable>はレイテンシの総和です（これらを使って簡単に平均レイテンシを計算できます）。
以下２つのフィールドは分散推定の際に有用です。
<replaceable>latency_sum</>はレイテンシの総和であり、<replaceable>latency_2_sum</>はレイテンシの二乗の総和です。
次の２つのフィールドは、インターバル内の最小レイテンシである<replaceable>min_latency</>と、インターバル内の最大レイテンシである<replaceable>max_latency</>です。
インターバル内でコミットされた時点でトランザクションとしてカウントされます。
最後の４つのフィールド<replaceable>lag_sum</>、<replaceable>lag_2_sum</>、<replaceable>min_lag</>と<replaceable>max_lag</>は--rateオプションが使われた時だけ表示されます。
これらは、各トランザクションが前のトランザクション終了を待つ時間、つまり各トランザクションの予定開始時刻と実開始時刻の差から算出されます。
  </para>

  <para>
<!--
   Here is example outputs:
-->
以下に出力例を示します。
<screen>
1345828501 5601 1542744 483552416 61 2573
1345828503 7884 1979812 565806736 60 1479
1345828505 7208 1979422 567277552 59 1391
1345828507 7685 1980268 569784714 60 1398
1345828509 7073 1979779 573489941 236 1411
</screen></para>

  <para>
<!--
   Notice that while the plain (unaggregated) log file contains index
   of the custom script files, the aggregated log does not. Therefore if
   you need per script data, you need to aggregate the data on your own.
-->
通常の（集約されていない）ログファイルには、カスタムスクリプトファイルの目印が含まれますが、集約されたログには含まれません。
このためスクリプトデータ単位が必要な場合は、自身でデータを集約しなければなりません。
  </para>

 </refsect2>

 <refsect2>
<!--
  <title>Per-Statement Latencies</title>
-->
  <title>ステートメント毎のレイテンシ</title>

  <para>
<!--
   With the <option>-r</> option, <application>pgbench</> collects
   the elapsed transaction time of each statement executed by every
   client.  It then reports an average of those values, referred to
   as the latency for each statement, after the benchmark has finished.
-->
<option>-r</>オプションを付けると、<application>pgbench</>は各クライアントにより実行されたトランザクションのステートメント毎の経過時間を収集します。
ベンチマークが終了した後、各値の平均値(各ステートメントのレイテンシと呼びます)が報告されます。
  </para>

  <para>
<!--
   For the default script, the output will look similar to this:
-->
標準スクリプトでは、次のような出力になります。
<screen>
starting vacuum...end.
transaction type: TPC-B (sort of)
scaling factor: 1
query mode: simple
number of clients: 10
number of threads: 1
number of transactions per client: 1000
number of transactions actually processed: 10000/10000
tps = 618.764555 (including connections establishing)
tps = 622.977698 (excluding connections establishing)
statement latencies in milliseconds:
        0.004386        \set nbranches 1 * :scale
        0.001343        \set ntellers 10 * :scale
        0.001212        \set naccounts 100000 * :scale
        0.001310        \setrandom aid 1 :naccounts
        0.001073        \setrandom bid 1 :nbranches
        0.001005        \setrandom tid 1 :ntellers
        0.001078        \setrandom delta -5000 5000
        0.326152        BEGIN;
        0.603376        UPDATE pgbench_accounts SET abalance = abalance + :delta WHERE aid = :aid;
        0.454643        SELECT abalance FROM pgbench_accounts WHERE aid = :aid;
        5.528491        UPDATE pgbench_tellers SET tbalance = tbalance + :delta WHERE tid = :tid;
        7.335435        UPDATE pgbench_branches SET bbalance = bbalance + :delta WHERE bid = :bid;
        0.371851        INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES (:tid, :bid, :aid, :delta, CURRENT_TIMESTAMP);
        1.212976        END;
</screen>
  </para>

  <para>
<!--
   If multiple script files are specified, the averages are reported
   separately for each script file.
-->
複数のスクリプトファイルが定義された場合、平均値はそれぞれのスクリプトファイル毎に分けて報告されます。
  </para>

  <para>
<!--
   Note that collecting the additional timing information needed for
   per-statement latency computation adds some overhead.  This will slow
   average execution speed and lower the computed TPS.  The amount
   of slowdown varies significantly depending on platform and hardware.
   Comparing average TPS values with and without latency reporting enabled
   is a good way to measure if the timing overhead is significant.
-->
ステートメント毎のレイテンシを計算するために必要となる、追加のタイミング情報を収集することは、オーバーヘッドが加わることに注意してください。
これは平均実行速度を遅くし、計測TPSを小さくするでしょう。
低下量はプラットフォームとハードウェアに依存して著しく変わります。

レイテンシの報告を有効にする、有効にしないで平均TPS値を比較することは、タイミング・オーバーヘッドが顕著かどうかを測定するには良い方法です。
  </para>
 </refsect2>

 <refsect2>
<!--
  <title>Good Practices</title>
-->
  <title>優れた実践</title>

  <para>
<!--
   It is very easy to use <application>pgbench</> to produce completely
   meaningless numbers.  Here are some guidelines to help you get useful
   results.
-->
まったく無意味な数値を生み出すように<application>pgbench</>を使用することは非常に簡単です。
以下に有意な結果を生み出す手助けとなるガイドラインをいくつか示します。
  </para>

  <para>
<!--
   In the first place, <emphasis>never</> believe any test that runs
   for only a few seconds.  Use the <option>-t</> or <option>-T</> option
   to make the run last at least a few minutes, so as to average out noise.
   In some cases you could need hours to get numbers that are reproducible.
   It's a good idea to try the test run a few times, to find out if your
   numbers are reproducible or not.
-->
まず第一に、数秒で終わる試験を<emphasis>決して</>信用しないでください。
<option>-t</>または<option>-T</>オプションを使って、雑音を取り除くために、少なくとも数分試験にかかるようにしてください。
再現可能な数値を得るために数時間必要になる場合もあります。
数回試験を繰り返し、数値が再現できるかどうか確認することを勧めます。
  </para>

  <para>
<!--
   For the default TPC-B-like test scenario, the initialization scale factor
   (<option>-s</>) should be at least as large as the largest number of
   clients you intend to test (<option>-c</>); else you'll mostly be
   measuring update contention.  There are only <option>-s</> rows in
   the <structname>pgbench_branches</> table, and every transaction wants to
   update one of them, so <option>-c</> values in excess of <option>-s</>
   will undoubtedly result in lots of transactions blocked waiting for
   other transactions.
-->
デフォルトのTPC-Bのような試験シナリオでは、初期倍率（<option>-s</>）を試験予定のクライアント数（<option>-c</>）の最大値と同程度にしなければなりません。
<structname>pgbench_branches</>テーブルには<option>-s</>行しかありません。
また、前トランザクションはその内の1つを更新しようとします。
ですので、<option>-c</>値を<option>-s</>より大きくすると、他のトランザクションを待機するためにブロックされるトランザクションが多くなることは間違いありません。
  </para>

  <para>
<!--
   The default test scenario is also quite sensitive to how long it's been
   since the tables were initialized: accumulation of dead rows and dead space
   in the tables changes the results.  To understand the results you must keep
   track of the total number of updates and when vacuuming happens.  If
   autovacuum is enabled it can result in unpredictable changes in measured
   performance.
-->
デフォルトの試験シナリオはまた、テーブルを初期化してからの経過時間に非常に敏感です。
テーブル内の不要行や不要空間の累積により結果が変わります。
結果を理解するためには、更新された行数とバキューム時期を把握する必要があります。
自動バキュームが有効な場合、性能を測定する上で結果は予測できないほど変わる可能性があります。
  </para>

  <para>
<!--
   A limitation of <application>pgbench</> is that it can itself become
   the bottleneck when trying to test a large number of client sessions.
   This can be alleviated by running <application>pgbench</> on a different
   machine from the database server, although low network latency will be
   essential.  It might even be useful to run several <application>pgbench</>
   instances concurrently, on several client machines, against the same
   database server.
-->
<application>pgbench</>の制限は、多くのクライアントセッションを試験しようとする際に<application>pgbench</>自身がボトルネックになる可能性があることです。
これは、データベースサーバとは別のマシンで<application>pgbench</>を実行することで緩和させることが可能です。
しかし、多少のネットワーク遅延が重要です。
同一データベースサーバに対し複数のクライアントマシンから複数の<application>pgbench</>インスタンスを同時に実行することが有用かもしれません。
  </para>
 </refsect2>
 </refsect1>
</refentry>
