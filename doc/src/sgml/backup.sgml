<!-- doc/src/sgml/backup.sgml -->

<chapter id="backup">
<!--
 <title>Backup and Restore</title>
-->
 <title>バックアップとリストア</title>

<!--
 <indexterm zone="backup"><primary>backup</></>
-->
 <indexterm zone="backup"><primary>バックアップ</></>

 <para>
<!--
  As with everything that contains valuable data, <productname>PostgreSQL</>
  databases should be backed up regularly. While the procedure is
  essentially simple, it is important to have a clear understanding of
  the underlying techniques and assumptions.
-->
貴重なデータを全て保存しているため、<productname>PostgreSQL</>データベースは定期的にバックアップされなければなりません。
バックアップの手順は基本的に簡単ですが、使用されている諸技術といくつかの前提条件を明確に理解しておくことが重要です。
 </para>

 <para>
<!--
  There are three fundamentally different approaches to backing up
  <productname>PostgreSQL</> data:
-->
<productname>PostgreSQL</>のデータをバックアップする場合、3つの異なる手法があります。
  <itemizedlist>
<!--
   <listitem><para><acronym>SQL</> dump</para></listitem>
   <listitem><para>File system level backup</para></listitem>
   <listitem><para>Continuous archiving</para></listitem>
-->
   <listitem><para><acronym>SQL</>によるダンプ</para></listitem>
   <listitem><para>ファイルシステムレベルのバックアップ</para></listitem>
   <listitem><para>継続的アーカイブ</para></listitem>
  </itemizedlist>
<!--
  Each has its own strengths and weaknesses; each is discussed in turn
  in the following sections.
-->
それぞれ長所と短所があります。ひとつひとつ順を追って以下の節で説明します。
 </para>

 <sect1 id="backup-dump">
<!--
  <title><acronym>SQL</> Dump</title>
-->
  <title><acronym>SQL</>によるダンプ</title>

  <para>
<!--
   The idea behind this dump method is to generate a file with SQL
   commands that, when fed back to the server, will recreate the
   database in the same state as it was at the time of the dump.
   <productname>PostgreSQL</> provides the utility program
   <xref linkend="app-pgdump"> for this purpose. The basic usage of this
   command is:
-->
このダンプ方法の背景にはSQLコマンドでファイルを生成し、そのファイルをサーバが再度読み込みを行った時に、ダンプした時点と同じ状態が再構築されるという意図があります。
この目的のため、<productname>PostgreSQL</>は<xref linkend="app-pgdump">ユーティリティプログラムを提供しています。
このコマンドの基本となる使い方は以下の通りです。
<synopsis>
pg_dump <replaceable class="parameter">dbname</replaceable> &gt; <replaceable class="parameter">outfile</replaceable>
</synopsis>
<!--
   As you see, <application>pg_dump</> writes its result to the
   standard output. We will see below how this can be useful.
   While the above command creates a text file, <application>pg_dump</>
   can create files in other formats that allow for parallism and more
   fine-grained control of object restoration.
-->
見てわかる通り、<application>pg_dump</>は結果を標準出力に書き出します。
これがどのように活用できるかをこれから説明します。
上記のコマンドがテキストファイルを作成している間、<application>pg_dump</>は並列実行やオブジェクトのより細かい制限に合わせてファイルを作ることができます。
  </para>

  <para>
<!--
   <application>pg_dump</> is a regular <productname>PostgreSQL</>
   client application (albeit a particularly clever one). This means
   that you can perform this backup procedure from any remote host that has
   access to the database. But remember that <application>pg_dump</>
   does not operate with special permissions. In particular, it must
   have read access to all tables that you want to back up, so in order
   to back up the entire database you almost always have to run it as a
   database superuser.  (If you do not have sufficient privileges to back up
   the entire database, you can still back up portions of the database to which
   you do have access using options such as
   <option>-n <replaceable>schema</replaceable></option>
   or <option>-t <replaceable>table</replaceable></option>.)
  </para>
-->
<application>pg_dump</>は、（優れた機能を特に発揮する）<productname>PostgreSQL</>の通常のクライアントアプリケーションです。ということは、データベースに接続可能なあらゆるリモートホストからこのバックアップ手順を実行することができます。<application>pg_dump</>は実行するために特別な権限は必要ではありません。しかし、バックアップを行う全てのテーブルに対して読み取り権限が必要です。このため、全てのデーターベースのバックアップを実行したいほとんどの場合、データベースのスーパーユーザでバックアップを行なわなければなりません。(もしバックアップを全て取る権限を持っていない場合、<option>-n <replaceable>schema</replaceable></option>もしくは、<option>-t <replaceable>table</replaceable></option>のようなオプションを使ってデータベースにアクセスすることで一部のバックアップを取得することができます)
  </para>

  <para>
<!--
   To specify which database server <application>pg_dump</> should
   contact, use the command line options <option>-h
   <replaceable>host</></> and <option>-p <replaceable>port</></>. The
   default host is the local host or whatever your
   <envar>PGHOST</envar> environment variable specifies. Similarly,
   the default port is indicated by the <envar>PGPORT</envar>
   environment variable or, failing that, by the compiled-in default.
   (Conveniently, the server will normally have the same compiled-in
   default.)
-->
<application>pg_dump</>を行うデータベースサーバを特定するにはコマンドラインの<option>-h <replaceable>host</></>オプションと<option>-p <replaceable>port</></>オプションを使用します。デフォルトのホストはローカルホスト、または<envar>PGHOST</envar>環境変数で指定したものです。同様に、デフォルトのポートは<envar>PGPORT</envar>環境変数で指定されているか、うまく行かない場合にはコンパイル時の設定がデフォルトとなります（そこはうまくできていて、サーバは通常コンパイル時の設定をデフォルトとします）。
  </para>

  <para>
<!--
   Like any other <productname>PostgreSQL</> client application,
   <application>pg_dump</> will by default connect with the database
   user name that is equal to the current operating system user name. To override
   this, either specify the <option>-U</option> option or set the
   environment variable <envar>PGUSER</envar>. Remember that
   <application>pg_dump</> connections are subject to the normal
   client authentication mechanisms (which are described in <xref
   linkend="client-authentication">).
-->
他の<productname>PostgreSQL</>のクライアントアプリケーションのように、<application>pg_dump</>はデフォルトでオペレーティングシステムの現在のユーザ名と同じデータベースユーザ名で接続します。これを書き換えるには<option>-U</option>オプションを付けるか<envar>PGUSER</envar>環境変数を設定します。<application>pg_dump</>の接続は（<xref linkend="client-authentication">で説明されている）通常のクライアント認証方法によることを思い出してください。
  </para>

  <para>
<!--
   An important advantage of <application>pg_dump</> over the other backup
   methods described later is that <application>pg_dump</>'s output can
   generally be re-loaded into newer versions of <productname>PostgreSQL</>,
   whereas file-level backups and continuous archiving are both extremely
   server-version-specific.  <application>pg_dump</> is also the only method
   that will work when transferring a database to a different machine
   architecture, such as going from a 32-bit to a 64-bit server.
-->
後で述べる他のバックアップ手法に対する<application>pg_dump</>の重要な利点は、<application>pg_dump</>の出力は一般に新しいバージョンの<productname>PostgreSQL</>に再ロードできるということです。一方、ファイルレベルのバックアップと継続的アーカイブは両方とも非常にサーバ、バージョン依存です。
<application>pg_dump</>は、32ビットから64ビットのサーバに移行するなどの異なるマシンアーキテクチャにデータベースを移す場合に上手くいく唯一の方法でもあります。
  </para>

  <para>
<!--
   Dumps created by <application>pg_dump</> are internally consistent,
   meaning, the dump represents a snapshot of the database at the time
   <application>pg_dump</> began running. <application>pg_dump</> does not
   block other operations on the database while it is working.
   (Exceptions are those operations that need to operate with an
   exclusive lock, such as most forms of <command>ALTER TABLE</command>.)
-->
<application>pg_dump</>で作成されたダンプは、内部的に整合性があります。つまり、ダンプは<application>pg_dump</>が開始された際のデータベースのスナップショットを示しています。<application>pg_dump</>の操作はデータベースに対する他の作業を妨げません（<command>ALTER TABLE</command>のほとんどの形態であるような排他的ロックが必要な作業は例外です）。
  </para>


  <sect2 id="backup-dump-restore">
<!--
   <title>Restoring the Dump</title>
-->
   <title>ダンプのリストア</title>

   <para>
<!--
    Text files created by <application>pg_dump</> are intended to
    be read in by the <application>psql</application> program. The
    general command form to restore a dump is
-->
<application>pg_dump</>で作成されたテキストファイルは<application>psql</application>プログラムで読み込まれることを意図しています。以下に、ダンプをリストアする一般的なコマンドを示します。
<synopsis>
psql <replaceable class="parameter">dbname</replaceable> &lt; <replaceable class="parameter">infile</replaceable>
</synopsis>
<!--
    where <replaceable class="parameter">infile</replaceable> is the
    file output by the <application>pg_dump</> command. The database <replaceable
    class="parameter">dbname</replaceable> will not be created by this
    command, so you must create it yourself from <literal>template0</>
    before executing <application>psql</> (e.g., with
    <literal>createdb -T template0 <replaceable
    class="parameter">dbname</></literal>).  <application>psql</>
    supports options similar to <application>pg_dump</> for specifying
    the database server to connect to and the user name to use. See
    the <xref linkend="app-psql"> reference page for more information.
    Non-text file dumps are restored using the <xref
    linkend="app-pgrestore"> utility.
-->
ここで<replaceable class="parameter">infile</replaceable>は<application>pg_dump</>コマンドにより出力されたファイルです。 
<replaceable class="parameter">dbname</replaceable>データベースはこのコマンドでは作成されません。
（例えば<literal>createdb -T template0 <replaceable class="parameter">dbname</></literal> のようにして）<application>psql</>を実行する前に自分で<literal>template0</>から作成してください。<application>psql</>は<application>pg_dump</>と似たような、接続データベースサーバと使用するユーザ名を指定するオプションに対応しています。詳細については、<xref linkend="app-psql">のリファレンスページを参照してください。
テキスト形式ではないダンプファイルは<xref linkend="app-pgrestore"> ユーティリティを使いリストアします。
   </para>

   <para>
<!--
    Before restoring an SQL dump, all the users who own objects or were
    granted permissions on objects in the dumped database must already
    exist. If they do not, the restore will fail to recreate the
    objects with the original ownership and/or permissions.
    (Sometimes this is what you want, but usually it is not.)
-->
SQLダンプのリストアを実行する前に、ダンプされたデータベース内のオブジェクトを所有するユーザやそのオブジェクト上に権限を与えられたユーザも存在しなければなりません。
存在していない場合、リストアはそのオブジェクトの元々の所有権や付与された権限を再作成することができません
（このようにしたい場合もあるでしょうが、通常そうではありません）。
   </para>

   <para>
<!--
    By default, the <application>psql</> script will continue to
    execute after an SQL error is encountered. You might wish to run
    <application>psql</application> with
    the <literal>ON_ERROR_STOP</> variable set to alter that
    behavior and have <application>psql</application> exit with an
    exit status of 3 if an SQL error occurs:
-->
デフォルトで<application>psql</>スクリプトは、SQLエラーが起きた後も実行を継続します。
<literal>ON_ERROR_STOP</>変数を設定して<application>psql</>を実行することで、その動作を変更し、SQLエラーが起きた場合に<application>psql</>が、終了ステータス3で終了するようにしたいと思うかもしれません。
<programlisting>
psql --set ON_ERROR_STOP=on dbname &lt; infile
</programlisting>
<!--
    Either way, you will only have a partially restored database.
    Alternatively, you can specify that the whole dump should be
    restored as a single transaction, so the restore is either fully
    completed or fully rolled back. This mode can be specified by
    passing the <option>-1</> or <option>&#045;-single-transaction</>
    command-line options to <application>psql</>. When using this
    mode, be aware that even a minor error can rollback a
    restore that has already run for many hours. However, that might
    still be preferable to manually cleaning up a complex database
    after a partially restored dump.
-->
どちらにしても、部分的にリストアされたデータベースにしかなりません。
他に、ダンプ全体を1つのトランザクションとしてリストアするように指定することができます。
こうすれば、リストアが完全に終わるか、完全にロールバックされるかのどちらかになります。
このモードは、<application>psql</>のコマンドラインオプションに<option>-1</>または<option>--single-transaction</>を渡すことで指定できます。
このモードを使用する場合、数時間かけて実行していたリストアが軽微なエラーでロールバックしてしまうことに注意してください。しかし、部分的にリストアされたダンプから手作業で複雑なデータベースを整理するよりまだましかもしれません。
   </para>

   <para>
<!--
    The ability of <application>pg_dump</> and <application>psql</> to
    write to or read from pipes makes it possible to dump a database
    directly from one server to another, for example:
-->
<application>pg_dump</>と<application>psql</>ではパイプから読み書きができるので、あるサーバから別のサーバへデータベースを直接ダンプできます。
以下に例を示します。
<programlisting>
pg_dump -h <replaceable>host1</> <replaceable>dbname</> | psql -h <replaceable>host2</> <replaceable>dbname</>
</programlisting>
   </para>

   <important>
    <para>
<!--
     The dumps produced by <application>pg_dump</> are relative to
     <literal>template0</>. This means that any languages, procedures,
     etc. added via <literal>template1</> will also be dumped by
     <application>pg_dump</>. As a result, when restoring, if you are
     using a customized <literal>template1</>, you must create the
     empty database from <literal>template0</>, as in the example
     above.
-->
<application>pg_dump</>で作成されるダンプは<literal>template0</>と相対関係にあります。 
つまり<literal>template1</>を経由して追加されたあらゆる言語、プロシージャなども<application>pg_dump</>によりダンプされます。 
その結果としてリストアする際に、カスタマイズされた<literal>template1</>を使用している場合は、上記の例のように、<literal>template0</>から空のデータベースを作成する必要があります。
    </para>
   </important>

   <para>
<!--
    After restoring a backup, it is wise to run <xref
    linkend="sql-analyze"> on each
    database so the query optimizer has useful statistics;
    see <xref linkend="vacuum-for-statistics">
    and <xref linkend="autovacuum"> for more information.
    For more advice on how to load large amounts of data
    into <productname>PostgreSQL</> efficiently, refer to <xref
    linkend="populate">.
-->
バックアップをリストアした後、問い合わせオプティマイザが有用な統計情報を使用できるように、各データベースに対して<xref linkend="sql-analyze">を実行することを勧めます。
より詳しくは、<xref linkend="vacuum-for-statistics"> と <xref linkend="autovacuum">を参照してください。
効率的に大規模なデータを<productname>PostgreSQL</productname>にロードする方法に関するより多くの勧告については、<xref linkend="populate">を参照してください。
   </para>
  </sect2>

  <sect2 id="backup-dump-all">
<!--
   <title>Using <application>pg_dumpall</></title>
-->
   <title><application>pg_dumpall</>の使用</title>

   <para>
<!--
    <application>pg_dump</> dumps only a single database at a time,
    and it does not dump information about roles or tablespaces
    (because those are cluster-wide rather than per-database).
    To support convenient dumping of the entire contents of a database
    cluster, the <xref linkend="app-pg-dumpall"> program is provided.
    <application>pg_dumpall</> backs up each database in a given
    cluster, and also preserves cluster-wide data such as role and
    tablespace definitions. The basic usage of this command is:
-->
<application>pg_dump</>は同時に単一のデータベースのみをダンプします。
また、ロールやテーブル空間についての情報はダンプしません。
（これらはテーブル毎ではなくクラスタ全体のものだからです。）
データベースクラスタの全内容の簡便なダンプをサポートするために、<xref linkend="app-pg-dumpall">プログラムが提供されています。
<application>pg_dumpall</>は指定されたクラスタの各データベースのバックアップを行い、そして、ロールやテーブル空間定義などのクラスタ全体にわたるデータを保存します。
このコマンドの基本的な使用方法は
<synopsis>
pg_dumpall &gt; <replaceable>outfile</>
</synopsis>
です。
<!--
    The resulting dump can be restored with <application>psql</>:
-->
ダンプの結果は<application>psql</>でリストアできます。
<synopsis>
psql -f <replaceable class="parameter">infile</replaceable> postgres
</synopsis>
<!--
    (Actually, you can specify any existing database name to start from,
    but if you are loading into an empty cluster then <literal>postgres</>
    should usually be used.)  It is always necessary to have
    database superuser access when restoring a <application>pg_dumpall</>
    dump, as that is required to restore the role and tablespace information.
    If you use tablespaces, make sure that the tablespace paths in the
    dump are appropriate for the new installation.
-->
（実際、開始時に任意の既存のデータベース名を指定することができますが、空のクラスタ内にロードする場合は、通常 <literal>postgres</> を使用すべきです。）
ロールやテーブル空間の情報をリストアしなければならないので、<application>pg_dumpall</>のダンプをリストアする時には、データベーススーパーユーザのアクセス権限を確実に必要とします。
テーブル空間を使用している場合、ダンプ内のテーブル空間のパスが新しいインストレーションで適切であることを確認してください。
   </para>

   <para>
<!--
    <application>pg_dumpall</> works by emitting commands to re-create
    roles, tablespaces, and empty databases, then invoking
    <application>pg_dump</> for each database.  This means that while
    each database will be internally consistent, the snapshots of
    different databases are not sychronized.
-->
<application>pg_dumpall</>はコマンドを発令することによりロール、テーブル空間、およびデータベースを再作成し、それぞれのデータベースに対して<application>pg_dump</>を起動します。このことは、それぞれのデータベースには内部的に矛盾がない一方、異なるデータベースのスナップショットは完全に同期しないことを示しています。
   </para>
   <para>
<!--
    Cluster-wide data can be dumped alone using the
    <application>pg_dumpall</> <option>&#045;-globals-only</> option.
    This is necessary to fully backup the cluster if running the
    <application>pg_dump</> command on individual databases.
-->
クラスタレベルでのデータは<application>pg_dumpall</> の<option>--globals-only</> オプションを使用して出力することができます。
このコマンドは個々のデータベースに<application>pg_dump</> コマンドを実行しつつ、フルバックアップを取得する際に必要です。
   </para>

  </sect2>

  <sect2 id="backup-dump-large">
<!--
   <title>Handling Large Databases</title>
-->
   <title>大規模データベースの扱い</title>

   <para>
<!--
    Some operating systems have maximum file size limits that cause
    problems when creating large <application>pg_dump</> output files.
    Fortunately, <application>pg_dump</> can write to the standard
    output, so you can use standard Unix tools to work around this
    potential problem.  There are several possible methods:
-->
オペレーティングシステムの中には最大ファイルサイズに制限があるものがあり、大きな<application>pg_dump</>出力ファイルを作成しているときに問題を引き起こします。
幸運なことに、<application>pg_dump</>は標準出力に書き出すことができますので、Unix標準のツールを使ってこの潜在的な問題を解決できます。取りうる方法がいくつか存在します。
   </para>

   <formalpara>
<!--
    <title>Use compressed dumps.</title>
-->
    <title>圧縮ダンプの使用</title>
    <para>
<!--
     You can use your favorite compression program, for example
     <application>gzip</application>:
-->
たとえば、自分が愛用している<application>gzip</application>のような圧縮プログラムが使えます。

<programlisting>
pg_dump <replaceable class="parameter">dbname</replaceable> | gzip &gt; <replaceable class="parameter">filename</replaceable>.gz
</programlisting>

<!--
     Reload with:
-->
元に戻すには次のようにします。

<programlisting>
gunzip -c <replaceable class="parameter">filename</replaceable>.gz | psql <replaceable class="parameter">dbname</replaceable>
</programlisting>

<!--
     or:
-->
あるいは次のようにもできます。

<programlisting>
cat <replaceable class="parameter">filename</replaceable>.gz | gunzip | psql <replaceable class="parameter">dbname</replaceable>
</programlisting>
    </para>
   </formalpara>

   <formalpara>
<!--
    <title>Use <command>split</>.</title>
-->
    <title><command>split</>の使用</title>
    <para>
<!--
     The <command>split</command> command
     allows you to split the output into smaller files that are
     acceptable in size to the underlying file system. For example, to
     make chunks of 1 megabyte:
-->
<command>split</command>コマンドで結果を使用しているファイルシステムが受け付けられる大きさに分割することができます。
例えば1メガバイトずつに分割するには次のようにします。

<programlisting>
pg_dump <replaceable class="parameter">dbname</replaceable> | split -b 1m - <replaceable class="parameter">filename</replaceable>
</programlisting>

<!--
     Reload with:
-->
元に戻すには次のようにします。

<programlisting>
cat <replaceable class="parameter">filename</replaceable>* | psql <replaceable class="parameter">dbname</replaceable>
</programlisting>
    </para>
   </formalpara>

   <formalpara>
<!--
    <title>Use <application>pg_dump</>'s custom dump format.</title>
-->
    <title><application>pg_dump</>のカスタムダンプ書式の使用</title>
    <para>
<!--
     If <productname>PostgreSQL</productname> was built on a system with the
     <application>zlib</> compression library installed, the custom dump
     format will compress data as it writes it to the output file. This will
     produce dump file sizes similar to using <command>gzip</command>, but it
     has the added advantage that tables can be restored selectively. The
     following command dumps a database using the custom dump format:
-->
もし<productname>PostgreSQL</productname>が<application>zlib</>圧縮ライブラリインストール済みのシステム上で構築されたのなら、カスタムダンプ書式では出力ファイルに書き出す時にデータを圧縮します。
<command>gzip</command>を使用した時と似通ったダンプサイズとなりますが、テーブルの復元を部分的に行えるという点で優れていると言えます。
以下のコマンドは、カスタムダンプ書式でのデータベースのダンプを行います。

<programlisting>
pg_dump -Fc <replaceable class="parameter">dbname</replaceable> &gt; <replaceable class="parameter">filename</replaceable>
</programlisting>

<!--
     A custom-format dump is not a script for <application>psql</>, but
     instead must be restored with <application>pg_restore</>, for example:
-->
カスタム書式のダンプは<application>psql</>用のスクリプトではありませんので、代わりに<application>pg_restore</>でリストアしなければなりません。例えば以下のようにします。

<programlisting>
pg_restore -d <replaceable class="parameter">dbname</replaceable> <replaceable class="parameter">filename</replaceable>
</programlisting>

<!--
     See the <xref linkend="app-pgdump"> and <xref
     linkend="app-pgrestore"> reference pages for details.
-->
詳細は<xref linkend="app-pgdump">と<xref linkend="app-pgrestore">のリファレンスページを参照してください。
    </para>
   </formalpara>

   <para>
<!--
    For very large databases, you might need to combine <command>split</>
    with one of the other two approaches.
-->
巨大なデータベースに対しては、そのほかの２つの手法のうちの１つと一緒に<command>split</>を組み合わせる必要があるかもしれません。
   </para>

   <formalpara>
<!-- 
    <title>Use <application>pg_dump</>'s parallel dump feature.</title>
-->
    <title><application>pg_dump</>の並列実行</title>
    <para>
<!--
     To speed up the dump of a large database, you can use
     <application>pg_dump</application>'s parallel mode. This will dump
     multiple tables at the same time. You can control the degree of
     parallelism with the <command>-j</command> parameter. Parallel dumps
     are only supported for the "directory" archive format.
-->
<application>pg_dump</application>を並列実行することで、大きなデータベースのダンプを高速に実行することができます。これは同時に複数表のダンプを実行します。並列度は<command>-j</command>パラメータを指定することで制御できます。並列ダンプはディレクトリダンプ書式のみサポートします。

<programlisting>
pg_dump -j <replaceable class="parameter">num</replaceable> -F d -f <replaceable class="parameter">out.dir</replaceable> <replaceable class="parameter">dbname</replaceable>
</programlisting>
<!--
     You can use <command>pg_restore -j</command> to restore a dump in parallel.
     This will work for any archive of either the "custom" or the "directory"
     archive mode, whether or not it has been created with <command>pg_dump -j</command>.
-->
<command>pg_restore -j</command>コマンドでダンプファイルを並列でリストアすることができます。これは<command>pg_dump -j</command>でダンプファイルが作成されたか、否かにかかわらず、カスタムもしくはディレクトリダンプ書式で作成されたダンプファイルに使用できます。
    </para>
   </formalpara>

  </sect2>
 </sect1>

 <sect1 id="backup-file">
<!--
  <title>File System Level Backup</title>
-->
  <title>ファイルシステムレベルのバックアップ</title>

  <para>
<!--
   An alternative backup strategy is to directly copy the files that
   <productname>PostgreSQL</> uses to store the data in the database;
   <xref linkend="creating-cluster"> explains where these files
   are located.  You can use whatever method you prefer
   for doing file system backups; for example:
-->
バックアップ戦略の代替案として<productname>PostgreSQL</>がデータベース内のデータを保存するために使用しているファイルを直接コピーする方法があります。
<xref linkend="creating-cluster">にこれらのファイルがどこにあるか解説されています。
下記のような通常のファイルシステムのバックアップを行うどんな方法でも問題ありません。

<programlisting>
tar -cf backup.tar /usr/local/pgsql/data
</programlisting>
  </para>

  <para>
<!--
   There are two restrictions, however, which make this method
   impractical, or at least inferior to the <application>pg_dump</>
   method:
-->
しかしこの方法には2つの制約があり、そのためにあまり実用的ではなく、少なくとも<application>pg_dump</>より劣ると言わざるを得ません。

   <orderedlist>
    <listitem>
     <para>
<!--
      The database server <emphasis>must</> be shut down in order to
      get a usable backup. Half-way measures such as disallowing all
      connections will <emphasis>not</emphasis> work
      (in part because <command>tar</command> and similar tools do not take
      an atomic snapshot of the state of the file system,
      but also because of internal buffering within the server).
      Information about stopping the server can be found in
      <xref linkend="server-shutdown">.  Needless to say, you
      also need to shut down the server before restoring the data.
-->
有効なバックアップを行うにはデータベースサーバを<emphasis>必ず</>停止しなければなりません。
全ての接続を無効とするような中途半端な対策では作用しません
（<command>tar</command>やその類似ツールはある時点におけるファイルシステムの原子的なスナップショットを取らないことと同時に、サーバ内の内部バッファリングの理由によるからです）。
サーバの停止に関しては<xref linkend="server-shutdown">を参照してください。
言うまでもありませんが、データをリストアする前にもサーバを停止させる必要があります。
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      If you have dug into the details of the file system layout of the
      database, you might be tempted to try to back up or restore only certain
      individual tables or databases from their respective files or
      directories. This will <emphasis>not</> work because the
      information contained in these files is not usable without
      the commit log files,
      <filename>pg_clog/*</filename>, which contain the commit status of
      all transactions. A table file is only usable with this
      information. Of course it is also impossible to restore only a
      table and the associated <filename>pg_clog</filename> data
      because that would render all other tables in the database
      cluster useless.  So file system backups only work for complete
      backup and restoration of an entire database cluster.
-->
データベースのファイルシステムレイアウトの詳細を熟知している場合、ある個別のテーブルやデータベースをそれぞれのファイルやディレクトリからバックアップしたり復元したりすることを試みたいと思うことがあったかもしれません。
しかし、それらのファイル内の情報はすべてのトランザクションのコミット状態を保持するコミットログファイル<filename>pg_clog/*</filename>なしでは使えないため、この方法では正常なバックアップは<emphasis>行えません</>。
テーブルファイルはこの情報があって初めて意味をなします。
もちろんテーブルとそれに付帯する<filename>pg_clog</filename>データだけで復元することも、データベースクラスタにある他のテーブルを無効としてしまうのでできません。
ですので、ファイルシステムバックアップは、データベースクラスタ全体の完全なバックアップとリストア処理にのみ動作します。
     </para>
    </listitem>
   </orderedlist>
  </para>

  <para>
<!--
   An alternative file-system backup approach is to make a
   <quote>consistent snapshot</quote> of the data directory, if the
   file system supports that functionality (and you are willing to
   trust that it is implemented correctly).  The typical procedure is
   to make a <quote>frozen snapshot</> of the volume containing the
   database, then copy the whole data directory (not just parts, see
   above) from the snapshot to a backup device, then release the frozen
   snapshot.  This will work even while the database server is running.
   However, a backup created in this way saves
   the database files in a state as if the database server was not
   properly shut down; therefore, when you start the database server
   on the backed-up data, it will think the previous server instance
   crashed and will replay the WAL log.  This is not a problem; just
   be aware of it (and be sure to include the WAL files in your backup).
   You can perform a <command>CHECKPOINT</command> before taking the
   snapshot to reduce recovery time.
-->
その他のファイルシステムバックアップ方法として、ファイルシステムが<quote>整合性を維持したスナップショット</quote>機能をサポートしている場合（かつ、正しく実装されていると信用する場合）、データディレクトリのスナップショットを作成する方法があります。
典型的な手順では、データベースを含むボリュームの<quote>凍結スナップショット</>を作成し、データディレクトリ全体（上述のように、一部だけではいけません）をスナップショットからバックアップデバイスにコピーし、そして、凍結スナップショットを解放します。
これはデータベースサーバが稼動中であっても動作します。
しかし、こうして作成されたバックアップは、データベースサーバが適切に停止されなかった状態のデータベースファイルを保存します。
そのため、このバックアップデータでデータベースサーバを起動する時、直前のサーバインスタンスがクラッシュしたものとみなされ、WALログが取り直されます。
これは問題ではありません。単に注意してください（そして、確実にバックアップにWALファイルを含めてください）。CHECKPOINTコマンドをスナップショット取得前に発行することでリカバリ時間を減らすこともできます。
  </para>

  <para>
<!--
   If your database is spread across multiple file systems, there might not
   be any way to obtain exactly-simultaneous frozen snapshots of all
   the volumes.  For example, if your data files and WAL log are on different
   disks, or if tablespaces are on different file systems, it might
   not be possible to use snapshot backup because the snapshots
   <emphasis>must</> be simultaneous.
   Read your file system documentation very carefully before trusting
   the consistent-snapshot technique in such situations.
-->
対象のデータベースが複数のファイルシステムにまたがって分散している場合、全てのボリュームに対して完全に同期した凍結スナップショットを得る方法が存在しない可能性があります。例えば、データファイルとWALログが異なったディスク上にあったり、テーブル空間が異なるファイルシステム上にある場合、スナップショットは同時でなければ<emphasis>なりません</>ので、スナップショットのバックアップを使用できない可能性があります。こうした状況では、整合性を維持したスナップショット技術を信用する前に使用するファイルシステムの文書を熟読してください。
  </para>

  <para>
<!--
   If simultaneous snapshots are not possible, one option is to shut down
   the database server long enough to establish all the frozen snapshots.
   Another option is to perform a continuous archiving base backup (<xref
   linkend="backup-base-backup">) because such backups are immune to file
   system changes during the backup.  This requires enabling continuous
   archiving just during the backup process; restore is done using
   continuous archive recovery (<xref linkend="backup-pitr-recovery">).
-->
同時実行のスナップショットができない場合、選択肢の１つとして、全ての機能の停止したスナップショットを確定させるのに充分な時間、データベースサーバをシャットダウンさせることが挙げられます。
他の選択肢は、継続的なベースバックアップの保管（<xref linkend="backup-base-backup">）を行うことです。
こうしたバックアップには、バックアップ中のファイルシステムの変更を心配する必要がないためです。
これにはバックアップ処理期間のみに継続的な保管を行う必要があり、継続的なアーカイブリカバリ（<xref linkend="backup-pitr-recovery">）を使用してリストアを行います。
  </para>

  <para>
<!--
   Another option is to use <application>rsync</> to perform a file
   system backup.  This is done by first running <application>rsync</>
   while the database server is running, then shutting down the database
   server just long enough to do a second <application>rsync</>.  The
   second <application>rsync</> will be much quicker than the first,
   because it has relatively little data to transfer, and the end result
   will be consistent because the server was down.  This method
   allows a file system backup to be performed with minimal downtime.
-->
ファイルシステムをバックアップするその他の選択肢として<application>rsync</>の使用が挙げられます。これを行うには、先ずデータベースサーバが稼働中に<application>rsync</>を実行し、そして次の<application>rsync</>を実行するのに充分な余裕をもってデータベースサーバを停止します。次の<application>rsync</>は、比較的転送するデータ量が少なく、サーバが稼働していないため最終結果に矛盾がない事から、最初の<application>rsync</>よりもより迅速です。この方法で最小の稼働停止時間でファイルシステムのバックアップを行う事ができます。
  </para>

  <para>
<!--
   Note that a file system backup will typically be larger
   than an SQL dump. (<application>pg_dump</application> does not need to dump
   the contents of indexes for example, just the commands to recreate
   them.)  However, taking a file system backup might be faster.
-->
ファイルシステムバックアップは、概してSQLによるダンプより大きくなることに注意してください。
（<application>pg_dump</application>では、例えばインデックスの内容をダンプする必要はありません。単にコマンドで再作成します。）しかし、ファイルシステムのバックアップを取るほうがより高速でしょう。
  </para>
 </sect1>

 <sect1 id="continuous-archiving">
<!--
  <title>Continuous Archiving and Point-in-Time Recovery (PITR)</title>
-->
  <title>継続的アーカイブとポイントインタイムリカバリ（PITR）</title>

  <indexterm zone="backup">
<!--
   <primary>continuous archiving</primary>
-->
   <primary>継続的アーカイブ</primary>
  </indexterm>

  <indexterm zone="backup">
<!--
   <primary>point-in-time recovery</primary>
-->
   <primary>ポイントインタイムリカバリ</primary>
  </indexterm>

  <indexterm zone="backup">
   <primary>PITR</primary>
  </indexterm>

  <para>
<!--
   At all times, <productname>PostgreSQL</> maintains a
   <firstterm>write ahead log</> (WAL) in the <filename>pg_xlog/</>
   subdirectory of the cluster's data directory. The log records
   every change made to the database's data files.  This log exists
   primarily for crash-safety purposes: if the system crashes, the
   database can be restored to consistency by <quote>replaying</> the
   log entries made since the last checkpoint.  However, the existence
   of the log makes it possible to use a third strategy for backing up
   databases: we can combine a file-system-level backup with backup of
   the WAL files.  If recovery is needed, we restore the file system backup and
   then replay from the backed-up WAL files to bring the system to a
   current state.  This approach is more complex to administer than
   either of the previous approaches, but it has some significant
   benefits:
-->
<productname>PostgreSQL</>は常に、クラスタのデータディレクトリ以下の<filename>pg_xlog/</>ディレクトリ内で<firstterm>先行書き込みログ</>（WAL）を管理しています。
このログはデータベースのデータファイルに行われた全ての変更を記録します。
このログは主にクラッシュ時の安全性を目的としています。
システムがクラッシュしたとしても、最後のチェックポイント以降に作成されたログ項目を<quote>やり直し</>することで、データベースを整合性を維持した状態にリストアすることができます。
しかし、この存在するログファイルを使用して、データベースのバックアップ用の第3の戦略が可能になりました。
ファイルシステムレベルのバックアップとWALファイルのバックアップを組み合わせるという戦略です。
復旧が必要ならば、ファイルシステムバックアップをリストアし、その後にバックアップされたWALファイルを再生することで、システムを最新の状態にできます。
管理者にとって、この方法はこれまで説明した方法よりかなり複雑になりますが、以下のような大きな利点が複数あります。
  <itemizedlist>
   <listitem>
    <para>
<!--
     We do not need a perfectly consistent file system backup as the starting point.
     Any internal inconsistency in the backup will be corrected by log
     replay (this is not significantly different from what happens during
     crash recovery).  So we do not need a file system snapshot capability,
     just <application>tar</> or a similar archiving tool.
-->
開始時点のファイルシステムバックアップは完全な整合状態である必要はありません。
そのバックアップ内の内部的な不整合はログのやり直しによって修正されます
（これは、クラッシュからの復旧時に行われることと大きな違いはありません）。
ですので、ファイルシステムのスナップショット機能を必要としません。
単に<application>tar</>などのアーカイブツールが必要です。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     Since we can combine an indefinitely long sequence of WAL files
     for replay, continuous backup can be achieved simply by continuing to archive
     the WAL files.  This is particularly valuable for large databases, where
     it might not be convenient to take a full backup frequently.
-->
再生の際にWALファイルの並びを数に制限なく連ねて組み合わせられますので、単にWALファイルのアーカイブを続けることで連続したバックアップを達成できます。
これは、頻繁に完全なバックアップを行うことが困難な、大規模なデータベースでは特に価値があります。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     It is not necessary to replay the WAL entries all the
     way to the end.  We could stop the replay at any point and have a
     consistent snapshot of the database as it was at that time.  Thus,
     this technique supports <firstterm>point-in-time recovery</>: it is
     possible to restore the database to its state at any time since your base
     backup was taken.
-->
WAL項目の再生を最後まで行わなければならないということはありません。
やり直しを任意の時点までで停止することができ、それにより、その時点までのデータベースの整合性を持ったスナップショットを得ることができます。
このような技術が<firstterm>ポイントインタイムリカバリ</>を補助するものであり、元となるベースバックアップの取得時点以降の任意の時点の状態にデータベースをリストアすることが可能になります。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     If we continuously feed the series of WAL files to another
     machine that has been loaded with the same base backup file, we
     have a <firstterm>warm standby</> system: at any point we can bring up
     the second machine and it will have a nearly-current copy of the
     database.
-->
連続的に一連のWALファイルを、同一のベースバックアップをロードしている別のマシンに配送することで、<quote>ウォームスタンバイ</>システムを保有することができます。
つまり、任意の時点でその2番目のマシンを、ほぼ現時点のデータベースの複製を持った状態で有効にすることができます。
    </para>
   </listitem>
  </itemizedlist>
  </para>

  <note>
   <para>
<!--
    <application>pg_dump</application> and
    <application>pg_dumpall</application> do not produce file-system-level
    backups and cannot be used as part of a continuous-archiving solution.
    Such dumps are <emphasis>logical</> and do not contain enough
    information to be used by WAL replay.
-->
<application>pg_dump</application>と<application>pg_dumpall</application>はファイルシステムレベルのバックアップを生成しませんので、継続的アーカイブ方式の一部として使うことはできません。
そのダンプは<emphasis>論理的</>なものであり、WALのやり直しで使うのに十分な情報を含んでいません。
   </para>
  </note>

  <para>
<!--
   As with the plain file-system-backup technique, this method can only
   support restoration of an entire database cluster, not a subset.
   Also, it requires a lot of archival storage: the base backup might be bulky,
   and a busy system will generate many megabytes of WAL traffic that
   have to be archived.  Still, it is the preferred backup technique in
   many situations where high reliability is needed.
-->
通常のファイルシステムバックアップ技術の場合と同様、この方法は、一部ではなく、データベースクラスタ全体のリストア処理のみをサポートできます。
また、アーカイブ用に大量の格納領域を必要とします。
ベースバックアップはかさばる場合があり、また、高負荷なシステムではアーカイブしなければならないWALの流量をメガバイト単位で生成します。
しかし、これは、高信頼性が必要な、多くの状況でむしろ好まれるバックアップ手法です。
  </para>

  <para>
<!--
   To recover successfully using continuous archiving (also called
   <quote>online backup</> by many database vendors), you need a continuous
   sequence of archived WAL files that extends back at least as far as the
   start time of your backup.  So to get started, you should set up and test
   your procedure for archiving WAL files <emphasis>before</> you take your
   first base backup.  Accordingly, we first discuss the mechanics of
   archiving WAL files.
-->
継続的アーカイブ（多くのデータベースベンダで<quote>オンラインバックアップ</>とも呼ばれます）を使用して復旧を成功させるためには、少なくともバックアップの開始時点まで遡る、連続した一連のアーカイブ済みWALファイルが必要です。
ですので、運用するためには、最初のベースバックアップを取得する<emphasis>前</>にWALファイルをアーカイブする手順を設定し試験しなければなりません。
したがって、まずWALファイルのアーカイブ機構について説明します。
  </para>

  <sect2 id="backup-archiving-wal">
<!--
   <title>Setting Up WAL Archiving</title>
-->
   <title>WALアーカイブの設定</title>

   <para>
<!--
    In an abstract sense, a running <productname>PostgreSQL</> system
    produces an indefinitely long sequence of WAL records.  The system
    physically divides this sequence into WAL <firstterm>segment
    files</>, which are normally 16MB apiece (although the segment size
    can be altered when building <productname>PostgreSQL</>).  The segment
    files are given numeric names that reflect their position in the
    abstract WAL sequence.  When not using WAL archiving, the system
    normally creates just a few segment files and then
    <quote>recycles</> them by renaming no-longer-needed segment files
    to higher segment numbers.  It's assumed that segment files whose
    contents precede the checkpoint-before-last are no longer of
    interest and can be recycled.
-->
理論上、<productname>PostgreSQL</>システムの稼動により、不定長のWAL記録の並びが生成されます。
システムは物理的にこの並びを、通常1つ16メガバイト（このセグメントサイズは<productname>PostgreSQL</>の構築時に変更可能です）の、WAL<firstterm>セグメントファイル</>に分割します。
このセグメントファイルには、概念的なWALの並び内の位置を反映した、数字の名前が付与されます。
WALアーカイブを行わない場合、システムは通常数個のセグメントファイルを生成し、また、不要となったセグメントファイルの名前をより大きなセグメント番号に変更することでそれを<quote>再回収</>します。
直前のチェックポイントより前の内容を持つセグメントファイルは使用されないと仮定され、再回収されます。
   </para>

   <para>
<!--
    When archiving WAL data, we need to capture the contents of each segment
    file once it is filled, and save that data somewhere before the segment
    file is recycled for reuse.  Depending on the application and the
    available hardware, there could be many different ways of <quote>saving
    the data somewhere</>: we could copy the segment files to an NFS-mounted
    directory on another machine, write them onto a tape drive (ensuring that
    you have a way of identifying the original name of each file), or batch
    them together and burn them onto CDs, or something else entirely.  To
    provide the database administrator with flexibility,
    <productname>PostgreSQL</> tries not to make any assumptions about how
    the archiving will be done.  Instead, <productname>PostgreSQL</> lets
    the administrator specify a shell command to be executed to copy a
    completed segment file to wherever it needs to go.  The command could be
    as simple as a <literal>cp</>, or it could invoke a complex shell
    script &mdash; it's all up to you.
-->
WALデータをアーカイブする場合、完成したセグメントファイルのそれぞれの内容を取り出し、再利用のために回収される前にそのデータをどこかに保存することが必要です。
アプリケーションと利用できるハードウェアに依存しますが、数多くの<quote>データをどこかに保存する</>方法があります。
例えば、NFSでマウントした他のマシンのディレクトリにセグメントファイルをコピーすること、あるいは、テープ装置に書き出すこと（元々のファイル名を識別する手段があることを確認してください）、それらを一度にまとめてCDに焼くこと、そのほか全く異なったなんらかの方法などです。
柔軟性をデータベース管理者に提供するために、<productname>PostgreSQL</>は、どのようにアーカイブがなされたかについて一切想定しないようになっています。
その代わりに<productname>PostgreSQL</>は、管理者に完全なセグメントファイルをどこか必要な場所にコピーするシェルコマンドを指定させます。
このコマンドは単純な<literal>cp</>でも構いませんし、また、複雑なシェルスクリプトを呼び出しても構いません。
全て管理者に任されています。
   </para>

   <para>
<!--
    To enable WAL archiving, set the <xref linkend="guc-wal-level">
    configuration parameter to <literal>archive</> or higher,
    <xref linkend="guc-archive-mode"> to <literal>on</>,
    and specify the shell command to use in the <xref
    linkend="guc-archive-command"> configuration parameter.  In practice
    these settings will always be placed in the
    <filename>postgresql.conf</filename> file.
    In <varname>archive_command</>,
    <literal>%p</> is replaced by the path name of the file to
    archive, while <literal>%f</> is replaced by only the file name.
    (The path name is relative to the current working directory,
    i.e., the cluster's data directory.)
    Use <literal>%%</> if you need to embed an actual <literal>%</>
    character in the command.  The simplest useful command is something
    like:
-->
WALアーカイブを有効にするには<xref linkend="guc-wal-level">構成パラメータを<literal>archive</>（またはarchiveより高いパラメータ）に、<xref linkend="guc-archive-mode">を<literal>on</>に設定し、<xref linkend="guc-archive-command"> 構成パラメータで使用するシェルコマンドを指定します。
実行するには、これらの設定を <filename>postgresql.conf</filename> ファイルに常に置きます。
<varname>archive_command</> では、<literal>%p</>はアーカイブするファイルのパス名に置換され、<literal>%f</>はファイル名部分のみに置換されます。
（パス名は、サーバの現在の作業用ディレクトリ、つまり、クラスタのデータディレクトリから見て相対的なものです。）
コマンド内に<literal>%</>文字自体を埋め込む必要があれば<literal>%%</>を使ってください。
最も簡単でよく使用されるコマンドは以下のようなものになります。
<programlisting>
archive_command = 'test ! -f /mnt/server/archivedir/%f &amp;&amp; cp %p /mnt/server/archivedir/%f'  # Unix
archive_command = 'copy "%p" "C:\\server\\archivedir\\%f"'  # Windows
</programlisting>
<!--
    which will copy archivable WAL segments to the directory
    <filename>/mnt/server/archivedir</>.  (This is an example, not a
    recommendation, and might not work on all platforms.)  After the
    <literal>%p</> and <literal>%f</> parameters have been replaced,
    the actual command executed might look like this:
-->
これは、アーカイブ可能なWALセグメントを<literal>/mnt/server/archivedir</>ディレクトリにコピーします
（これは一例です。推奨するものではなく、また、全てのプラットフォームで動作しない可能性があります）。<literal>%p</>および<literal>%f</>パラメータが置き換えられたあと、実行された実コマンドは以下のようになります。
<programlisting>
test ! -f /mnt/server/archivedir/00000001000000A900000065 &amp;&amp; cp pg_xlog/00000001000000A900000065 /mnt/server/archivedir/00000001000000A900000065
</programlisting>
<!--
    A similar command will be generated for each new file to be archived.
-->
類似したコマンドがアーカイブされるそれぞれの新規ファイルに生成されます。
   </para>

   <para>
<!--
    The archive command will be executed under the ownership of the same
    user that the <productname>PostgreSQL</> server is running as.  Since
    the series of WAL files being archived contains effectively everything
    in your database, you will want to be sure that the archived data is
    protected from prying eyes; for example, archive into a directory that
    does not have group or world read access.
-->
このアーカイブ用コマンドは<productname>PostgreSQL</>サーバを稼動させるユーザと同じ所有権で実行されます。
アーカイブされる一連のWALファイルには、実質、データベース内の全てが含まれていますので、アーカイブしたデータをのぞき見から確実に保護しなければならないでしょう。
例えば、グループや全員に読み込み権限を付与していないディレクトリにデータをアーカイブしてください。
   </para>

   <para>
<!--
    It is important that the archive command return zero exit status if and
    only if it succeeds.  Upon getting a zero result,
    <productname>PostgreSQL</> will assume that the file has been
    successfully archived, and will remove or recycle it.  However, a nonzero
    status tells <productname>PostgreSQL</> that the file was not archived;
    it will try again periodically until it succeeds.
-->
アーカイブ用コマンドが成功した場合のみにゼロという終了ステータスを返すことが重要です。
<productname>PostgreSQL</>は、ゼロという結果に基づいて、そのファイルのアーカイブが成功したことを想定し、そのファイルを削除したり回収するかもしれません。
しかし、非ゼロのステータスは、<productname>PostgreSQL</>に対してファイルがアーカイブされなかったことを通知し、成功するまで定期的に再試行させます。
   </para>

   <para>
<!--
    The archive command should generally be designed to refuse to overwrite
    any pre-existing archive file.  This is an important safety feature to
    preserve the integrity of your archive in case of administrator error
    (such as sending the output of two different servers to the same archive
    directory).

-->
通常アーカイブ用コマンドは既存のアーカイブ済みファイルの上書きを行わないように設計されなければなりません。
これは、管理者のミス（例えば2つの異なるサーバの出力を同一のアーカイブ用ディレクトリに送信してしまうなど）といった場合からアーカイブ状況の整合性を保護するための安全策として重要です。
</para>

   <para>
<!--
    It is advisable to test your proposed archive command to ensure that it
    indeed does not overwrite an existing file, <emphasis>and that it returns
    nonzero status in this case</>.
    The example command above for Unix ensures this by including a separate
    <command>test</> step.  On some Unix platforms, <command>cp</> has
    switches such as <option>-i</> that can be used to do the same thing
    less verbosely, but you should not rely on these without verifying that
    the right exit status is returned.  (In particular, GNU <command>cp</>
    will return status zero when <option>-i</> is used and the target file
    already exists, which is <emphasis>not</> the desired behavior.)
-->

実際に既存のファイルを上書きしないこと、<emphasis>かつ、その場合に非ゼロのステータスを返すこと</>を確認するために使用するアーカイブ用コマンドを試験することを勧めます。
上のUnix用のコマンド例では、別途<command>test</>という段階を含めることでこれを確認しています。いくつかのUnixプラットフォームでは<command>cp</>コマンドには<option>-i</> 引数を使うことで煩雑な出力を少なくし使うことができますが、正しい終了コードが返ることを確認せずに使用するべきではありません。(具体的にはGNUの<command>cp</>コマンドは<option>-i</> オプションなどを使い、ターゲットファイルがすでに存在している場合、ゼロのステータスを返します。これは<emphasis>期待していない</>動作です。）
   </para>

   <para>
<!--
    While designing your archiving setup, consider what will happen if
    the archive command fails repeatedly because some aspect requires
    operator intervention or the archive runs out of space. For example, this
    could occur if you write to tape without an autochanger; when the tape
    fills, nothing further can be archived until the tape is swapped.
    You should ensure that any error condition or request to a human operator
    is reported appropriately so that the situation can be
    resolved reasonably quickly. The <filename>pg_xlog/</> directory will
    continue to fill with WAL segment files until the situation is resolved.
    (If the file system containing <filename>pg_xlog/</> fills up,
    <productname>PostgreSQL</> will do a PANIC shutdown.  No committed
    transactions will be lost, but the database will remain offline until
    you free some space.)
-->
アーカイブ設定を設計する時には、操作者の介入が必要であったり、アーカイブ場所の容量不足の理由でアーカイブ用コマンドが繰り返し失敗した時にどうなるかを考慮してください。
例えば、オートチェンジャ機能のないテープに書き出している場合に発生する可能性があります。
テープが一杯になった場合、テープを交換するまでアーカイブを行うことができなくなります。
こうした状況を相応の早さで解消できるよう、適切に操作者に対しエラーや要求を確実に連絡できるようにしなければなりません。
この状況が解消するまで、WALセグメントファイルは<filename>pg_xlog/</>ディレクトリ内に格納され続けます。（<filename>pg_xlog/</>を含むファイルシステムがいっぱいになると、<productname>PostgreSQL</>はパニック停止します。コミットされたトランザクションは失われませんが、データベースはいくらかの容量を開放するまでオフラインのままです。）
   </para>

   <para>
<!--
    The speed of the archiving command is unimportant as long as it can keep up
    with the average rate at which your server generates WAL data.  Normal
    operation continues even if the archiving process falls a little behind.
    If archiving falls significantly behind, this will increase the amount of
    data that would be lost in the event of a disaster. It will also mean that
    the <filename>pg_xlog/</> directory will contain large numbers of
    not-yet-archived segment files, which could eventually exceed available
    disk space. You are advised to monitor the archiving process to ensure that
    it is working as you intend.
-->
サーバのWALデータの生成に要する平均速度に追いついている限り、アーカイブ用コマンドの処理速度は重要ではありません。
アーカイブプロセスが多少遅れたとしても通常の操作は続けられます。
アーカイブ処理がかなり遅くれると、災害時に損失するデータの量が増加することになります。
また、これは<filename>pg_xlog/</>ディレクトリ内に多くのアーカイブ処理待ちのセグメントファイルが格納され、ディスク容量が不足する状況になる可能性があることを意味します。
アーカイブ処理が確実に意図通りに動作しているかを監視することを推奨します。
   </para>

   <para>
<!--
    In writing your archive command, you should assume that the file names to
    be archived can be up to 64 characters long and can contain any
    combination of ASCII letters, digits, and dots.  It is not necessary to
    preserve the original relative path (<literal>%p</>) but it is necessary to
    preserve the file name (<literal>%f</>).
-->
アーカイブ用コマンドを作成する時、アーカイブされるファイル名は最長64文字までで、ASCII文字と数字とドットのどんな組合せを使用しても構いません。
元の相対パス（<literal>%p</>）を保存する必要はありませんが、ファイル名（<literal>%f</>）を保存する必要はあります。
   </para>

   <para>
<!--
    Note that although WAL archiving will allow you to restore any
    modifications made to the data in your <productname>PostgreSQL</> database,
    it will not restore changes made to configuration files (that is,
    <filename>postgresql.conf</>, <filename>pg_hba.conf</> and
    <filename>pg_ident.conf</>), since those are edited manually rather
    than through SQL operations.
    You might wish to keep the configuration files in a location that will
    be backed up by your regular file system backup procedures.  See
    <xref linkend="runtime-config-file-locations"> for how to relocate the
    configuration files.
-->
WALアーカイブによって<productname>PostgreSQL</>データベースでなされた変更は全てリストアすることができますが、設定ファイルはSQL操作ではなく手作業で変更されますので、設定ファイル（<filename>postgresql.conf</>、<filename>pg_hba.conf</>、および<filename>pg_ident.conf</>）になされた変更までリストアしないことに注意してください。
通常のファイルシステムバックアップ手続きでバックアップされる場所に設定ファイルを保持したい場合があります。
設定ファイルの設置場所を変更するには<xref linkend="runtime-config-file-locations">を参照してください。
   </para>

   <para>
<!--
    The archive command is only invoked on completed WAL segments.  Hence,
    if your server generates only little WAL traffic (or has slack periods
    where it does so), there could be a long delay between the completion
    of a transaction and its safe recording in archive storage.  To put
    a limit on how old unarchived data can be, you can set
    <xref linkend="guc-archive-timeout"> to force the server to switch
    to a new WAL segment file at least that often.  Note that archived
    files that are archived early due to a forced switch are still the same
    length as completely full files.  It is therefore unwise to set a very
    short <varname>archive_timeout</> &mdash; it will bloat your archive
    storage.  <varname>archive_timeout</> settings of a minute or so are
    usually reasonable.
-->
アーカイブコマンドは完全なWALセグメントに対してのみ呼び出されます。
このため、サーバが少ししかWAL流量がない（処理を行わないなぎの期間がある）場合、トランザクションの完了とアーカイブ格納領域への安全な記録との間に長期にわたる遅延があることになります。
古い未アーカイブのデータをどうするかについて制限を付けるために、<xref linkend="guc-archive-timeout">を設定して、強制的にサーバを新しいWALセグメントにある程度の間隔で切り替えるようにすることができます。
強制切り替えにより早期にアーカイブされたアーカイブ済みファイルは完全に完了したファイルと同じ大きさを持つことに注意してください。
そのため、非常に小さな<varname>archive_timeout</>を使用することはお勧めしません。
格納領域を膨張させてしまいます。
通常ならば分単位の<varname>archive_timeout</>設定が合理的です。
   </para>

   <para>
<!--
    Also, you can force a segment switch manually with
    <function>pg_switch_xlog</> if you want to ensure that a
    just-finished transaction is archived as soon as possible.  Other utility
    functions related to WAL management are listed in <xref
    linkend="functions-admin-backup-table">.
-->
終わったばかりのトランザクションをできるだけ早くアーカイブさせたい場合、<function>pg_switch_xlog</>を使用して手作業でセグメント切り替えを強制することができます。
この他のWAL管理に関連した関数を<xref linkend="functions-admin-backup-table">に列挙します。
   </para>

   <para>
<!--
    When <varname>wal_level</> is <literal>minimal</> some SQL commands
    are optimized to avoid WAL logging, as described in <xref
    linkend="populate-pitr">.  If archiving or streaming replication were
    turned on during execution of one of these statements, WAL would not
    contain enough information for archive recovery.  (Crash recovery is
    unaffected.)  For this reason, <varname>wal_level</> can only be changed at
    server start.  However, <varname>archive_command</> can be changed with a
    configuration file reload.  If you wish to temporarily stop archiving,
    one way to do it is to set <varname>archive_command</> to the empty
    string (<literal>''</>).
    This will cause WAL files to accumulate in <filename>pg_xlog/</> until a
    working <varname>archive_command</> is re-established.
-->
<varname>wal_level</>が<literal>minimal</>の場合、<xref linkend="populate-pitr">に書かれているように、いくつかのSQLコマンドはWALロギングを回避するため最適化されます。
アーカイビングもしくはストリーミングレプリケーションがこれら構文の１つを実行中に作動させられると、アーカイブ復旧のための十分な情報をWALが含まなくなります。（クラッシュ復旧は影響を受けません。）
このことにより、<varname>wal_level</>はサーバの起動時のみ変更可能です。とは言っても、<varname>archive_command</>は構成ファイルを再読み込みすることで変更できます。一時的にアーカイビングを停止したい場合、１つの方法は<varname>archive_command</>を空文字列（<literal>''</>）に設定することです。このようにすると、動作する<varname>archive_command</>が再構築されるまでWALファイルは<filename>pg_xlog/</>に蓄積します。
   </para>
  </sect2>

  <sect2 id="backup-base-backup">
<!--
   <title>Making a Base Backup</title>
-->
   <title>ベースバックアップの作成</title>

   <para>
<!-- 
    The easiest way to perform a base backup is to use the
    <xref linkend="app-pgbasebackup"> tool. It can create
    a base backup either as regular files or as a tar archive. If more
    flexibility than <xref linkend="app-pgbasebackup"> can provide is
    required, you can also make a base backup using the low level API
    (see <xref linkend="backup-lowlevel-base-backup">).
-->
ベースバックアップを取得する最も簡単な方法は<xref linkend="app-pgbasebackup"> を実行する方法です。通常のファイルやTAR形式のファイルとしてベースバックアップを取得することができます。もし、<xref linkend="app-pgbasebackup">より柔軟性が求められる場合は、低レベルなAPIを使ってバックアップを作成することもできます。(詳細は <xref linkend="backup-lowlevel-base-backup">を参照)
   </para>

   <para>
<!-- 
    It is not necessary to be concerned about the amount of time it takes
    to make a base backup. However, if you normally run the
    server with <varname>full_page_writes</> disabled, you might notice a drop
    in performance while the backup runs since <varname>full_page_writes</> is
    effectively forced on during backup mode.
-->
ベースバックアップを取得するための時間を考慮する必要はありません。しかし、普段、<varname>full_page_writes</>を無効にして運用している場合、バックアップ取得中は強制的に<varname>full_page_writes</>が有効になるため、パフォーマンスが落ちていると感じる可能性があります。
   </para>

   <para>
<!-- 
    To make use of the backup, you will need to keep all the WAL
    segment files generated during and after the file system backup.
    To aid you in doing this, the base backup process
    creates a <firstterm>backup history file</> that is immediately
    stored into the WAL archive area. This file is named after the first
    WAL segment file that you need for the file system backup.
    For example, if the starting WAL file is
    <literal>0000000100001234000055CD</> the backup history file will be
    named something like
    <literal>0000000100001234000055CD.007C9330.backup</>. (The second
    part of the file name stands for an exact position within the WAL
    file, and can ordinarily be ignored.) Once you have safely archived
    the file system backup and the WAL segment files used during the
    backup (as specified in the backup history file), all archived WAL
    segments with names numerically less are no longer needed to recover
    the file system backup and can be deleted. However, you should
    consider keeping several backup sets to be absolutely certain that
    you can recover your data.
-->
バックアップを使用するためには、ファイルシステムのバックアップ取得中、および、その後に生成されるWALセグメントファイル全てが保存されている必要があります。この目的のために、ベースバックアップの過程で即座にWALアーカイブ領域に<firstterm>バックアップ履歴ファイル</>が作成されます。このファイルにはファイルシステムのバックアップに最初に必要とされるWALセグメントの名前が付けられます。
例えば、最初のWALファイルが <literal>0000000100001234000055CD</>である場合、バックアップ履歴ファイルは<literal>0000000100001234000055CD.007C9330.backup</>というように名付けられます。(ファイル名の2番目のパートはWALファイルの厳密な位置が記載されます。通常は無視することができます。)一旦、安全にファイルシステムのバックアップとそのバックアップ中に使用されたWALセグメントファイル(バックアップ履歴ファイルから特定できます)を取得すると、それより数値の小さな全てのWALアーカイブセグメントはファイルシステムのリカバリには必要が無く、削除することができます。しかし、データを確実に復旧させるためには数世代のバックアップセットを保持することを考慮すべきです。

   </para>

   <para>
<!-- 
    The backup history file is just a small text file. It contains the
    label string you gave to <xref linkend="app-pgbasebackup">, as well as
    the starting and ending times and WAL segments of the backup.
    If you used the label to identify the associated dump file,
    then the archived history file is enough to tell you which dump file to
    restore.
-->
バックアップ履歴ファイルは、ほんの小さなテキストファイルです。これには<xref linkend="app-pgbasebackup">で与えたラベル文字列の他、バックアップの開始、終了時間およびバックアップのWALセグメントが含まれます。
このラベルをバックアップを構成するために使うことで、アーカイブ履歴ファイルはどのバックアップをリストアするべきか間違いなく判断することができます。
   </para>

   <para>
<!-- 
    Since you have to keep around all the archived WAL files back to your
    last base backup, the interval between base backups should usually be
    chosen based on how much storage you want to expend on archived WAL
    files.  You should also consider how long you are prepared to spend
    recovering, if recovery should be necessary &mdash; the system will have to
    replay all those WAL segments, and that could take awhile if it has
    been a long time since the last base backup.
-->
最後のベースバックアップ以降のWALアーカイブを保持し続ける必要があるため、通常、ベースバックアップを取得すべき期間は、WALアーカイブを保持するためにどのくらいのストレージを拡張できるかによって決定されます。また、リカバリが必要になった場合に、どのくらいの時間をリカバリに使うと覚悟するのかも考慮すべきです。&mdash;システムは全てのWALセグメントを適用する必要があるため、もし、最後のベースバックアップを取得してから長い時間が経過している場合、適用に時間を要する可能性があります。
   </para>
  </sect2>

  <sect2 id="backup-lowlevel-base-backup">
<!--
   <title>Making a Base Backup Using the Low Level API</title> 
-->
   <title>低レベルAPIを使用したベースバックアップの作成</title>
   <para>
<!--
    The procedure for making a base backup using the low level
    APIs contains a few more steps than
    the <xref linkend="app-pgbasebackup"> method, but is relatively
    simple. It is very important that these steps are executed in
    sequence, and that the success of a step is verified before
    proceeding to the next step.
-->

低レベルのAPIを使ったベースバックバックアップを取得するには<xref linkend="app-pgbasebackup"> を使う方法に加えて数ステップが必要ですが、比較的簡単です。これらのステップは順番に実行することが重要で、次のステップに進む前にこれらのステップが成功していることを確認する必要があります。

  <orderedlist>
   <listitem>
    <para>
<!--
     Ensure that WAL archiving is enabled and working.
-->
WALアーカイブが有効であり、正常に動作することを確認してください。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     Connect to the database as a superuser and issue the command:
-->
データベースにスーパーユーザとして接続し、以下のコマンドを発行してください。
<programlisting>
SELECT pg_start_backup('label');
</programlisting>
<!--
     where <literal>label</> is any string you want to use to uniquely
     identify this backup operation.  (One good practice is to use the
     full path where you intend to put the backup dump file.)
     <function>pg_start_backup</> creates a <firstterm>backup label</> file,
     called <filename>backup_label</>, in the cluster directory with
     information about your backup, including the start time and label
     string.  The file is critical to the integrity of the backup, should
     you need to restore from it.

-->
ここで<literal>label</>は、バックアップ操作を一意に識別するために使用する任意の文字列です
（推奨方法は、格納先のバックアップダンプファイルの完全パスを使用することです）。
<function>pg_start_backup</>は、開始時刻やラベル文字列などのバックアップ情報を持つ<filename>backup_label</>という名前の<firstterm>バックアップラベル</>ファイルを、クラスタディレクトリ内に作成します。このファイルはバックアップの完全性保持のために重要な意味をもつファイルでバックアップから必ずリストアする必要があるでしょう。
    </para>

    <para>
<!--
     It does not matter which database within the cluster you connect to to
     issue this command.  You can ignore the result returned by the function;
     but if it reports an error, deal with that before proceeding.
-->
このコマンドを実行した時にクラスタ内のどのデータベースに接続したのかは注意する必要はありません。
この関数が返す結果は無視できますが、エラーが発生した場合は作業を進める前に対応してください。
    </para>

    <para>
<!--
     By default, <function>pg_start_backup</> can take a long time to finish.
     This is because it performs a checkpoint, and the I/O
     required for the checkpoint will be spread out over a significant
     period of time, by default half your inter-checkpoint interval
     (see the configuration parameter
     <xref linkend="guc-checkpoint-completion-target">).  This is
     usually what you want, because it minimizes the impact on query
     processing.  If you want to start the backup as soon as
     possible, use:
-->
デフォルトで、<function>pg_start_backup</>は終了までに長い時間がかかる場合があります。その理由はあるチェックポイントを実行し、そして、デフォルトでは設定したチェックポイント間隔の半分である、そのチェックポイントに必要なI/Oがかなりの時間にわたって広がるためです（設定パラメータについては<xref linkend="guc-checkpoint-completion-target">を参照してください）。通常これは、問い合わせ処理における影響を極小化するので望ましいことです。バックアップをなるべく早く行いたいのであれば、以下を使用します。
<programlisting>
SELECT pg_start_backup('label', true);
</programlisting>
<!--
     This forces the checkpoint to be done as quickly as possible.
-->
これはチェックポイントをできる限り早く行うよう強制します。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     Perform the backup, using any convenient file-system-backup tool
     such as <application>tar</> or <application>cpio</> (not
     <application>pg_dump</application> or
     <application>pg_dumpall</application>).  It is neither
     necessary nor desirable to stop normal operation of the database
     while you do this.
-->
(<application>pg_dump</application>や<application>pg_dumpall</application>ではなく)<application>tar</>や<application>cpio</>などの使い慣れた任意のファイルシステムバックアップツールを使用して、バックアップを実行してください。
この作業時に、データベースの通常の操作を停止することは不要ですし、望ましい方法でもありません。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     Again connect to the database as a superuser, and issue the command:
-->
再度、スーパーユーザとしてデータベースに接続し、以下のコマンドを発行してください。
<programlisting>
SELECT pg_stop_backup();
</programlisting>
<!--
     This terminates the backup mode and performs an automatic switch to
     the next WAL segment.  The reason for the switch is to arrange for
     the last WAL segment file written during the backup interval to be
     ready to archive.
-->
これはバックアップモードを終了し、次のWALセグメントへの自動切換えを行います。
この切換えの理由は、バックアップ期間中に書き出された最後のWALファイルがアーカイブできるよう準備することです。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     Once the WAL segment files active during the backup are archived, you are
     done.  The file identified by <function>pg_stop_backup</>'s result is
     the last segment that is required to form a complete set of backup files.
     If <varname>archive_mode</> is enabled,
     <function>pg_stop_backup</> does not return until the last segment has
     been archived.
     Archiving of these files happens automatically since you have
     already configured <varname>archive_command</>. In most cases this
     happens quickly, but you are advised to monitor your archive
     system to ensure there are no delays.
     If the archive process has fallen behind
     because of failures of the archive command, it will keep retrying
     until the archive succeeds and the backup is complete.
     If you wish to place a time limit on the execution of
     <function>pg_stop_backup</>, set an appropriate
     <varname>statement_timeout</varname> value.
-->
バックアップ間で使用されたWALセグメントファイルがアーカイブされれば完了です。<function>pg_stop_backup</>の結果で識別されるファイルは、バックアップファイル一式を完結させるのに必要となる最終セグメントです。<varname>archive_mode</>が有効であれば<function>pg_stop_backup</> は最終セグメントがアーカイブされるまで戻りません。
すでに<varname>archive_command</>を設定していますので、これらのファイルのアーカイブ操作は自動的に発生します。ほとんどの場合、これは瞬時に行われます。しかし、バックアップの完了を確認できるよう、アーカイブシステムを監視し、遅延が無いことの確認をお勧めします。
アーカイブコマンドの失敗によりアーカイブ処理が遅れてしまったとしても、アーカイブが成功し、そしてバックアップが完了するまで再試行を繰り返すようになっています。
<function>pg_stop_backup</>実行においての時間期限を設けたい場合、適切な<varname>statement_timeout</varname>の値を設定してください。
    </para>
   </listitem>
  </orderedlist>
   </para>

   <para>

<!--
    Some file system backup tools emit warnings or errors
    if the files they are trying to copy change while the copy proceeds.
    When taking a base backup of an active database, this situation is normal
    and not an error.  However, you need to ensure that you can distinguish
    complaints of this sort from real errors.  For example, some versions
    of <application>rsync</> return a separate exit code for
    <quote>vanished source files</>, and you can write a driver script to
    accept this exit code as a non-error case.  Also, some versions of
    GNU <application>tar</> return an error code indistinguishable from
    a fatal error if a file was truncated while <application>tar</> was
    copying it.  Fortunately, GNU <application>tar</> versions 1.16 and
    later exit with 1 if a file was changed during the backup,
    and 2 for other errors.  With GNU <application>tar</> version 1.23 and
    later, you can use the warning options <literal>&#045;-warning=no-file-changed
    &#045;-warning=no-file-removed</literal> to hide the related warning messages.
-->
ファイルシステムのバックアップツール中には複写している途中でファイルが変更されると警告もしくはエラーを報告するものがあります。稼働しているデータベースのベースバックアップを取っている場合には、この情況は正常でエラーではありません。しかし、この種の警告と本当のエラーとを区別できるか確認が必要です。例えば、<application>rsync</>のバージョンによっては<quote>消滅したソースファイル</>に対して別の退出コードを返し、そしてこの退出コードをエラーではないと受け付けるドライバスクリプトを記述することができます。同時にGNU <application>tar</>のバージョンによっては、<application>tar</>がそれを複写していた途中でファイルが切り詰められると、致命的エラーと識別できないエラーコードを返します。ありがたいことに、GNU <application>tar</>のバージョン1.16もしくはそれ以降では、バックアップ中にファイルが変更されると1で、それ以外のエラーの時は2でプログラムから抜けます。GNUの <application>tar</>で1.23以降のバージョンを使用しているのであれば、<literal>--warning=no-file-changed
    --warning=no-file-removed</literal>オプションをつけることで関連する警告メッセージを隠すオプションを使用することができます。
   </para>

   <para>
<!--
    Be certain that your backup dump includes all of the files under
    the database cluster directory (e.g., <filename>/usr/local/pgsql/data</>).
    If you are using tablespaces that do not reside underneath this directory,
    be careful to include them as well (and be sure that your backup dump
    archives symbolic links as links, otherwise the restore will corrupt
    your tablespaces).
-->
バックアップダンプに、データベースクラスタディレクトリ（例えば<filename>/usr/local/pgsql/data</>）以下にある全てのファイルが含まれていることを確認してください。
このディレクトリ以下に存在しないテーブル空間を使用している場合、注意して、同様にそれらを含めてください
（そして、バックアップダンプがリンクとしてシンボリックリンクをアーカイブしていることを確認してください。
さもないとリストアはテーブル空間を壊してしまいます）。
   </para>

   <para>
<!--
    You can, however, omit from the backup dump the files within the
    cluster's <filename>pg_xlog/</> subdirectory.  This
    slight adjustment is worthwhile because it reduces the risk
    of mistakes when restoring.  This is easy to arrange if
    <filename>pg_xlog/</> is a symbolic link pointing to someplace outside
    the cluster directory, which is a common setup anyway for performance
    reasons. You might also want to exclude <filename>postmaster.pid</>
    and <filename>postmaster.opts</>, which record information
    about the running <application>postmaster</>, not about the
    <application>postmaster</> which will eventually use this backup.
    (These files can confuse <application>pg_ctl</>.)
-->
しかし、クラスタの<filename>pg_xlog/</>サブディレクトリにあるファイルをバックアップダンプから省くことができます。
このちょっとした調整は、リストア処理中の失敗の危険性を低減できますので、行う価値があります。
<filename>pg_xlog/</>がクラスタディレクトリ外のどこかを指し示すシンボリックリンクの場合は調整が簡単です。
これは性能上の理由でよく使用される設定です。
また、いずれこのバックアップを使う<application>postmaster</>ではなく、今起動している<application>postmaster</>の情報を記録している
<filename>postmaster.pid</>と<filename>postmaster.opts</>も除外できます。(これらのファイルは<application>pg_ctl</>を誤作動させる可能性があります)
   </para>

   <para>
最後のベースバックアップまで遡ることができる全てのアーカイブ済みWALファイルを保持する必要がありますので、ベースバックアップの実行間隔は通常、アーカイブ済みWALファイルを格納する領域をどれだけ拡張したいかによって決定されます。
また、復旧処理に費すことができる時間がどの位許されるかについても考慮しなければなりません。
復旧が必要になった時に、システムはこれらのセグメントを全てやり直しする必要がありますが、最後のベースバックアップからの経過時間が長ければその分やり直しに時間がかかります。
   </para>

   <para>
<!--
    It is often a good idea to also omit from the backup dump the files
    within the cluster's <filename>pg_replslot/</> directory, so that
    replication slots that exist on the master do not become part of the
    backup.  Otherwise, the subsequent use of the backup to create a standby
    may result in indefinite retention of WAL files on the standby, and
    possibly bloat on the master if hot standby feedback is enabled, because
    the clients that are using those replication slots will still be connecting
    to and updating the slots on the master, not the standby.  Even if the
    backup is only intended for use in creating a new master, copying the
    replication slots isn't expected to be particularly useful, since the
    contents of those slots will likely be badly out of date by the time
    the new master comes on line.
-->
マスター上に存在するレプリケーションスロットがバックアップに含まれないようにするために、クラスタの中の<filename>pg_replslot/</>ディレクトリをバックアップから除くのもしばしば良い考えです。
もし、スタンバイを作成するためのバックアップを続けて使用すると、スタンバイのWALファイルの保持を無制限に保留する結果になり、ホットスタンバイからのフィードバックを有効にしている場合、マスターのWALを膨張させます。これは、これらのレプリケーションスロットを使っているクライアントはまだ、スタンバイではなく、マスターのスロットを接続し続け、更新しているからです。バックアップが新しいマスターを作成するためだけに作成されたとしても、レプリケーションスロットをコピーすることは特に有益であるとは考えられません。このようにバックアップにレプリケーションスロットを含むことは、新しいマスターがオンラインになったときにはスロットの内容が期限切れしており、有害である可能性があります。
   </para>

   <para>
<!--
    It's also worth noting that the <function>pg_start_backup</> function
    makes a file named <filename>backup_label</> in the database cluster
    directory, which is removed by <function>pg_stop_backup</>.
    This file will of course be archived as a part of your backup dump file.
    The backup label file includes the label string you gave to
    <function>pg_start_backup</>, as well as the time at which
    <function>pg_start_backup</> was run, and the name of the starting WAL
    file.  In case of confusion it is therefore possible to look inside a
    backup dump file and determine exactly which backup session the dump file
    came from.  However, this file is not merely for your information; its
    presence and contents are critical to the proper operation of the system's
    recovery process.

-->
また、<function>pg_start_backup</>関数がデータベースクラスタディレクトリ内に<filename>backup_label</>という名前のファイルを作成することに注意してください。
これは、<function>pg_stop_backup</>によって削除されます。
当然ながら、このファイルはバックアップダンプファイルの一部としてアーカイブされます。
バックアップラベルファイルには、<function>pg_start_backup</>に付与したラベル文字列と<function>pg_start_backup</>が実行された時刻、最初のWALファイルの名前が含まれます。
したがって、当惑した時にバックアップダンプファイルの中身を検索し、そのダンプファイルがどのバックアップセッションに由来したものかを確認することができます。
しかし、このファイルはあなたのためだけの情報ではありません。バックアップラベルファイルの存在とその内容はリカバリを行うPostgreSQLのプロセスが適切に動作するために非常に重要です。
   </para>

   <para>
<!--
    It is also possible to make a backup dump while the server is
    stopped.  In this case, you obviously cannot use
    <function>pg_start_backup</> or <function>pg_stop_backup</>, and
    you will therefore be left to your own devices to keep track of which
    backup dump is which and how far back the associated WAL files go.
    It is generally better to follow the continuous archiving procedure above.
-->
サーバが停止している時にバックアップダンプを作成することも可能です。
この場合、わかりきったことですが、<function>pg_start_backup</>や<function>pg_stop_backup</>を使用することができません。
そのため、どのバックアップダンプが、どのWALファイルと関連し、どこまで戻せばよいかを独自の方法で残さなければなりません。
通常は、上述の継続的アーカイブ手順に従う方をお勧めします。
   </para>
  </sect2>

  <sect2 id="backup-pitr-recovery">
<!--
   <title>Recovering Using a Continuous Archive Backup</title>
-->
   <title>継続的アーカイブによるバックアップを使用した復旧</title>

   <para>
<!--
    Okay, the worst has happened and you need to recover from your backup.
    Here is the procedure:
-->
さて、最悪の事態が発生し、バックアップから復旧する必要が出てきたものとします。
以下にその手順を説明します。
  <orderedlist>
   <listitem>
    <para>
<!--
     Stop the server, if it's running.
-->
もし稼動しているのであればサーバを停止してください。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     If you have the space to do so,
     copy the whole cluster data directory and any tablespaces to a temporary
     location in case you need them later. Note that this precaution will
     require that you have enough free space on your system to hold two
     copies of your existing database. If you do not have enough space,
     you should at least save the contents of the cluster's <filename>pg_xlog</>
     subdirectory, as it might contain logs which
     were not archived before the system went down.
-->
もし容量があるのであれば、後で必要になる場合に備えてクラスタデータディレクトリ全体とテーブル空間を全て一時的な場所にコピーしてください。
この予防措置は、既存のデータベースを2つ分保持できるだけの空き領域を必要とします。
十分な領域がない場合でも、少なくともクラスタの<filename>pg_xlog</>サブディレクトリの内容は保存すべきです。
ここには、システムが停止する前にアーカイブされなかったログファイルが含まれているかも知れないからです。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     Remove all existing files and subdirectories under the cluster data
     directory and under the root directories of any tablespaces you are using.
-->
クラスタデータディレクトリ以下、および、使用中のテーブル空間の最上位ディレクトリ以下にある既存の全てのファイルとサブディレクトリを削除してください。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     Restore the database files from your file system backup.  Be sure that they
     are restored with the right ownership (the database system user, not
     <literal>root</>!) and with the right permissions.  If you are using
     tablespaces,
     you should verify that the symbolic links in <filename>pg_tblspc/</>
     were correctly restored.
-->
ファイルシステムバックアップからデータベースファイルをリストアします。ファイルが正しい所有権（<literal>root</>ではなくデータベースシステムユーザです！）でリストアされていることを確認してください。テーブル空間を使用している場合は、<filename>pg_tblspc/</>内のシンボリックリンクが正しくリストアされていることを検証する必要があります。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     Remove any files present in <filename>pg_xlog/</>; these came from the
     file system backup and are therefore probably obsolete rather than current.
     If you didn't archive <filename>pg_xlog/</> at all, then recreate
     it with proper permissions,
     being careful to ensure that you re-establish it as a symbolic link
     if you had it set up that way before.
-->
<filename>pg_xlog/</>内にあるファイルをすべて削除してください。
これらはファイルシステムバックアップから生成されたものであり、おそらく現在のものより古く使用できないものです。
<filename>pg_xlog/</>をまったくアーカイブしていなければ、適切な権限で再作成してください。以前シンボリックリンクとして設定していたのであれば、そのように確実に再構築するように注意してください。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     If you have unarchived WAL segment files that you saved in step 2,
     copy them into <filename>pg_xlog/</>.  (It is best to copy them,
     not move them, so you still have the unmodified files if a
     problem occurs and you have to start over.)
-->
手順2で退避させた未アーカイブのWALセグメントファイルがあるのであれば、<filename>pg_xlog/</>にコピーしてください。
（問題が発生し、初めからやり直さなければならない場合に未変更のファイルが残るように、移動させるのではなくコピーすることが最善です。）
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     Create a recovery command file <filename>recovery.conf</> in the cluster
     data directory (see <xref linkend="recovery-config">). You might
     also want to temporarily modify <filename>pg_hba.conf</> to prevent
     ordinary users from connecting until you are sure the recovery was successful.
-->
復旧コマンドファイル<filename>recovery.conf</>（<xref linkend="recovery-config">を参照）をクラスタデータディレクトリに作成してください。
また、一時的に<filename>pg_hba.conf</>を編集し、復旧の成功を確認できるまで一般ユーザが接続できないようにする必要があるかもしれません。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     Start the server.  The server will go into recovery mode and
     proceed to read through the archived WAL files it needs.  Should the
     recovery be terminated because of an external error, the server can
     simply be restarted and it will continue recovery.  Upon completion
     of the recovery process, the server will rename
     <filename>recovery.conf</> to <filename>recovery.done</> (to prevent
     accidentally re-entering recovery mode later) and then
     commence normal database operations.
-->
サーバを起動してください。
サーバは復旧モードに入り、必要なアーカイブ済みWALファイル群の読み込みを行います。
外部的なエラーにより復旧が中断したら、サーバを単に再起動させて、復旧処理を継続してください。
復旧処理が完了したら、（誤って後で復旧モードに再度入らないように）postmasterは<filename>recovery.conf</>の名前を<filename>recovery.done</>に変更します。
その後通常のデータベース操作を開始します。
    </para>
   </listitem>
   <listitem>
    <para>
<!--
     Inspect the contents of the database to ensure you have recovered to
     the desired state.  If not, return to step 1.  If all is well,
     allow your users to connect by restoring <filename>pg_hba.conf</> to normal.
-->
データベースの内容を検査し、希望する状態まで復旧できていることを確認してください。
復旧できなかった場合は手順1に戻ってください。
全て問題なければ、ユーザが接続できるように<filename>pg_hba.conf</>を正常状態に戻してください。
    </para>
   </listitem>
  </orderedlist>
   </para>

   <para>
<!--
    The key part of all this is to set up a recovery configuration file that
    describes how you want to recover and how far the recovery should
    run.  You can use <filename>recovery.conf.sample</> (normally
    located in the installation's <filename>share/</> directory) as a
    prototype.  The one thing that you absolutely must specify in
    <filename>recovery.conf</> is the <varname>restore_command</>,
    which tells <productname>PostgreSQL</> how to retrieve archived
    WAL file segments.  Like the <varname>archive_command</>, this is
    a shell command string.  It can contain <literal>%f</>, which is
    replaced by the name of the desired log file, and <literal>%p</>,
    which is replaced by the path name to copy the log file to.
    (The path name is relative to the current working directory,
    i.e., the cluster's data directory.)
    Write <literal>%%</> if you need to embed an actual <literal>%</>
    character in the command.  The simplest useful command is
    something like:
-->
ここで重要となるのは、復旧設定ファイルを設定することです。
このファイルで、どのように復旧させたいのかやどこまで復旧させたいかを記述します。
<filename>recovery.conf.sample</>（通常はインストレーションの<filename>share/</>ディレクトリに格納されています）を手本として使用することができます。
<filename>recovery.conf</>で絶対に指定しなければならないことは、アーカイブ済みWALファイルセグメントをどのように戻すかを<productname>PostgreSQL</>に通知する<varname>restore_command</>です。
<varname>archive_command</>同様、これはシェルコマンド文字列です。
ここには、対象のログファイルの名前で置換される<literal>%f</>やログファイルのコピー先を示すパスで置換される<literal>%p</>を含めることができます。
（パス名は現在の作業用ディレクトリ、つまり、クラスタのデータディレクトリから見た相対パスです。）
コマンド内に<literal>%</>文字自体を埋め込む必要があれば<literal>%%</>と記載してください。
最も簡単でよく使われるコマンドは以下のようなものです。
<programlisting>
restore_command = 'cp /mnt/server/archivedir/%f %p'
</programlisting>
<!--
    which will copy previously archived WAL segments from the directory
    <filename>/mnt/server/archivedir</>.  Of course, you can use something
    much more complicated, perhaps even a shell script that requests the
    operator to mount an appropriate tape.
-->
これは事前にアーカイブされたWALセグメントを<filename>/mnt/server/archivedir</>ディレクトリからコピーします。
当然ながら、もっと複雑なものを使用することができます。
例えば、操作者に適切なテープをマウントさせることを要求するようなシェルスクリプトでさえ可能です。
   </para>

   <para>
<!--
    It is important that the command return nonzero exit status on failure.
    The command <emphasis>will</> be called requesting files that are not
    present in the archive; it must return nonzero when so asked.  This is not
    an error condition.  An exception is that if the command was terminated by
    a signal (other than <systemitem>SIGTERM</systemitem>, which is used as
    part of a database server shutdown) or an error by the shell (such as
    command not found), then recovery will abort and the server will not start
    up.
-->
このコマンドが失敗した時に非ゼロの終了ステータスを返すことが重要です。
このコマンドは、アーカイブに存在しないファイル要求する<emphasis>かもしれません</>が、その場合でも非ゼロを返さなければなりません。
これはエラー状態ではありません。例外は、コマンドがシグナルによって中断された場合(データベースの停止に使用される<systemitem>SIGTERM</systemitem>以外)か、シェルによるエラー(コマンドが見つかりませんなど)でリカバリが中断され、サーバが起動しない場合です。
   </para>
   <para>
<!--
    Not all of the requested files will be WAL segment
    files; you should also expect requests for files with a suffix of
    <literal>.backup</> or <literal>.history</>. Also be aware that
    the base name of the <literal>%p</> path will be different from
    <literal>%f</>; do not expect them to be interchangeable.
-->
必要なファイルはWALセグメントファイルだけではありません。
<literal>.backup</>、または<literal>.history</>が付いているファイルが要求されることを想定しなければなりません。
<literal>.backup</>、または<literal>.history</>が付いているファイルに対しての要求を期待することもあるでしょう。同時に、<literal>%p</>パスのファイル名部分は<literal>%f</>と異なることに注意してください。これらが相互に置き換え可能であるとは考えないでください。
   </para>

   <para>
<!--
    WAL segments that cannot be found in the archive will be sought in
    <filename>pg_xlog/</>; this allows use of recent un-archived segments.
    However, segments that are available from the archive will be used in
    preference to files in <filename>pg_xlog/</>.
-->
アーカイブ場所で見つけられなかったWALセグメントは<filename>pg_xlog/</>から検索されます。
これにより、最近の未アーカイブのセグメントを使用することができます。
しかし、アーカイブ場所から利用できるセグメントは<filename>pg_xlog/</>内のファイルよりも優先的に使用されます。

   </para>

   <para>
<!--
    Normally, recovery will proceed through all available WAL segments,
    thereby restoring the database to the current point in time (or as
    close as possible given the available WAL segments).  Therefore, a normal
    recovery will end with a <quote>file not found</> message, the exact text
    of the error message depending upon your choice of
    <varname>restore_command</>.  You may also see an error message
    at the start of recovery for a file named something like
    <filename>00000001.history</>.  This is also normal and does not
    indicate a problem in simple recovery situations; see
    <xref linkend="backup-timelines"> for discussion.
-->
通常は利用可能な全てのWALセグメントを使用して復旧処理が行われます。その結果、データベースを現時点まで（もしくは、利用可能なWALセグメントで得られる限り現在に近い時点まで）リストアします。従って、通常の復旧は<quote>file not found</>メッセージで終了します。エラーメッセージの正確な文言は<varname>restore_command</>の選択によります。また、復旧の開始時点で<filename>00000001.history</>のようなファイル名のエラーメッセージが出ることがあります。これも単純な復旧作業では不具合を意味するものでなく正常です。論議については<xref linkend="backup-timelines">を参照してください。
   </para>

   <para>
<!--
    If you want to recover to some previous point in time (say, right before
    the junior DBA dropped your main transaction table), just specify the
    required <link linkend="recovery-target-settings">stopping point</link> in <filename>recovery.conf</>.  You can specify
    the stop point, known as the <quote>recovery target</>, either by
    date/time, named restore point or by completion of a specific transaction
    ID.  As of this writing only the date/time and named restore point options
    are very usable, since there are no tools to help you identify with any
    accuracy which transaction ID to use.
-->
もし以前のある時点まで復旧させたい場合（例えば、経験不足のデータベース管理者が主トランザクションテーブルを消去した直前）、<filename>recovery.conf</>に要求する<link linkend="recovery-target-settings">停止時点</link>を指定するだけです。停止時点は、<quote>recovery target</>として既知の停止時点で指定することも、日付と時刻で指定することも、リストアポイントか完了した特定のトランザクションIDで指定することもできます。
本ドキュメントの執筆時点では使用するトランザクションIDの識別を補助するツールがありませんので、ほとんどの場合は日付と時刻による指定のみを使用することになるでしょう。
   </para>

   <note>
     <para>
<!--
      The stop point must be after the ending time of the base backup, i.e.,
      the end time of <function>pg_stop_backup</>.  You cannot use a base backup
      to recover to a time when that backup was in progress.  (To
      recover to such a time, you must go back to your previous base backup
      and roll forward from there.)
-->
停止時点はバックアップの終了時刻、つまり、<function>pg_stop_backup</>の最終時刻より後の時点でなければなりません。
バックアップを行っている最中のある時点までベースバックアップを使用して復旧させることはできません
（こうした時点まで復旧させるには、その前のベースバックアップまで戻って、そこからロールフォワードしてください）。
     </para>
   </note>

   <para>
<!--
    If recovery finds corrupted WAL data, recovery will
    halt at that point and the server will not start. In such a case the
    recovery process could be re-run from the beginning, specifying a
    <quote>recovery target</> before the point of corruption so that recovery
    can complete normally.
    If recovery fails for an external reason, such as a system crash or
    if the WAL archive has become inaccessible, then the recovery can simply
    be restarted and it will restart almost from where it failed.
    Recovery restart works much like checkpointing in normal operation:
    the server periodically forces all its state to disk, and then updates
    the <filename>pg_control</> file to indicate that the already-processed
    WAL data need not be scanned again.
-->
復旧時にWALデータの破損がわかると、復旧はその時点で止まり、サーバは起動しません。
こうした場合、<quote>復旧対象</>に破損時点より前の時点を指定することで、復旧処理が正常に完了できるよう、復旧プロセスを初めからやり直すことができます。
システムクラッシュなど外的理由により復旧処理が失敗した場合やWALアーカイブがアクセスできなくなった場合、復旧処理を単に再起動させることができます。
この場合は失敗した時点とほぼ同じところから再開します。
復旧処理の再起動は、次のような通常操作時のチェックポイント処理とほぼ同様に動作します。
サーバは定期的にすべての状態をディスクに強制し、再度スキャンする必要がない処理済みのWALデータを示す<filename>pg_control</>ファイルを更新します。
   </para>

  </sect2>

  <sect2 id="backup-timelines">
<!--
   <title>Timelines</title>
-->
   <title>タイムライン</title>

  <indexterm zone="backup">
<!--
   <primary>timelines</primary>
-->
   <primary>タイムライン</primary>
  </indexterm>

   <para>
<!--
    The ability to restore the database to a previous point in time creates
    some complexities that are akin to science-fiction stories about time
    travel and parallel universes.  For example, in the original history of the database,
    suppose you dropped a critical table at 5:15PM on Tuesday evening, but
    didn't realize your mistake until Wednesday noon.
    Unfazed, you get out your backup, restore to the point-in-time 5:14PM
    Tuesday evening, and are up and running.  In <emphasis>this</> history of
    the database universe, you never dropped the table.  But suppose
    you later realize this wasn't such a great idea, and would like
    to return to sometime Wednesday morning in the original history.
    You won't be able
    to if, while your database was up-and-running, it overwrote some of the
    WAL segment files that led up to the time you now wish you
    could get back to.  Thus, to avoid this, you need to distinguish the series of
    WAL records generated after you've done a point-in-time recovery from
    those that were generated in the original database history.
-->
過去のある時点までデータベースを復旧できる機能は、タイムトラベルやパラレルユニバースといったSFの物語に類似した、多少の複雑性があります。
例えば、データベースの元の履歴で、火曜日の夕方5:15PMに重要なテーブルを削除し、水曜日のお昼まで手違いに気が付かなかったとします。
慌てずに、バックアップを取り出して、火曜日の夕方5:14PMの時点にリストアし、データベースを起動させます。
データベース世界の<emphasis>この</>履歴では、そのテーブルを削除していません。
しかし、後になって、これは大した問題ではなかったことが分かり、元の履歴における水曜日に朝の何時かにまで戻したいと考えたと仮定しましょう。
データベースは既に起動していますので、元に戻したい時点に至るWALセグメントファイルの一部は上書きされていて、戻すことはできないかもしれません。
ですので、このことを避けるために、ポイントインタイムで復旧させた後に生成された一連のWAL記録と元のデータベースの履歴において生成されたWAL記録とを区別する必要があります。 
   </para>

   <para>
<!--
    To deal with this problem, <productname>PostgreSQL</> has a notion
    of <firstterm>timelines</>.  Whenever an archive recovery completes,
    a new timeline is created to identify the series of WAL records
    generated after that recovery.  The timeline
    ID number is part of WAL segment file names so a new timeline does
    not overwrite the WAL data generated by previous timelines.  It is
    in fact possible to archive many different timelines.  While that might
    seem like a useless feature, it's often a lifesaver.  Consider the
    situation where you aren't quite sure what point-in-time to recover to,
    and so have to do several point-in-time recoveries by trial and error
    until you find the best place to branch off from the old history.  Without
    timelines this process would soon generate an unmanageable mess.  With
    timelines, you can recover to <emphasis>any</> prior state, including
    states in timeline branches that you abandoned earlier.
-->
こうした問題を扱うために<productname>PostgreSQL</>には<firstterm>タイムライン</>という概念があります。
アーカイブ復旧が完了したときはいつでも、その復旧後に生成されたWAL記録を識別するための新しいタイムラインが生成されます。
タイムラインID番号はWALセグメントファイル名の一部です。
ですので、新しいタイムラインはこれまでのタイムラインで生成されたWALデータを上書きしません。
実際、多くの異なるタイムラインをアーカイブすることができます。
不要な機能と考えるかもしれませんが、命綱になることがしばしばあります。
どの時点まで復旧すればよいか確実でないといった状況を考えてみてください。
その時は、過去の履歴からの分岐点として最善の時点を見つけるために、試行錯誤して何度もポイントインタイムの復旧を行う必要があるでしょう。
タイムラインがないと、この手続きはすぐに管理不能な混乱を招いてしまいます。
タイムラインを使用して、以前捨てたタイムライン分岐における状態を含む、過去の<emphasis>任意</>の状態に復旧させることができます。
   </para>

   <para>
<!--
    Every time a new timeline is created, <productname>PostgreSQL</> creates
    a <quote>timeline history</> file that shows which timeline it branched
    off from and when.  These history files are necessary to allow the system
    to pick the right WAL segment files when recovering from an archive that
    contains multiple timelines.  Therefore, they are archived into the WAL
    archive area just like WAL segment files.  The history files are just
    small text files, so it's cheap and appropriate to keep them around
    indefinitely (unlike the segment files which are large).  You can, if
    you like, add comments to a history file to record your own notes about
    how and why this particular timeline was created.  Such comments will be
    especially valuable when you have a thicket of different timelines as
    a result of experimentation.
-->
新しいタイムラインが生成される度に、<productname>PostgreSQL</>は、どのタイムラインがいつどこから分岐したかを示す<quote>タイムライン履歴</>ファイルを作成します。
この履歴ファイルは、複数のタイムラインを含むアーカイブ場所から復旧する時にシステムが正しいWALセグメントファイルを選択できるようにするために必要です。
したがって、履歴ファイルは、WALセグメントファイル同様にWALアーカイブ領域にアーカイブされます。
履歴ファイルは（巨大になるセグメントファイルとは異なり）単なる小さなテキストファイルですので、安価かつ適切に無期限で保管できます。
必要ならば、履歴ファイルにコメントを追加し、この特定のタイムラインがどのように、なぜ生成されたかについて独自の注釈を付与することができます。
特にこうしたコメントは、実験の結果いくつものタイムラインのもつれがある場合に有用です。
   </para>

   <para>
<!--
    The default behavior of recovery is to recover along the same timeline
    that was current when the base backup was taken.  If you wish to recover
    into some child timeline (that is, you want to return to some state that
    was itself generated after a recovery attempt), you need to specify the
    target timeline ID in <filename>recovery.conf</>.  You cannot recover into
    timelines that branched off earlier than the base backup.
-->
復旧処理のデフォルトは、ベースバックアップが取得された時点のタイムラインと同一のタイムラインに沿った復旧です。
別の子タイムラインに沿って復旧させたい（つまり、復旧試行以降に生成されたある状態に戻りたい）場合は<filename>recovery.conf</>で対象のタイムラインIDを指定しなければなりません。
ベースバックアップより前に分岐したタイムラインに沿って復旧することはできません。
   </para>
  </sect2>

  <sect2 id="backup-tips">
<!--
   <title>Tips and Examples</title>
-->
   <title>ヒントと例</title>

   <para>
<!--
    Some tips for configuring continuous archiving are given here.
-->
継続的アーカイブを構成するいくつかのヒントを以下にあげます。
   </para>

    <sect3 id="backup-standalone">
<!--
     <title>Standalone Hot Backups</title>
-->
     <title>スタンドアローンホットバックアップ</title>

     <para>
<!--
      It is possible to use <productname>PostgreSQL</>'s backup facilities to
      produce standalone hot backups. These are backups that cannot be used
      for point-in-time recovery, yet are typically much faster to backup and
      restore than <application>pg_dump</> dumps.  (They are also much larger
      than <application>pg_dump</> dumps, so in some cases the speed advantage
      might be negated.)
-->
スタンドアローンホットバックアップを形成するため<productname>PostgreSQL</>のバックアップ基盤を使用することができます。これらのバックアップはポイントインタイムリカバリに使用することはできないのですが、<application>pg_dump</>によるダンプよりバックアップとリストアが概してより速く行われます。（同時に<application>pg_dump</>のダンプより大きくなるので、場合によっては速度による利点が打ち消されるかもしれません。）
     </para>

     <para>
<!--
      As with base backups, the easiest way to produce a standalone
      hot backup is to use the <xref linkend="app-pgbasebackup">
      tool. If you include the <literal>-X</> parameter when calling
      it, all the transaction log required to use the backup will be
      included in the backup automatically, and no special action is
      required to restore the backup.
-->
ベースバックアップと同様に、スタンドアロンホットバックアップを作成する最も簡単な方法は <xref linkend="app-pgbasebackup">ツールを使用する方法です。実行時に<literal>-X</>オプションをつけることでバックアップに必要な全てのトランザクションログを自動的にバックアップに含めることができ、リストアするときには特に特別な作業を行う必要がありません。
     </para>

     <para>
<!--
      If more flexibility in copying the backup files is needed, a lower
      level process can be used for standalone hot backups as well.
      To prepare for low level standalone hot backups, set <varname>wal_level</> to
      <literal>archive</> or higher, <varname>archive_mode</> to
      <literal>on</>, and set up an <varname>archive_command</> that performs
      archiving only when a <emphasis>switch file</> exists.  For example:
<programlisting>
archive_command = 'test ! -f /var/lib/pgsql/backup_in_progress || (test ! -f /var/lib/pgsql/archive/%f &amp;&amp; cp %p /var/lib/pgsql/archive/%f)'
</programlisting>
      This command will perform archiving when
      <filename>/var/lib/pgsql/backup_in_progress</> exists, and otherwise
      silently return zero exit status (allowing <productname>PostgreSQL</>
      to recycle the unwanted WAL file).
-->
より柔軟なバックアップファイルが必要な場合、スタンドアローンホットバックアップと同様に低レベルのプロセスを使うこともできます。低レベルのスタンドアローンホットバックアップを取得するためには、準備として<varname>wal_level</>を<literal>archive</>以上にセットし、  <varname>archive_mode</>を<literal>on</>にセットし、<emphasis>switch ファイル</>が存在する時のみに実行される<varname>archive_command</>をセットします。例：
<programlisting>
archive_command = 'test ! -f /var/lib/pgsql/backup_in_progress || (test ! -f /var/lib/pgsql/archive/%f &amp;&amp; cp %p /var/lib/pgsql/archive/%f)'
</programlisting>

このコマンドは<filename>/var/lib/pgsql/backup_in_progress</> が存在する時のみ実行され、存在しない時は静かに0の退出コードを返します。(<productname>PostgreSQL</>に必要の無いWALファイルを再利用することを許可します)

     </para>

     <para>
<!--
      With this preparation, a backup can be taken using a script like the
      following:
-->
この準備によって、バックアップは以下のようなスクリプトを使用して取得されます。
<programlisting>
touch /var/lib/pgsql/backup_in_progress
psql -c "select pg_start_backup('hot_backup');"
tar -cf /var/lib/pgsql/backup.tar /var/lib/pgsql/data/
psql -c "select pg_stop_backup();"
rm /var/lib/pgsql/backup_in_progress
tar -rf /var/lib/pgsql/backup.tar /var/lib/pgsql/archive/
</programlisting>
<!--
      The switch file <filename>/var/lib/pgsql/backup_in_progress</> is
      created first, enabling archiving of completed WAL files to occur.
      After the backup the switch file is removed. Archived WAL files are
      then added to the backup so that both base backup and all required
      WAL files are part of the same <application>tar</> file.
      Please remember to add error handling to your backup scripts.
-->
完全なWALファイルのアーカイブが行われるように、スイッチファイル、<filename>/var/lib/pgsql/backup_in_progress</>が最初に作成されます。
バックアップの後、スイッチファイルは削除されます。
その後、アーカイブされたWALファイルは、ベースバックアップとすべての必要なWALファイル共に同じ<application>tar</>ファイルの一部になるよう、バックアップに追加されます。
バックアップスクリプトにエラー処理を加えておくことを思い出してください。
     </para>
    </sect3>

    <sect3 id="compressed-archive-logs">
<!--
     <title>Compressed Archive Logs</title>
 -->
     <title>圧縮アーカイブログ</title>

     <para>
<!--
      If archive storage size is a concern, you can use
      <application>gzip</application> to compress the archive files:
-->
もし、アーカイブのストレージ容量に懸念がある場合、アーカイブファイルを圧縮するために<application>gzip</application>を使用することもできます。

<programlisting>
archive_command = 'gzip &lt; %p &gt; /var/lib/pgsql/archive/%f'
</programlisting>
<!--
      You will then need to use <application>gunzip</> during recovery:
-->
リカバリ中は <application>gunzip</>を使う必要があります。
<programlisting>
restore_command = 'gunzip &lt; /mnt/server/archivedir/%f &gt; %p'
</programlisting>
     </para>
    </sect3>


    <sect3 id="backup-scripts">
<!--
     <title><varname>archive_command</varname> Scripts</title>
-->
     <title><varname>archive_command</varname>スクリプト</title>

     <para>
<!--
      Many people choose to use scripts to define their
      <varname>archive_command</varname>, so that their
      <filename>postgresql.conf</> entry looks very simple:
-->
<filename>postgresql.conf</>の記入事項が以下のように簡素となるため、多くの人が<varname>archive_command</varname>の定義にスクリプトの使用を選択します。
<programlisting>
archive_command = 'local_backup_script.sh "%p" "%f"'
</programlisting>
<!--
      Using a separate script file is advisable any time you want to use
      more than a single command in the archiving process.
      This allows all complexity to be managed within the script, which
      can be written in a popular scripting language such as
      <application>bash</> or <application>perl</>. 
-->
アーカイブ処理手順において単一ではなくそれ以上の数のコマンドを使用したい場合はいつでも、別のスクリプトファイルの使用が推奨されます。そうするとスクリプト内で全ての複雑性が管理されます。スクリプトは<application>bash</>または<application>perl</>のようなよくあるスクリプト言語で記載できます。
     </para>

     <para>
<!--
      Examples of requirements that might be solved within a script include:
-->
スクリプト内で解決される要件の例として以下があります。
      <itemizedlist>
       <listitem>
        <para>
<!--
         Copying data to secure off-site data storage
-->
セキュアなオフサイトデータストレージへのデータのコピー
        </para>
       </listitem>
       <listitem>
        <para>
<!--
         Batching WAL files so that they are transferred every three hours,
         rather than one at a time
-->
一回に全てではなく３時間毎に転送されるようにWALファイルのバッチ
        </para>
       </listitem>
       <listitem>
        <para>
<!--
         Interfacing with other backup and recovery software
-->
その他のバックアップとリカバリーソフトウェアとのインターフェイス
        </para>
       </listitem>
       <listitem>
        <para>
<!--
         Interfacing with monitoring software to report errors
-->
エラー報告を行う監視ソフトとのインターフェイス
        </para>
       </listitem>
      </itemizedlist>
     </para>
     <tip>
      <para>
<!-- 
       When using an <varname>archive_command</varname> script, it's desirable
       to enable <xref linkend="guc-logging-collector">.
       Any messages written to <systemitem>stderr</> from the script will then
       appear in the database server log, allowing complex configurations to
       be diagnosed easily if they fail.
-->
<varname>archive_command</varname>スクリプトを使うときは<xref linkend="guc-logging-collector">を使えるようにすることが望ましい方法です。
そのスクリプトはメッセージを<systemitem>stderr</>で書き出し、それはデータベースのサーバーログとして書かれます。このためスクリプトでエラーが発生した時に簡単に検知するための細かな設定を行なうことができるからです。
      </para>
     </tip>
    </sect3>
  </sect2>

  <sect2 id="continuous-archiving-caveats">
<!--
   <title>Caveats</title>
-->
   <title>警告</title>

   <para>
<!--
    At this writing, there are several limitations of the continuous archiving
    technique.  These will probably be fixed in future releases:
-->
本ドキュメント作成時点では、継続的アーカイブ技術にいくつかの制限があります。
将来のリリースでは修正されるはずです。

  <itemizedlist>
   <listitem>
    <para>
<!--
     Operations on hash indexes are not presently WAL-logged, so
     replay will not update these indexes.  This will mean that any new inserts
     will be ignored by the index, updated rows will apparently disappear and
     deleted rows will still retain pointers. In other words, if you modify a
     table with a hash index on it then you will get incorrect query results
     on a standby server.  When recovery completes it is recommended that you
     manually <xref linkend="sql-reindex">
     each such index after completing a recovery operation.
-->
ハッシュインデックスに対する操作は現在WALログに残りません。したがって、再生してもこれらのインデックスは更新されません。
これは、新しい挿入はインデックスにより無視され、更新された行は見かけ上消え、削除された行はポインタを保持し続けるということです。
すなわち、ハッシュインデックス付きのテーブルを変更すると、スタンバイサーバでは不正確な問い合わせ結果が得られます。
復旧処理が終わった後に手作業でそうしたインデックスそれぞれに対して<xref linkend="sql-reindex">を行うことが推奨されます。
    </para>
   </listitem>

   <listitem>
    <para>
<!--
     If a <xref linkend="sql-createdatabase">
     command is executed while a base backup is being taken, and then
     the template database that the <command>CREATE DATABASE</> copied
     is modified while the base backup is still in progress, it is
     possible that recovery will cause those modifications to be
     propagated into the created database as well.  This is of course
     undesirable.  To avoid this risk, it is best not to modify any
     template databases while taking a base backup.
-->
もしもベースバックアップが行われている時、<xref linkend="sql-createdatabase">コマンドが実行され、ベースバックアップが処理を実行している期間に<command>CREATE DATABASE</>がコピーしているtemplateデータベースが変更されると、復旧処理はこれらの変更を作成されたデータベースにも同時に伝播させることは確実です。
もちろん、これは望まれる事ではありません。
この危険を回避するには、ベースバックアップ期間中にはすべてのtemplateデータベースを変更しないことが一番です。
    </para>
   </listitem>

   <listitem>
    <para>
<!--
     <xref linkend="sql-createtablespace">
     commands are WAL-logged with the literal absolute path, and will
     therefore be replayed as tablespace creations with the same
     absolute path.  This might be undesirable if the log is being
     replayed on a different machine.  It can be dangerous even if the
     log is being replayed on the same machine, but into a new data
     directory: the replay will still overwrite the contents of the
     original tablespace.  To avoid potential gotchas of this sort,
     the best practice is to take a new base backup after creating or
     dropping tablespaces.
-->
<xref linkend="sql-createtablespace">コマンドはリテラルの絶対パス付でWALにログが記録され、したがって、同じ絶対パスでのテーブル空間作成の時に再生されます。
これは、もしログが異なったマシン上で再生される場合には好ましくありません。
ログ再生がたとえ同一のマシンであっても、新規のデータディレクトリであれば危険です。
なぜなら、再生は元のテーブル空間の内容を上書きし続けるからです。
この種の潜在的な振舞いを防ぐためには、テーブル空間を作成もしくは削除後に新規ベースバックアップを行うのが最良の手段です。
    </para>
   </listitem>
  </itemizedlist>
   </para>

   <para>
<!--
    It should also be noted that the default <acronym>WAL</acronym>
    format is fairly bulky since it includes many disk page snapshots.
    These page snapshots are designed to support crash recovery, since
    we might need to fix partially-written disk pages.  Depending on
    your system hardware and software, the risk of partial writes might
    be small enough to ignore, in which case you can significantly
    reduce the total volume of archived logs by turning off page
    snapshots using the <xref linkend="guc-full-page-writes">
    parameter.  (Read the notes and warnings in <xref linkend="wal">
    before you do so.)  Turning off page snapshots does not prevent
    use of the logs for PITR operations.  An area for future
    development is to compress archived WAL data by removing
    unnecessary page copies even when <varname>full_page_writes</> is
    on.  In the meantime, administrators might wish to reduce the number
    of page snapshots included in WAL by increasing the checkpoint
    interval parameters as much as feasible.
-->
また、デフォルトの<acronym>WAL</acronym>フォーマットは数多くのディスクページのスナップショットを含んでいるため、かなりかさばるものになってしまっていることに触れておくべきでしょう。
これらのページスナップショットは、クラッシュから回復のために設計されています。
それというのも、回復処理の際には不完全に書き込まれているディスクページを修復しなければならないことがあるからです。
システムのハードウェアやソフトウェアによっては、不完全なディスクページの書き込みが起きてしまう危険性は無視してもよい程微小です。
この場合<xref linkend="guc-full-page-writes">パラメータを設定してページスナップショットを無効にすることで、アーカイブされたログの総容量を大幅に縮小できます
（実際に設定を行う前に、<xref linkend="wal">の注意事項と警告を読んでください）。
ページスナップショットを無効にしても PITR処理の際にログが使用できなくなることはありません。
将来の課題は、<varname>full_page_writes</>がたとえオンになっている場合であっても不要なページを取り除き、アーカイブ済みWALデータの圧縮を行うことでしょう。
差し当たり管理者は、可能な限りチェックポイント間隔パラメータを大きくすることによって、WALに含まれるページスナップショットの数を削減することができます。
   </para>
  </sect2>
 </sect1>

</chapter>
